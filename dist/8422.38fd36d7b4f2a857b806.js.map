{"version":3,"file":"8422.38fd36d7b4f2a857b806.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ChatListType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isLocalMessageId,\n  isUserBot,\n  toChannelId,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addSimilarChannels,\n  addUsers,\n  addUserStatuses,\n  addUsersToRestrictedInviteList,\n  deleteChatMessages,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectLastServiceNotification,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n  actions.closeStoryViewer({ tabId });\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: Number(loadingThreadId),\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.translate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.translate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType;\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return selectChatLastMessage(global, chat.id)?.date || chat.creationDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, tabId = getCurrentTabId(), withPhotos,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat, tabId);\n    if (withPhotos) {\n      actions.loadProfilePhotos({ profileId: chatId });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active');\n    loadChats('archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = updateChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let restrictedUserIds: string[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    restrictedUserIds = result?.restrictedUserIds;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (restrictedUserIds) {\n    global = getGlobal();\n    global = addUsersToRestrictedInviteList(global, restrictedUserIds, channelId, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChatId: string | undefined;\n  try {\n    const { chat: createdChat, restrictedUserIds } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n    createdChatId = chatId;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n    if (restrictedUserIds) {\n      global = getGlobal();\n      global = addUsersToRestrictedInviteList(global, restrictedUserIds, chatId, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    } else if ((err as ApiError).message === 'USER_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n      global = addUsersToRestrictedInviteList(global, users.map(({ id }) => id), createdChatId!, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    processBoostParameters,\n    checkGiftCode,\n  } = actions;\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const hasStartAttach = params.hasOwnProperty('startattach');\n  const hasStartApp = params.hasOwnProperty('startapp');\n  const choose = parseChooseParameter(params.choose);\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n  const hasBoost = params.hasOwnProperty('boost');\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'boost') {\n    const username = part2;\n    const id = params.c;\n\n    const isPrivate = !username && Boolean(id);\n\n    processBoostParameters({\n      usernameOrId: username || id,\n      isPrivate,\n      tabId,\n    });\n  } else if (hasBoost) {\n    const isPrivate = part1 === 'c' && Boolean(chatOrChannelPostId);\n    processBoostParameters({\n      usernameOrId: chatOrChannelPostId || part1,\n      isPrivate,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = toChannelId(chatOrChannelPostId);\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    if (messageId) {\n      focusMessage({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n    }\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if ((hasStartAttach && choose) || (!part2 && hasStartApp)) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      startParam: params.startattach || params.startapp,\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    const chatId = toChannelId(usernameOrId);\n    chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: 'User does not exist', tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId,\n      );\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, tabId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, { avatarHash: undefined });\n  global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, { avatarHash: undefined });\n    global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n\n  const { photos = [] } = chat;\n\n  const newPhotos = photos.filter((p) => photosToDelete.some((toDelete) => toDelete.id !== p.id));\n  global = getGlobal();\n  global = updateChat(global, chatId, { photos: newPhotos });\n\n  setGlobal(global);\n\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const restrictedUserIds = await callApi('addChatMembers', chat, users);\n  if (restrictedUserIds) {\n    global = getGlobal();\n    global = addUsersToRestrictedInviteList(global, restrictedUserIds, chat.id, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.translate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.translate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.translate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.translate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.translate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  });\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('fetchChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  const { similarChannels, count } = await callApi('fetchChannelRecommendations', {\n    chat,\n  }) || {};\n\n  if (!similarChannels) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(similarChannels, 'id'));\n  global = addSimilarChannels(global, chatId, similarChannels.map((channel) => channel.id), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    withPinned: shouldReplace,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  if (shouldReplace) {\n    if (listType === 'active') {\n      // Always include service notifications chat\n      if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const result2 = await callApi('fetchChat', {\n          type: 'user',\n          user: SERVICE_NOTIFICATIONS_USER_MOCK,\n        });\n\n        global = getGlobal();\n\n        const notificationsChat = result2 && selectChat(global, result2.chatId);\n        if (notificationsChat) {\n          chatIds.unshift(notificationsChat.id);\n          result.chats.unshift(notificationsChat);\n          if (lastLocalServiceMessageId) {\n            result.lastMessageByChatId[notificationsChat.id] = lastLocalServiceMessageId;\n          }\n        }\n      }\n\n      const tabStates = Object.values(global.byTabId);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      // Archived and Saved\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    }\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = addMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: ThreadId,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id, tabId });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, CallSound, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat, tabId);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","length","shift","includes","result2","user","notificationsChat","selectChat","unshift","chats","lastMessageByChatId","tabStates","visibleChats","flatMap","currentChat","selectCurrentChat","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","addMessages","messages","updateChatsLastMessageId","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","chat","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","selectUser","isUserBot","bot","showNotification","message","langProvider","openAttachMenuFromLink","attach","startAttach","callAttachBot","startParam","ensureIsSuperGroup","isChatBasicGroup","newChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","payload","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","hasUnreadMark","toggleChatUnread","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","closeStoryViewer","otherParams","openThread","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","messageId","addChats","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","focusMessage","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","TMP_CHAT_ID","onReplace","getOrderDate","selectChatLastMessage","date","creationDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","withPhotos","loadChat","loadProfilePhotos","profileId","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","tabChatId","muteUntil","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","restrictedUserIds","chatCreation","progress","ChatCreationProgress","InProgress","channel","Error","channelId","Complete","addUsersToRestrictedInviteList","userId","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChatId","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","isDeepLink","processDeepLink","match","RE_TG_LINK","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","processBoostParameters","checkGiftCode","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasStartAttach","hasOwnProperty","hasStartApp","choose","parseChooseParameter","storyId","hasBoost","substr","startattach","shortName","text","formatShareText","slug","chatOrChannelPostId","commentId","comment","inviteHash","voicechat","livestream","c","usernameOrId","isPrivate","toChannelId","substring","startapp","start","startApp","originalParts","isChatChannel","openBoostModal","webAppName","isWebApp","usernames","channelPostId","isCurrentChat","startBot","botId","param","usernameChat","chatByUsername","theme","extractCurrentThemeParams","requestAppWebView","appName","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","photosToDelete","nextPhoto","photos","newPhotos","p","toDelete","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","settings","isChatSuperGroup","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","updateListedTopicIds","entries","readInboxMessageIdByTopicId","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","chatlistModal","invite","peerIds","peers","peerId","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","similarChannels","addSimilarChannels","toggleSimilarChannels","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}