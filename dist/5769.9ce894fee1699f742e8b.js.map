{"version":3,"file":"5769.9ce894fee1699f742e8b.js","mappings":"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vB,SAASwR,MAAM6nE,sBACtC/lG,GAAc,CAAE+0F,gBAAgBiR,EAAAA,EAAAA,KAAqB/oG,EAAQgB,EAA6B,cAApBgZ,OAC5C,iBAAnBquE,IAA+B,CAAEA,sBACxC4d,IAAa,CACfE,kBACAC,oBACAp7F,uBACAq7F,iBAEH,GA/LevzC,EA/nCuBk2C,EACzChoG,UACAioG,+BACA/jB,gCACA2c,gCACA3xB,QACA6K,YACAipB,aACAD,iBACAmF,aACA/Q,YACAgR,kBACAC,cACAlF,iBACAv8E,YACA0hF,gBACAC,yBACArF,wBACAmE,iBACAC,kBACAkB,eACAttE,QACA0oE,kBACA9wD,SACAgxD,gBACAC,eACArnE,YACAunE,cACAI,kBACAvuF,eACAyuF,qBACAG,4BACAC,mBACAI,aACAH,iBACAI,cACAjO,iBACAzP,iBACAz+C,oBACA++D,oBACA3mB,cACA2lB,kBACA1B,YACAE,iBACAE,eACAD,mBACAp7F,uBACA05F,gBACA9tB,kBACAutB,iBACAE,uBACA58C,aACAhc,WACAs2C,YACAukB,aACAG,iBACAC,uBACAe,sBACAe,iBACA1mB,kBACA5N,cACA2zB,mBACA3hG,YACA4gG,mBACA99D,sBACAiC,mBACAt/B,2BACAqO,mBACA+tF,gBACA36F,YACAy7E,iBACA6D,oBACAsb,oBACAE,sBACAD,yBACAhQ,qBACA8O,qBACAyC,wBACAzE,qBACAkC,gBACAD,gBACAG,oBACAI,0BACAe,4BACAjB,gCACAC,oCACAoB,sBACAjE,gBACA1R,eACA3Q,yBACA0mB,sBACAW,kCAEA,MAAM,uBACJjyD,GAAsB,qBACtBm1C,GAAoB,uBACpBj1C,GAAsB,sBACtBgyD,GAAqB,iBACrBzzD,KACEpzB,EAAAA,EAAAA,MAGEs1C,IAAM5D,EAAAA,GAAAA,IAAuB,MAE7Bo1C,IAAkBp1C,EAAAA,GAAAA,IAAuB,MAEzC2tB,IAAmB3tB,EAAAA,GAAAA,IAAuB,MAE1Cq1C,IAAmBr1C,EAAAA,GAAAA,IAAO,GAE1BjhB,IAAOge,EAAAA,GAAAA,MAENu4C,GAAuBC,KAA0Bz4C,EAAAA,GAAAA,KAAS,IAC1D04C,GAAwBC,GAAoBC,KAAqB3sC,EAAAA,GAAAA,MAClE,SAAEO,GAAQ,cAAEqsC,KAAkBpsC,EAAAA,EAAAA,OAEpCqsC,EAAAA,GAAAA,IAAeR,GAAiBV,GAEhC,MAAM,kBACJh3B,GAAiB,oBACjBm4B,GAAmB,kBACnBC,GAAiB,wBACjBn4B,GACAC,kBAAmBkB,GAAa,uBAChCjB,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GACFna,GACA+xC,IAAiBpoB,IAChBjwC,EAAAA,GACD3Z,EAAAA,GACAkqD,KAGF1xB,EAAAA,GAAAA,KAAU,KACJuhB,IACFv6B,IACF,GACC,CAACu6B,GAAmBv6B,KAEvB,MAAM4yD,GAAwBnB,GAAmB,GAC1CrmD,GAASynD,KAAajtC,EAAAA,GAAAA,GAAQgtC,KACrC55C,EAAAA,GAAAA,KAAU,KACJ45C,IAIJphG,WAAWqhG,GA3JU,GA2JCpB,EAAmC,GACxD,CAACA,EAAiBoB,GAAWD,KAEhC,MAAM,qBAAE51C,KAAyBG,EAAAA,GAAAA,GAC/B/R,IAAWsmD,OACXzmG,EACA2nG,KAA0BlB,GAC1B,IAIAlnG,GAAIqD,GAAS,OAAEhE,GAAM,YAAE0yC,GAAW,SAAE5X,GAAQ,qBAAE7d,IAC5Cxd,GAEJ0vD,EAAAA,GAAAA,KAAU,KACR,IAAKtjD,GAAU,OACf,MAAMlL,EAAKguE,EAAQA,EAAMoH,YAAYp1E,GAAKqD,GAE1C,MAAO,KACLkkG,GAA2B,CAAEe,0BAA2B,CAACtoG,GAAKuoG,WAAW,GAAO,CACjF,GACA,CAACv6B,EAAO9iE,GAAU7H,GAAWkkG,KAEhC,MAAMl/F,IAAUvD,EAAAA,EAAAA,IAAehG,GACzBY,IAAQusF,EAAAA,EAAAA,IAAantF,GACrB8C,GAAkC,cAApBkW,IAAmChZ,EAAQ8C,YACzD4mG,IAAkBC,EAAAA,EAAAA,IAAiB3pG,KAAaokG,EAEhD5tF,IAAmBxS,EAAAA,EAAAA,GAAoBhE,GACvCkJ,IAAiBC,EAAAA,EAAAA,GAAkBnJ,GAEnC4pG,GAAgBt0F,QAAQpM,IACxB2gG,GAAYv0F,QAAQ2hF,KAA0C,WAApBj+E,GAC1CsxE,IAAgBwf,EAAAA,EAAAA,IAAsB9pG,GACtC+pG,GAAmBzf,KAAkBmb,IAAiBC,IACtDsE,GAAelE,IAAiB3lG,aAAc8pG,EAAAA,EAAAA,IAAkBnE,GAAgB3lG,WAChF25E,GACJ7mC,MACK2iC,IAAkB9yE,MACnBqgG,KACAE,KACApwD,GAAYi3D,sBACZ5f,IACDh1E,QAAQtV,EAAQiD,QAAQ0G,YAAc3J,EAAQiD,QAAQ0G,UAAUwgG,WAC/DC,GAAiBpqG,EAAQiD,QAAQ0G,WAAWwgG,UAC5C30B,GAAUlgE,QAAQ45D,IAAUA,EAAO5iE,SAAS5L,OAAS,IACrDwuE,GAAO5iE,SAAS2kB,MAAMo5E,GAA4C,IAApCjlG,OAAO+F,KAAKk/F,EAAIpnG,SAASvC,SACvD4pG,GAA4B1hE,IAAsB0/D,EAClDiC,GAA2B3hE,IAAsBq6D,EACjDhiB,QAA6Ct/E,IAAxBynG,GACrBoB,KACFvpB,IAAsBH,IAAkB4iB,IACtC6G,IACAH,IAEAK,GAAahkD,KAAc3jD,IAAe9C,EAAQinD,sBAAwB0/C,EAC1E+D,GAAWp1F,QAAQyxF,IACnB9zD,KACEA,GAAY03D,eAAkB/0B,KAAmBh1E,IAAUuiG,IAAiBE,KAC7EpwD,GAAY23D,eAGb3mB,GAAerjF,KAAU0pF,GAEzBugB,GAAe7E,IAAgB0D,IAAmBE,GAElD/oB,IAAgB5rB,EAAAA,GAAAA,IAAgB,CAAC7b,EAAkDnhC,KACvFu+B,GAAuB,CACrBjyC,aACA0T,eACImhC,GAAG0c,UAAY,CAAEvf,WAAW,MAC5Bi/B,IAAW,CAAEl/B,gBAAiB44B,EAAO5iE,SAASjB,KAAI,EAAGnK,QAASA,MAClE,IAGE4pG,GAAgBjH,EAAgBhxD,OAASlxC,EACzCopG,GAAyBz1F,SAASuzF,KAA0BrrF,IAAwB6pF,IAIpF2D,GAF2B/3D,KAC3B2iC,IAAkButB,IAAiBE,KAAwByH,IACnBhH,EAAegH,GACvDG,GAAmBnH,GAAgBjxD,EACnCq4D,GAAcj4D,IAAejzC,EAAQiD,QAAQ0G,UAAam6F,EAAegH,GACzEK,IAAUC,EAAAA,EAAAA,IAAeprG,GACzBqrG,IAASC,EAAAA,EAAAA,IAActrG,IAEvB,gBACJ4iF,GAAe,YACfrR,GAAW,kBACXJ,GAAiB,kBACjBiS,GAAiB,yBACjBC,GAAwB,gBACxBxB,GAAe,wBACfyB,GAAuB,iBACvBvf,GAAgB,SAChB0d,GAAQ,uBACRH,GAAsB,8BACtBsC,IACEhD,GACFC,GACA1pB,GACA5yD,GACA+Q,QAAQwrE,IACRxrE,QAAQyrE,IACRzrE,QAAQ0rE,GACR3O,GACAnB,GACA3wE,GACA0gF,GACAC,GACAqpB,GACAnpB,KAGI,kBACJmqB,GAAiB,kBACjBC,GAAiB,kBACjBC,GAAiB,iBACjBC,GAAgB,iBAChBC,GAAgB,gBAChBC,GAAe,sBACfC,GAAqB,gBACrBC,GAAe,uBACfC,GAAsB,iBACtBC,GAAgB,gBAChBC,GAAe,mBACfhlB,GAAkB,eAClBilB,GAAc,mBACdC,GAAkB,cAClBC,GAAa,YACbC,GAAW,qBACXC,GAAoB,6BACpBC,GAA4B,qBAC5BC,GAAoB,iBACpBC,ICxjBW,SACbn6D,EACAuuC,EACA7gF,EACAO,EACA2E,EACA0jC,EACAkxC,EACAh3E,EACAosE,EACA87B,EACAE,EACAzuE,EACAwpE,EACAyG,EACA5rF,EACA6jF,EACAxB,GAEA,MAAM,SACJ9oF,EAAQ,iBAAExB,EAAgB,aAAE/O,EAAY,gBAAE6iG,EAAe,gBAAEC,EAAe,iBAC1EpuF,EAAgB,qBAAEuoE,EAAoB,aAAE8lB,EAAY,gBAAE72D,EAAe,sBACrE82D,EAAqB,WAAEnsF,EAAU,gBAAE+gC,IACjC7/B,EAAAA,EAAAA,OAGF3gB,GAAIqD,EAAS,YAAE0uC,EAAW,UAAEh7B,GAC1BjY,GAEE,aACJmE,EAAY,cAAE0iD,EAAa,aAAED,EAAY,QAAEG,EAAO,UAAED,IAClD9iD,EAAAA,EAAAA,GAAoBhE,IAAY,CAAC,EAE/BurG,GAAoBt2C,EAAAA,GAAAA,IAAgB,KACnC+1C,GAIL3wF,EAAS,CAAEnZ,GAAI8pG,EAAW9pG,IAAK,IAG3BsqG,GAAoBv2C,EAAAA,GAAAA,IAAgB,KACnCi2C,EAMDpxB,GAAe7mC,GAAa85D,cAC9BjjG,EAAa,CAAEvJ,OAAQ2qG,EAAWhqG,GAAIqD,UAAW0uC,EAAY85D,gBAE7D1yF,EAAS,CAAEnZ,GAAIgqG,EAAWhqG,KAR1B2X,EAAiB,CAAE7Y,QAASsyC,EAAK,eASnC,IAGIm5D,GAAoBx2C,EAAAA,GAAAA,IAAgB,KACnCx4B,GAILpiB,EAAS,CAAEnZ,GAAIu7B,EAAUv7B,IAAK,IAG1BwqG,GAAmBz2C,EAAAA,GAAAA,IAAgB,KAClC9wD,IAAgBwgG,EAOrB76F,EAAa,CACXvJ,OAAQsmD,GAAiBtmD,EACzB2E,SAAUi+F,EAAgBv8C,EAAe1hD,EACzCX,UAAWJ,EACXgxC,eAAgB0R,OAAgBllD,EAAY4C,EAC5C4rC,mBAAoB0W,KAChBE,GAAW,CAAE3R,MAAO0R,GAAW77C,QAZnC4N,EAAiB,CACf7Y,QAAmBsyC,EAAVyU,EAAe,eAAuB,iBAYjD,IAGE4kD,GAAmB12C,EAAAA,GAAAA,IAAgB,KACvC03C,EAAgB,CACdpsG,SACA2E,WACAw5C,QAASn6C,EACT2vC,OAAQpxC,EAAckqG,EAAAA,GAAkBC,gBAAkBD,EAAAA,GAAkBE,QAC5E,IAGEtB,GAAkB32C,EAAAA,GAAAA,IAAgB,KACtC23C,EAAgB,CAAErsG,SAAQgE,aAAY,IAGlCsnG,GAAwB52C,EAAAA,GAAAA,IAAiBk4C,IAC7CR,EAAgB,CACdpsG,SACA2E,WACAw5C,QAASyuD,EACTj5D,OAAQpxC,EAAckqG,EAAAA,GAAkBI,eAAiBJ,EAAAA,GAAkBtmB,OAC3E,IAGEulB,GAAkBh3C,EAAAA,GAAAA,IAAgB,KACtCz2C,EAAiB,CAAEnS,WAAY,CAAC9H,IAAa,IAGzC0iF,GAAqBhyB,EAAAA,GAAAA,IAAgB,KACzC8xB,EAAqB,CAAExmF,SAAQgE,aAAY,IAGvC2nG,GAAiBj3C,EAAAA,GAAAA,IAAiBjmD,IACtC69F,EAAa,CAAEtsG,SAAQgE,YAAWyK,WAAU,IAGxCm9F,GAAqBl3C,EAAAA,GAAAA,IAAgB,KACzCjf,EAAgB,CAAE55B,WAAY7b,EAAQ0X,aAAY,IAG9Cm0F,GAAgBn3C,EAAAA,GAAAA,IAAgB,KACpC,GAAIia,GAASA,EAAM5iE,SAAU,CAC3B,MAAMD,EAAa6iE,EAAM5iE,SAASjB,KAAI,EAAGnK,QAASA,IAClD80C,EAAgB,CAAE55B,WAAY7b,EAAQ8L,cACxC,MACE2pC,EAAgB,CAAE55B,WAAY7b,EAAQ8L,WAAY,CAAC9H,IACrD,IAGI8nG,GAAcp3C,EAAAA,GAAAA,IAAgB,KAClCnrD,EAAa,CACXvJ,SAAQ2E,SAAUD,EAAAA,GAAgBV,aAClC,IAGE+nG,IAAuBr3C,EAAAA,GAAAA,IAAgB,KAEzCnrD,EADE8+B,EACW,CACXroC,OAAQ0yC,EAAa72B,WAAanE,YAAWi9B,cAAe30C,EAAQgE,UAAW0uC,EAAa23D,eAK5F/jD,GAAiBD,EACN,CACXrmD,OAAQsmD,EACR3hD,SAAU0hD,EACVriD,UAAW0uC,EAAa23D,eAGb,CACXrqG,OAAQ0yC,EAAa72B,WAAa7X,UAAW0uC,EAAa23D,eAE9D,IAGIyC,IAAsBp4C,EAAAA,GAAAA,IAAiB7b,IAC3CA,EAAE4gB,kBAEF6mB,EAAcznC,EAAGnhC,EAAU,IAkC7B,MAAO,CACLszF,oBACAC,oBACAC,oBACAC,mBACAC,mBACAC,kBACAC,wBACAC,gBAAiBuB,GACjBtB,wBAxC6B92C,EAAAA,GAAAA,IAAiB7b,IAC9CA,EAAE4gB,kBAEF8yC,EAAsB,CAAEvsG,SAAQgE,UAAYmoG,OAAgC/qG,EAAZ4C,GAAwB,IAsCxFynG,kBAnCuB/2C,EAAAA,GAAAA,IAAgB,KACvCt0C,EAAW,CACTpgB,OAAQP,EAAQO,OAChB2E,SAAUlF,EAAQkB,IAClB,IAgCF+qG,kBACAhlB,qBACAilB,iBACAC,qBACAC,gBACAC,cACAC,wBACAC,6BAA8Bc,GAC9Bb,sBArC2Bv3C,EAAAA,GAAAA,IAAgB,KACtCgxC,GACLn8F,EAAa,CACXvJ,OAAQsmD,GAAiBtmD,EACzB2E,SAAU+gG,EAAa/kG,GACvBqD,aACA,IAgCFkoG,kBA7BuBx3C,EAAAA,GAAAA,IAAgB,KAClCn0C,GACL4gC,EAAgB,CACd7gD,OAAQigB,EAAMjgB,OACd6I,QAASoX,EAAM5f,GACfigD,eAAe,GACf,IAyBN,CDmWMmsD,CACFh7D,GACAuuC,GACA7gF,EACAO,GACA2E,GACA0jC,EACAkxC,GACAh3E,GACAosE,EACA87B,GACAE,GACAzuE,EACAwpE,GACA3wF,QAAQgxF,IACRxB,GAAc,YAAaA,EAAaA,OAAanjG,EACrDgjG,EACAxB,KAGFzzC,EAAAA,GAAAA,KAAU,KACH64C,GAIDwC,IAA0B1D,GAC5BpyD,IACF,GACC,CAACA,GAAkBszD,EAAclB,EAAiB0D,KAErD,MAAMwC,IAAqB/8C,EAAAA,GAAAA,GACzB,4BACA0yC,GAAkB,iBAClBliB,IAAgBmqB,GAAU,eAAiB,kBAC3C9C,GAAiB,gBACjBC,GAA0B,0BAC1BrF,GAAyB,yBACzBsF,GAAgB,eAChB3nG,IAAS,MACT0U,QAAQtV,EAAQwiB,aAAe,YAC/BxiB,EAAQ83F,UAAY,aACpB4R,IAAmB,YACnBz4B,IAAqB,gBACrBg0B,IAAcG,GAAoB,UAClC1B,IAAgB,gBAChB1jG,EAAQ8D,YAAc,cACtB8kC,GAAqB,uBACrB4sC,IAAW,WACXx1E,EAAQwoD,kBAAoB,qBAC5B0qB,IAAc,cACd4N,IAAkB,uBAClBkjB,IAAgBhB,GAAc,gBAC9B1tF,QAAQtV,EAAQ22E,gBAAkB,qBAClC8K,IAAY,YACZ/tB,GACA00C,GAAe,iBACd3B,IAAsBsC,KAA2B,sBAClDqB,IAAkB,qBAGd,KACJn/F,GAAI,MAAE/H,GAAK,MAAEC,GAAK,MAAEyiD,GAAK,MACzBtjC,GAAK,SAAEjf,GAAQ,QAAED,GAAO,QAAEg6B,GAAO,KACjC9uB,GAAI,QAAEk1F,GAAO,QAAE1zF,GAAO,SAAE6nB,GAAQ,OAChCluB,GAAM,KAAEmiF,GAAI,UAAEjiF,GAAS,SAAE0iF,GAAQ,gBACjCU,KACEzpF,EAAAA,EAAAA,IAAkBtD,IAEhB,aAAEmE,GAAY,cAAE0iD,GAAa,QAAEE,IAAYvwC,IAAoB,CAAC,GAC9DD,OAAQ2tF,GAAkBx6F,QAASy6F,IAAiBj7F,IAAkB,CAAC,EAEzEq3E,GEzoBO,SAAyBt1E,EAAeysD,EAAsB81C,GAC3E,MAAOlmF,EAAUmmF,IAAep9C,EAAAA,GAAAA,MAYhC,OAVAX,EAAAA,GAAAA,KAAU,KACJgI,GAAe81C,IAAeA,MAE9BviG,EpCiBD8F,eAA8B9F,EAAcyiG,EAnBzB,IAsBxB,OAFKhvB,UAAcC,GAAuBgvB,cACrBjvB,GAAQ7lD,QAAQ,CAAEiH,KAAM,iBAAkB8tE,KAAM,CAAC3iG,EAAMyiG,IAE9E,CoCpBMG,CAAe5iG,GAAMuxC,KAAKixD,GAE1BA,OAAY9rG,GACd,GACC,CAAC+1D,EAAYzsD,EAAMuiG,IAEflmF,CACT,CF2nB2BwmF,CACvB7iG,IAAMA,OACJs7F,IAA0Be,IAC5BlmB,KhCznBW,SACbphF,EAAqBugF,EAA2B7oB,EAAsB81C,IAEtE99C,EAAAA,GAAAA,KAAU,KACR,GAAIgI,GAAe81C,IAAeA,IAAe,OAEjD,MAAMltB,EAAiBhrE,QAAQtV,EAAQiD,QAAQgI,MAAMA,KAAKvK,SAO9D,SAAgCH,EAAgBW,EAAYo/E,EAAyBC,GACnF,MAAMP,EAAYH,GAAWrgF,IAAIe,IAAW,IAAI6+E,GAxB3B,KA0Bf2uB,EAAmB/tB,EAAUxgF,IAAI0B,GACnC6sG,GAAoBA,EAAiBxtB,mBAAqBA,GACzDwtB,EAAiBztB,iBAAmBA,IAKzCN,EAAUprE,IAAI1T,EAAI,CAChBA,KACAo/E,iBACAC,qBAGFV,GAAWjrE,IAAIrU,EAAQy/E,GAEvBF,GAA0Bv/E,GAC5B,CAzBIytG,CAAuBhuG,EAAQO,OAAQP,EAAQkB,GAAIo/E,EAAgBC,EAAiB,GACnF,CAACvgF,EAASugF,EAAkB7oB,EAAY81C,GAC7C,CgCknBES,CAAsBjuG,EAASugF,IAAmB+mB,GAA0BlmB,IAE5E,MAAM8sB,IAAkBC,EAAAA,EAAAA,IAAsBnuG,GAAUsmG,KAChDr2F,UAAWm+F,GAAoB,eAAEC,KAAmBC,EAAAA,GAAAA,GAC1DnI,GAAkB5lG,GAAQ2tG,GAAkB3pG,QAAY5C,EAAW0kG,IAG/DkI,IAAyBja,EAAAA,GAAAA,GAAY+Z,GAAgB/4F,QAAQ44F,KAE7DM,GAAwBH,IAAkBE,IAE1C,UAAEnhD,IAAc3jD,IAAU,CAAC,EAE3BglG,IAA4BxX,IAAsBuQ,IAAiB/gD,IAAal9C,MAChFghG,IACmB,WAApBvxF,KACCkvF,EACAwG,GAAoBzX,IAAmB1lE,iBACvCg5E,IAAgD,WAApBvxF,KAC5BkvF,EACAyG,IAA2BzF,KAAkB97C,KAAc0zB,IAAkB72C,KAC7EsgE,KAA6BH,KAAmBiB,GAEhDuD,GGtqBD,SACL5uG,GACA,aACE6qG,EAAY,cACZvgB,EAAa,cACb+d,EAAa,YACbvuB,EAAW,UACX+vB,EAAS,gBACTlG,EAAe,YACfttB,EAAW,gBACXw4B,EAAe,aACf7E,EAAY,gBACZ8E,EAAe,uBACf/D,EAAsB,eACtBgE,GAcE,CAAC,GAEL,MAAM,KACJ9jG,EAAI,MAAE/H,EAAK,MAAEC,EAAK,MAAEyiD,EAAK,MAAEtjC,EAAK,SAAEjf,EAAQ,KAAEiL,EAAI,QAAEk1F,EAAO,QAAEpmE,EAAO,SAAEzF,EAAQ,QAAE7nB,EAAO,UAAEnG,EAAS,SAChG0iF,EAAQ,gBAAEU,IACRzpF,EAAAA,EAAAA,IAAkBtD,GAEhBgvG,EAAa,CAACC,EAAAA,KACdC,EAAUvlG,GAAazG,GAASC,GAASw0B,GAAY7nB,GAASC,cAC9Do7F,EAAUlgG,GAA2B,UAAnB0sB,GAAUzhB,MAAoB44F,EAChDK,EAAoBD,IAAY/D,EAChCiE,EAAW95F,QAAQtV,EAAQq7B,UAwGjC,OAtGI0zE,GACFC,EAAWxmG,KAAKumG,IAGbG,GAAWlvG,EAAQknD,gBACtB8nD,EAAWxmG,KAAK,cACZxI,EAAQknD,gBAAkBmoD,EAAAA,KAC5BL,EAAWxmG,KAAM,cAAaxI,EAAQknD,mBAE/BikD,EACT6D,EAAWxmG,KAAK,QAEhBwmG,EAAWxmG,KAAK,WAGdqmG,GACFG,EAAWxmG,KAAK,qBAGd8hF,IACF0kB,EAAWxmG,KAAK,gBACZrF,GAAOmsG,SACTN,EAAWxmG,KAAK,SAGd6tE,GACF24B,EAAWxmG,KAAK,iBAGhB0mG,EACFF,EAAWxmG,KAAK,SACPo9C,EACTopD,EAAWxmG,KAAK,SACP8Z,GACT0sF,EAAWxmG,KAAK,SACZuiG,GACFiE,EAAWxmG,KAAK,6BAETnF,EACT2rG,EAAWxmG,KAAK,YACP40B,EACT4xE,EAAWxmG,KAAK,WACP8F,EACT0gG,EAAWxmG,KAAK,QACP6jF,GAAYU,EACrBiiB,EAAWxmG,KAAK,YACPg7F,IACTwL,EAAWxmG,KAAK,aAEZg7F,EAAQtgG,OAASsgG,EAAQrgG,QAC3B6rG,EAAWxmG,KAAK,UAIhBsH,IAAYA,EAAQC,eACtBi/F,EAAWxmG,KAAK,WAGdmB,GACFqlG,EAAWxmG,KAAK,SAGdsxE,GACFk1B,EAAWxmG,KAAK,gBAGdqiG,GACFmE,EAAWxmG,KAAK,iBAGdqhG,GACFmF,EAAWxmG,KAAK,eAGdwhG,GACFgF,EAAWxmG,KAAK,iBAGd4mG,GACFJ,EAAWxmG,KAAK,cAGdm7F,GACFqL,EAAWxmG,KAAK,qBAGb8hF,IACH0kB,EAAWxmG,KAAK,cAEZ0mG,GAAW74B,GACb24B,EAAWxmG,KAAK,mBAGdqiG,GAAgB/wB,GAAes1B,IAAaD,GAAqBxL,IACnEqL,EAAWxmG,KAAK,wBAGd6/F,IAAkBnlG,IAAUisG,GAAsBx3E,GAAYmiD,IAChEk1B,EAAWxmG,KAAK,iBAIbwmG,EAAWj2F,KAAK,IACzB,CHshB2Bw2F,CAAsBvvG,EAAS,CACtD6qG,gBACAvgB,iBACA+d,gBACAvuB,eACA+vB,UAAWA,KAAc3B,EACzBvE,kBACAttB,YAAa4gB,IAAqBA,GAAkB9wF,cAAgB,EACpE0oG,gBAAiBpE,IAAcC,GAC/BV,gBACA8E,gBAAoC,YAAnBn3E,IAAUzhB,QAAuB49E,EAAAA,EAAAA,IAAiB9zF,GACnE+qG,0BACAgE,gBAAgBjqB,EAAAA,GAAAA,GAAkBmmB,GAAkBhnB,MAGhDurB,GAAeZ,GAAiBzsG,SAAS,gBACzCstG,IAAYhmB,EAAAA,GAAAA,IAAmBzpF,EAAQknD,gBAE7C,IAAIwoD,GAWAC,GATFD,GADEtiD,IAEOm9C,GADM,QAGNY,IAAY3H,IAAYiM,GAGlB,aAFA,UAMbzF,GACE1f,KAAmBpnF,IAASC,IAASwG,IAAiC,QAAnBguB,IAAUzhB,QAAqBi1F,GACpFwE,GAAoB,UACX71B,IACT41B,GAAe,aACfC,GAAoB,UAEpBA,GAAoB,SAGtBA,GAAoB,OAGtB,MAAMC,GAA+CtlB,GAAgB,UAAY,cAEjFulB,EAAAA,GAAAA,GACEhpD,IAAiBtmD,GACjB4D,GACA0R,EACA7V,EAAQkB,GACRkjG,GAAmBr9C,IAAW49C,IAGhCjC,EAAAA,GAAAA,GACEwB,IAAoB3jG,GACpB4jG,GACAW,IAGFgL,EAAAA,GAAAA,GACE34C,GAAK52D,GAAQ0kG,EAAWE,EAAgBC,EAAkBp7F,GAAqBo+F,EAAa9yF,QAAQ+vF,IAGtG,MAAMtO,GAAatwC,IAAazmD,EAAQ+vG,kBACjCj2B,IAAelE,KAAmB3iC,IAAa88D,sBACjDpuG,EAECquG,GAAsBzH,EAEtB0H,IAAeh7C,EAAAA,GAAAA,IAAiBi7C,IACpC,MAAMC,EAAavH,GAAiB5hF,QAE9BopF,EAAYF,EAAMG,YAAYtqD,OAGpC,GAFA6iD,GAAiB5hF,QAAUopF,GAEvBE,EAAAA,GAAAA,QAAwBH,GAAcC,GAAaD,EAAY,OAEnE,MAAMrnB,EAAYonB,EAAMnrD,OAAOusC,QAAwB,gBACvD,IAAKxI,EAAW,QAEhBynB,EAAAA,GAAAA,IA/c8B,KAid9B,MAAMC,EAAaJ,EAAYD,GACzB,aAAEM,EAAY,aAAEC,EAAY,UAAEC,GAAc7nB,EACtBnpF,KAAK4S,MAAMm+F,EAAeC,EAAYF,GACfD,GAtdjB,GAydhCv7D,IACF,IAGI27D,IAAkB9uB,EAAAA,GAAAA,GAAqBmuB,GAAc,CAACA,IA5d1C,KA4dsE,IAExFY,EAAAA,GAAAA,GAAkB15C,GAAKy5C,IAAkBZ,KAEzCtgD,EAAAA,GAAAA,KAAU,KACR,MAAMohD,EAAenI,GAAgB3hF,QACjC++E,IAAqB+K,IAAgBC,EAAAA,GAAAA,GAAoBD,IAC3DpI,GAAsB,CAAEr8F,WAAY,CAAC9H,KACvC,GACC,CAACwhG,GAAmBxhG,GAAWmkG,KAElC,MAAM7hB,IAAch2B,EAAAA,GAAAA,KAAQ,IACnB2kB,GACHqE,GAAqBj5E,GAAO0U,QAAQwkE,IAAcxkE,QAAQykE,GAAY7K,EAAQrS,SAC9El7D,GACH,CAAC6zE,GAAS50E,GAAOk5E,GAAaC,EAAW7K,EAAOrS,KAE7Cm0C,GAAel3B,GAAc,GAAK,EAElCm3B,IAAmBpgD,EAAAA,GAAAA,KAAQ,KAC/B,IAAIqgD,EACAC,EAGAC,EAFAC,GAAiB,EACjBh5B,EAAQ,GAGZ,IAAK7C,KAAYtyE,IAASC,IAAS2M,IAASC,eAAgB,CAC1D,IAAItQ,EACJ,GAAIyD,GACFzD,GAAQw6E,EAAAA,GAAAA,IAAyBj6E,EAAS85E,GAAaC,EAAWld,IAAUp9D,WACvE,GAAI0D,GAEP1D,EADE0D,GAAMmsG,QACArR,EAAAA,IAEAhkB,EAAAA,GAAAA,IAAyBj6E,EAAS85E,GAAaC,EAAWld,IAAUp9D,WAEzE,GAAIqQ,IAASC,eAClBD,GAAQC,cAActQ,OAASqQ,GAAQC,cAAcg2C,OACpD,CACD,MAAQtmD,MAAO6xG,EAAcvrD,OAAQwrD,GAAkBzhG,GAAQC,cAC/DtQ,GAAQ+xG,EAAAA,EAAAA,IAAmC,CACzC/xG,MAAO6xG,EACPvrD,OAAQwrD,EACRE,eAAgB7wG,GAChBk5E,eACAC,YACAld,cACCp9D,KACL,CAEIA,IACEA,EAAQiyG,GAAAA,KACVP,EAAe1xG,GAEjByxG,EAAkBvxG,KAAKE,KAAI8xG,EAAAA,GAAAA,IAAiB1mG,IAAMA,KAAMwjG,IAA2BhvG,GAC/EqQ,IAASC,eAAiBmhG,EAAkBzxG,EAvhBrB,KAwhBzB4xG,GAAiB,GAGvB,MAAWxqB,KACTqqB,EAAkBvxG,KAAKE,KACrB8xG,EAAAA,GAAAA,IAAiB1mG,IAAMA,KAAMwjG,IAA2B5nB,GAAYpI,eAAeh/E,OAEjFyxG,EAAkBrqB,GAAYpI,eAAeh/E,MA/hBpB,KAgiB3B4xG,GAAiB,IAIrB,GAAIH,EACF74B,EAAS,UAAS64B,EAAkBF,OACpCI,EAAoBF,EAAkBtO,QACjC,GAAIx/F,KAAYynG,GAAc,CACnC,MAAM,MAAEprG,IAAUuiG,EAAAA,EAAAA,IAAqB5+F,GAASy5D,IAChDwb,EAAS,UAAS54E,EAAQuxG,OAC1BI,EAAoB3xG,EAAQmjG,EAC9B,CAEA,MAAO,CACLuO,eAAcE,iBAAgBh5B,QAAO+4B,oBACtC,GACA,CACDvqB,GAAa/M,GAAak3B,GAAcnG,GAAc/6F,IAASC,cAAeylE,GAASi5B,GACvF5xC,GAAUj8D,GAAOZ,EAAS+5E,EAAW72E,GAAOE,GAAS6H,IAAMA,KAAM9H,MAG7D,aACJguG,GAAY,eAAEE,GAAc,MAAEh5B,GAAK,kBAAE+4B,IACnCH,GAeJ,SAAS59D,GAAkBu+D,GACzB,OACE/iD,GAAAA,GAAAC,cAAC+iD,GAAAA,EAAW,CACVC,eAAgB9xG,EAChBquG,eAAgBhI,GAA+BmI,QAAwB7sG,EACvEiwG,eAAgBA,EAChBvM,aAAcA,EACdoK,UAAWA,GACXnK,UAAWA,GACXtkB,YAAaA,EACbkD,8BAA+BA,EAC/B2c,8BAA+BA,EAC/BkR,sBAAuBznB,IAG7B,CAEA,MAAM4M,IAA4BxmC,EAAAA,GAAAA,KAAY,KAC5C,GAAKzmB,GAEL,OACE4kB,GAAAA,GAAAC,cAAA,OACEhoC,WAAW0pC,EAAAA,GAAAA,GAAe,iBAAkB8wB,KAA2BmlB,IAAsB,WAC7Fx1C,QAASqyB,GACTnsB,IAAK+pB,IAELryB,GAAAA,GAAAC,cAACkjD,GAAAA,EAAmB,CAClBhxG,SAAUipC,GACV0b,KAAMg9C,GACN36D,mBAAoBA,GACpB2+C,oBAAqBka,IAEnB,GAEP,CACD4F,GAAoBz+D,GAAoBiC,GAAiBq5C,GAAyBhC,GAClFuf,IAGF,SAASoR,KACP,MAAMC,EACJrjD,GAAAA,GAAAC,cAAC+nC,GAAW,CACV72F,QAASA,EACToM,SAAUA,GACVirF,aAAczhB,KAAmBh1E,GACjCu2F,UAAWA,EACXF,kBAAmBA,GACnBH,eAAgBA,EAChBC,UAAWA,GACXC,mBAA0C,WAAtB2Y,GACpBzY,0BACEyX,IAAqD,YAA1BiB,GAAsC1Y,QAA4Bv1F,EAE/FqmC,mBAAoBA,GACpBovD,aAAc9hF,QAAQ+wF,GAA+BmI,QAAwB7sG,GAC7EsvD,QAAS66C,GACTxU,mBAAoByU,GACpBxU,aAAcyU,KAIlB,MAA0B,WAAtB2D,GACKuC,EAIPrjD,GAAAA,GAAAC,cAAC6uC,GAAS,CACR39F,QAAS8lG,GACTjI,aAAcqU,EACdvrB,oBAAqBka,EACrB/C,iBAAkBr3C,IAGxB,CAoSA,SAAS0rD,KAMP,GAJuB7nB,KAAkBjvD,MACtC0nE,MAFW7/F,IAASC,IAASw0B,KAEAquE,KAAkBlsB,IAAez+C,IAAYsoE,IACvE2G,IAA+BZ,IAAmBpf,GAGtD,OAGF,IAAIv3C,GAEAm4D,IAAgB5gB,IAAiBjvD,GAE1B4X,IAAaC,eACtBH,EAAcE,GAAYC,eACjBvpC,IAAam6F,IACtB/wD,GAAcC,EAAAA,EAAAA,IAAeV,GAAMwxD,IAJnC/wD,GAAcC,EAAAA,EAAAA,IAAeV,GAAM44D,IAMrC,MAAMkH,EAAoBlH,IAAc,gBAAiBA,IAAcA,GAAWp0E,YAC5Eu7E,EAAkBnH,IAAc,cAAeA,IAAcA,GAAWvkF,UAE9E,OACEkoC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,gBAAgBoqC,IAAI,OAC/Bne,GAAe+mC,GACfjrB,GAAAA,GAAAC,cAAA,QACEhoC,WAAW0pC,EAAAA,GAAAA,GACT,qBACAvd,IAAaC,eAAiB,gBAAkB,mBAjBtDo/D,GAoBIrhD,QAASu6C,GACTt6C,IAAI,OAEH4oB,IACCjrB,GAAAA,GAAAC,cAACq2B,GAAAA,EAAI,CAACrlD,KAAMmT,IAAaC,eAAiB,UAAY,iBAEvDvpC,IAAaklD,GAAAA,GAAAC,cAACq2B,GAAAA,EAAI,CAACrlD,KAAK,eACxBiT,GAAcw/B,EAAAA,GAAAA,GAAWx/B,GAAgB+mC,GA39BzC,SA29B8Dn4E,GAC7Dm4E,IAAes4B,GACfvjD,GAAAA,GAAAC,cAAC2O,GAAAA,EAAW,CACV9/C,WAAYy0F,EAAkBz0F,WAC9B+/C,UAAWC,EAAAA,IACXumB,8BAA+BA,EAC/B2c,8BAA+BA,KAGjC/mB,KAAgBs4B,GAAqBC,GAAmBxjD,GAAAA,GAAAC,cAAC8O,GAAAA,EAAW,MACrEstC,IAAYqH,UAAY1jD,GAAAA,GAAAC,cAAC0jD,GAAAA,EAAQ,CAACD,SAAUrH,GAAWqH,YAEvD91E,OAED96B,EAz+BC,IA0+BJ86B,GACCoyB,GAAAA,GAAAC,cAAAD,GAAAA,GAAAiC,SAAA,KACEjC,GAAAA,GAAAC,cAAA,QAAMhoC,UAAU,OAAOwrB,GAAK,WAC5Buc,GAAAA,GAAAC,cAAA,QACEhoC,UAAU,cACVmqC,QAASw6C,KAERl5B,EAAAA,GAAAA,GAAY,IAAG91C,EAAUE,UAAW,GAAG3Y,cAI7CivB,IAAai3D,oBACZr7C,GAAAA,GAAAC,cAAA,QAAMhoC,UAAU,cAAcoqC,IAAI,QAAQ5e,GAAK,mBAC7CtyC,EAAQizC,aAAa88D,iBAAmBtlE,IAAWqvC,GACrDjrB,GAAAA,GAAAC,cAAA,QAAMhoC,UAAU,cAAcoqC,IAAI,QAAQlxD,EAAQizC,aAAa88D,iBAC7D/vG,EAAQ+vG,iBAAmBtlE,KAAYqvC,GACzCjrB,GAAAA,GAAAC,cAAA,QAAMhoC,UAAU,cAAcoqC,IAAI,QAAQlxD,EAAQ+vG,kBAChDhM,IAAsBjqB,IAAgBz+C,QAMtC15B,EALFktD,GAAAA,GAAAC,cAAA,QAAMhoC,UAAU,cAAcoqC,IAAI,QAC/B6yC,GAAkB0O,aAAengE,GAChCyxD,GAAkBh6C,QAAU,uBAAyB,yBAMjE,CAEA,MAAM2oD,GAAgBjoE,IAAWqvC,GAAc95E,EAAQ+vG,qBAAkBpuG,EAEzE,OACEktD,GAAAA,GAAAC,cAAA,OACEqI,IAAKA,GACLj2D,IAAIymF,EAAAA,EAAAA,IAAiB3nF,EAAQkB,IAC7B4lB,UAAWymF,GACX,kBAAiBhpG,GACjBouG,OAAQ3xB,EAAckC,GAAAA,OAAYvhF,EAClCywE,YAAawQ,GACb3xB,QAASsgB,GACTc,cAAelB,GACfyhC,cAAexvB,GACfte,aAAcylC,GAA2B3mB,QAAgCjiF,EACzEkxG,YAAalE,GAA0B9sB,QAAkBlgF,EACzDojE,aAAe4pC,IAA2BpE,GAA4BxmC,QAAmBpiE,GAEzFktD,GAAAA,GAAAC,cAAA,OACEqI,IAAKwxC,GACL7hF,UAAU,gBACV,kBAAiBviB,GACjB,uBAAsB2qE,EAAQA,EAAM5iE,SAAS4iE,EAAM5iE,SAAS5L,OAAS,GAAGQ,QAAKS,EAC7E,qBAAoButE,EAAQA,EAAMoH,YAAYp1E,QAAKS,EACnD,0BAAyB3B,EAAQwoD,uBAAoB7mD,EACrD,2BAA0BokG,SAAqBpkG,EAC/C,iBAAgByK,SAAYzK,EAC5B,gCAAiDA,IAAvB3B,EAAQwiB,cAElComB,GACAimB,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,0BACZosD,IAAcrkB,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,sBAG/Bm8E,GACCp0C,GAAAA,GAAAC,cAAA,OACEhoC,WAAW0pC,EAAAA,GAAAA,GAAe,sCAAuCq2C,IAAmB,eACpF51C,QAASs7C,IAER1F,IACCh4C,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,sBAIlBk8E,GAtfL,WACE,MAAM8P,GAAe9H,IAAc/3D,GAAeA,GAAYC,oBAAiBvxC,EAE/E,OACEktD,GAAAA,GAAAC,cAACo8B,GAAAA,EAAM,CACLvlC,KAAMkX,GAAW,eAAiB,QAClC5hD,KAAM+vF,GACN//F,KAAM6nG,EACN7hD,QAAS+5C,GAAaO,QAAoB5pG,GAGhD,CA2emBoxG,GACflkD,GAAAA,GAAAC,cAAA,OACEhoC,WAAW0pC,EAAAA,GAAAA,GAAe,0BAA2Bo+C,GAAiBzsG,SAAS,SAAW,oBAE1F0sD,GAAAA,GAAAC,cAAA,OACEhoC,UAAW8nF,GACXv2B,MAAOA,GACPnnB,IAAI,QAEH4oB,KAAgBwwB,IACfz7C,GAAAA,GAAAC,cAAAD,GAAAA,GAAAiC,SAAA,KACGqhD,KACAO,IAAiB7jD,GAAAA,GAAAC,cAAA,QAAMhoC,UAAU,cAAcoqC,IAAI,QAAQwhD,KA1axE,WACE,MAAM5rF,GAAY0pC,EAAAA,GAAAA,GAChB,gBACAspB,IAAe,oBACf+wB,IAAgB,iBAChBwG,IAAkB,oBAEdzqB,EAAoByhB,IAAkB8C,KAAYrxB,KAAgB40B,GAClEsE,GAAmBxiD,EAAAA,GAAAA,GACvB,eACA,WACiB,YAAjBk/C,IAA8B,YAC9B5Y,GAAkB,sBAGpB,OACEjoC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAWA,EAAW8rF,cAAevvB,GAA0BnyB,IAAI,SACpE4oB,IAAeq4B,KAChBtH,IACCh8C,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,qBACZk/E,IACCn3C,GAAAA,GAAAC,cAACu2B,GAAS,CACR3+E,MAAOu/F,GACPh1C,QAASu7C,GACT1lF,UAAU,kBAGb4iF,IACC76C,GAAAA,GAAAC,cAACmkD,GAAAA,EAAe,CACdjzG,QAAS6V,EACT9R,UAAWyS,GACXytE,aAAcA,GACdjD,YAAaA,EACbnuC,OAAQyxD,EACR4O,WAAYxO,EACZyO,cAAe1O,EACf0B,iBAAkBA,GAClBG,iCAAkCA,GAClCpiB,8BAA+BA,EAC/B2c,8BAA+BA,EAC/B5vC,QAASy6C,KAGZ9B,IACC/6C,GAAAA,GAAAC,cAACk1B,GAAa,CACZljE,MAAOgkF,EACPjyD,OAAQkyD,EACR9gB,aAAcA,GACdjD,YAAaA,EACbkD,8BAA+BA,EAC/BjzB,QAASw7C,MAKhBrpG,IACCyrD,GAAAA,GAAAC,cAAC8xC,GAAO,CACN5gG,QAASA,EACT2mF,oBAAqBzC,EACrB2c,8BAA+BA,EAC/BC,WAAYoG,GACZnG,iBACE39F,GAAQg+F,YACNoH,GAAqBxhF,SAAWziB,IAAaikG,GAAqBxhF,SAC/Dzd,UACF5H,EACLq/F,WAAY0G,GACZzG,aAAc+H,GACd9H,aAAc+H,KAGjBc,IAAoBrE,IACnB72C,GAAAA,GAAAC,cAAC06B,GAAmB,CAClBP,cAAeyc,GACfxc,YAAawe,KAAsBt6F,EAAAA,EAAAA,IAAS7M,IAC5CK,MAAOA,GACP+lF,oBAAqBzC,EACrB6F,iBAAkBxgF,GAClBhF,UAAWA,GACXhE,OAAQA,GACRoK,wBAAyBA,KAG5Bo/F,IAAoBtE,IACnB52C,GAAAA,GAAAC,cAACg7B,GAAa,CACZt/E,MAAOi7F,GACPvc,YAAawe,KAAsBt6F,EAAAA,EAAAA,IAAS7M,IAC5CK,MAAOA,GACP+lF,oBAAqBzC,EACrB6F,iBAAkBxgF,GAClBhF,UAAWA,GACXhE,OAAQA,GACRoK,wBAAyBA,KAG5B6qE,IACC3mB,GAAAA,GAAAC,cAAC43B,GAAK,CACJxX,MAAOA,EACP2X,YAAaA,GACbF,oBAAqBzC,EACrBtjF,MAAOA,GACPogF,YAAaA,EACb4F,kBAAmBA,EACnBE,aAAc+kB,KAGjBz+C,IACCyB,GAAAA,GAAAC,cAACypC,GAAgB,CACfv4F,QAASA,EACTotD,UAAWA,GACX7sD,OAAQA,MAGVi1E,IAAWtyE,IACX2rD,GAAAA,GAAAC,cAACq3B,GAAAA,EAAK,CACJnmF,QAASA,EACT2mF,oBAAqBzC,EACrBnK,UAAWA,EACXuN,YAAaoE,GACbrE,eAAgBA,EAChBK,qBAAsBd,EACtBiB,cAAeA,GACf7G,YAAaA,EACblH,YAAaA,GACb7+C,MAAOA,EACP01D,YAAawgB,GACblgD,QAAS06C,GACT/jB,eAAgBX,MAGlBzR,IAAWryE,IAASA,GAAMmsG,SAC1BzgD,GAAAA,GAAAC,cAACsvC,GAAU,CACTp+F,QAASA,EACT2mF,oBAAqBzC,EACrBoD,YAAaoE,GACb7D,cAAeA,MAGjBrS,IAAWryE,KAAUA,GAAMmsG,SAC3BzgD,GAAAA,GAAAC,cAACu3B,GAAAA,EAAK,CACJrmF,QAASA,EACTkkF,8BAA+BA,EAC/B2c,8BAA+BA,EAC/BlQ,YAAawgB,GACbp3B,UAAWA,EACXuN,YAAaoE,GACblE,YAAawf,GACb3f,eAAgBA,EAChBQ,cAAeA,GACf7G,YAAaA,EACblH,YAAaA,GACb7oB,QAAS06C,GACT/jB,eAAgBX,MAGlBrhC,IAAStjC,KACTusC,GAAAA,GAAAC,cAAC65B,GAAAA,GAAK,CACJ1tD,MAAOA,EACPj7B,QAASA,EACTk0C,OAAQk/D,EAAAA,GAAYlG,OACpB7lB,eAAgBA,EAChBgsB,aAAczqE,EACdsqC,WAAYA,GACZ6G,UAAWA,EACXu5B,OAAQ1H,GACR2H,YAAajxF,MAAW1hB,IAASg1E,IAAmBh1E,KAAUyqG,IAAWY,QAAkBtqG,EAC3FimF,eAAgBX,GAChBY,cAAeA,GACfuf,eAAgBA,EAChByB,sBAAuBA,GACvB2K,cAAel+F,QAAQ+xF,GACvB7pF,qBAAsBA,GACtB24B,aAAc6qC,EACdyyB,oBAAqB3K,GACrB4K,cAAe/sF,IAAc0kF,KAGhChoG,IACCwrD,GAAAA,GAAAC,cAAC6kD,GAAAA,EAAQ,CACP3zG,QAASA,EACT2mF,oBAAqBzC,EACrBoD,YAAaoE,GACbub,sBAAuBA,GACvB5f,eAAgBA,EAChBgsB,aAAczqE,EACdsqC,WAAYA,GACZ4T,aAAc6kB,GACd/jB,eAAgBX,GAChBY,cAAeA,GACfigB,mBAAoBA,KAGvBn+F,KAAcygG,IACbv7C,GAAAA,GAAAC,cAAC8kD,GAAK,CACJ5zG,QAASA,EACTghF,YAAaA,IAGhBopB,IAAkBv7C,GAAAA,GAAAC,cAAC+kD,GAAY,CAAC7zG,QAASA,IACzCo9B,IACCyxB,GAAAA,GAAAC,cAACw8B,GAAO,CAACluD,QAASA,KAEnB9uB,IACCugD,GAAAA,GAAAC,cAACorC,GAAI,CAACl6F,QAASA,EAASsO,KAAMA,GAAM6rF,WAAY+R,MAEhD7f,IAAYU,KACZl+B,GAAAA,GAAAC,cAAC69B,GAAQ,CAAC3sF,QAASA,IAEpB4rF,IACC/8B,GAAAA,GAAAC,cAAC28B,GAAI,CACHzrF,QAASA,EACT0rF,iBAAkBA,KAGrB57E,IAASC,eACR8+C,GAAAA,GAAAC,cAACgjC,GAAmB,CAClB9xF,QAASA,EACT+xF,YAAaA,KAIhBgZ,IACCl8C,GAAAA,GAAAC,cAAA,KACEhoC,WAAW0pC,EAAAA,GAAAA,GACT,iBACCq4C,IAAyBrrF,IAAwB,uBAEpD0zC,IAAI,QAEF1zC,GAAuB80B,GAAK,qBAC5B80D,GAAkBC,EAAkBx4C,GAAAA,GAAAC,cAACglD,GAAAA,EAAY,CAAC7wG,QAASokG,IAAsBA,IAKrF0C,IAAoBoB,IACpBt8C,GAAAA,GAAAC,cAAA,OAAKhoC,UAAWksF,EAAkB9hD,IAAI,QACnC7d,KACA+6D,IACCv/C,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,yBACb+nC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,gBACZusB,IAAkB,KAIP,YAAjBq8D,IAA8BuC,MAIlCzO,IACC30C,GAAAA,GAAAC,cAACilD,GAAAA,EAAO,CACN/zG,QAASA,EACT2mF,oBAAqBzC,EACrBnK,UAAWA,EACXuN,YAAaoE,GACblE,YAAawf,GACbltB,YAAaA,GACb+N,cAAeA,GACf7G,YAAaA,EACb/lD,MAAOA,EACPna,MAAO2iF,GACP1R,YAAaA,GACbiiB,kBAAmBnhE,GAAQwe,OAAO2iD,kBAClCltB,aAAc6kB,GACdsI,sBAAuBhtB,KAG1Bn3E,KAAYA,GAAQC,eACnB8+C,GAAAA,GAAAC,cAAC4hC,GAAO,CACN1wF,QAASA,EACT0nF,qBAAsBd,IAAsBojB,GAC5ClpB,eAAgBA,GAChB5N,WAAYA,GACZj4C,MAAOA,EACP01D,YAAawgB,KAGhBx5E,IACCk3B,GAAAA,GAAAC,cAACwkC,GAAQ,CACPtzF,QAASA,EACT8gF,eAAgBA,GAChB5N,WAAYA,GACZj4C,MAAOA,EACPhgB,KAAM43B,IAKhB,CA6ISw6B,IACCk9B,IAA6C,eAAjBmF,KAAkCtF,IAAkB6H,KACjFzH,IAAuBC,GACtB57C,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLtqC,WAAW0pC,EAAAA,GAAAA,GACT,wBAAyBm3C,GAAqB,+BAEhDt2C,MAAM,oBACN9+C,OAAK,EACLozC,KAAK,OACL2L,UAAWhf,GAAK,2BAChB2e,QAASgyC,EAAwBkJ,GAAqBC,IAEtDv9C,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,4BAEb0jF,IAAuBE,GACzB77C,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLtqC,WAAW0pC,EAAAA,GAAAA,GACT,wBAAyBm3C,GAAqB,+BAEhDt2C,MAAM,oBACN9+C,OAAK,EACLozC,KAAK,OACL2L,UAAU,gBACVL,QAAS81C,GAAesF,GAAcC,IAEtCz9C,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,gCAEbnlB,EACH+sG,IACC7/C,GAAAA,GAAAC,cAACu7B,GAAa,CACZpmF,WAAYgzF,GACZrkB,SAAUs1B,EACVzgF,UAAWkgF,EACXrd,cAAeA,KAGlBklB,IAAgB3gD,GAAAA,GAAAC,cAAColD,GAAe,CAACtzG,MAAOA,KACxC+tG,IAAqD,eAA1BiB,IAA0C1Y,MAEvEl3F,EAAQ22E,eACP9nB,GAAAA,GAAAC,cAACyhC,GAAa,CAACvwF,QAASA,EAASixD,QAAS06B,KAErB,YAAtBgkB,KAAoCvF,IACnCv7C,GAAAA,GAAAC,cAAC6uC,GAAS,CACR39F,QAAS8lG,GACTlI,WAAS,EACTnjB,SAAU22B,GACVzqB,oBAAqBka,EACrB/C,iBAAkBr3C,MAIvB2iD,IACCv6C,GAAAA,GAAAC,cAACqlD,GAAAA,EAAoB,CACnBjvE,OAAQ+rC,GACRmjC,OAAQhL,GACRiL,WAAYhL,IAAmBlmB,QAAQ,WAAckmB,GAAwCxpF,UAAOle,EACpG3B,QAASA,EACTkvE,MAAOA,EACPl2D,gBAAiBA,GACjB44C,QAASwf,GACT5L,oBAAqB6L,GACrB4lB,kBAAmBA,GACnBE,UAAWA,EACX5W,iBAAkBA,KAGlB,KIx5CV,GAR0C/xB,IACxC,MAAM,OAAEtpB,GAAWspB,EACb8lD,GAAgB5lD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkBjqB,GAGvE,OAAOovE,EAAgBzlD,GAAAA,GAAAC,cAACwlD,EAAkB9lD,QAAY7sD,CAAS,ECKjE,GAViE6sD,IAC/D,MAAM,OAAEtpB,GAAWspB,EACb+lD,GAAuC7lD,EAAAA,GAAAA,GAC3CC,GAAAA,GAAQQ,MAAO,wCAAyCjqB,GAI1D,OAAOqvE,EAAuC1lD,GAAAA,GAAAC,cAACylD,EAAyC/lD,QAAY7sD,CAAS,ECiT/G,IAAe0tD,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KAClB,CAAC9yD,GAAUuB,aACT,MAAMP,GAAUqe,EAAAA,EAAAA,KAAuBrf,EAAQuB,GACzC0a,EAAOjb,GAASO,QAASsE,EAAAA,EAAAA,KAAW7F,EAAQgB,GAASO,aAAUoB,GAC7DpB,OAAQ6b,EAAU,MAAEo4F,GAAUx0G,GAAW,CAAC,EAElD,MAAO,CACLA,UACAib,OACA0d,IAAKvc,GAAco4F,GAAQnjG,EAAAA,EAAAA,KAAWrS,EAAQod,QAAcza,EAC5DyhD,SAAUoxD,GAASp4F,GAAavX,EAAAA,EAAAA,KAAW7F,EAAQod,QAAcza,EAClE,GAXemwD,EAjRgC2iD,EAClDl0G,SACA0a,OACAjb,UACAm3E,eACAx+C,MACAyqB,cAEA,MAAM,qBACJsxD,EAAoB,SACpBr6F,EAAQ,iBACRs6F,EAAgB,kBAChBC,EAAiB,SACjBv0E,EAAQ,aACRv2B,EAAY,QACZuvB,EAAO,iBACPoxB,EAAgB,sBAChBoqD,IACEhzF,EAAAA,EAAAA,MAEEywB,GAAOge,EAAAA,GAAAA,KAEP6G,GAAM5D,EAAAA,GAAAA,IAAuB,MAE7BuhD,GAAavhD,EAAAA,GAAAA,IAAuB,MACpCwhD,EAAgBz/F,QAAQtV,IAE5Bg1G,QAASruB,IACPsuB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS/9B,EACTg+B,WAhC6B,IAiC7BzH,UAAW,KAEP,kBACJz8B,EAAiB,oBAAEm4B,EAAmB,wBACtCl4B,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBna,EAAKxgB,EAAAA,IAAc,EAAMzf,EAAAA,KAC7Ck+E,EAAqBC,EAAmBC,IAAsBh5C,EAAAA,GAAAA,IAAQ,IACvE,SAAEO,IAAaC,EAAAA,EAAAA,MACfkmC,EAAa1tF,QAAQtV,GAASu1G,eAAiBt6F,GAC/Cu6F,EAAWlgG,QAAQtV,GAAS0+B,SAElCgxB,EAAAA,GAAAA,KAAU,IACDqlD,EAAgBpuB,EAAoBmuB,EAAW9tF,SAAW+9B,IAC3DA,EAAOo/B,gBACTuwB,EAAqB,CAAEn0G,UACzB,SACGoB,GACJ,CAACpB,EAAQw0G,EAAepuB,EAAqB+tB,IAEhD,MAKMnJ,GAAoBt2C,EAAAA,GAAAA,IAAgB,KACnCh6C,GAILZ,EAAS,CAAEnZ,GAAI+Z,EAAK/Z,IAAK,IAGrBu0G,GAAkBxgD,EAAAA,GAAAA,IAAiB7b,IACvCA,EAAEmV,iBAEFsmD,EAAsB,CAAEt0G,WACxB84B,EAAQ,CAAE3a,IAAK1e,EAASwjG,QAAS9kF,IAAKC,iBAAiB,KAEhD,KAGH+2F,GAA8BzgD,EAAAA,GAAAA,IAAgB,KAClDxK,GAAkB,IAGd8mB,GAActc,EAAAA,GAAAA,IAAgB,KAClC,GAAKj1D,EAIL,GAFA60G,EAAsB,CAAEt0G,WAEpBi1G,EAAU,CACZ,MAAM,UAAEjyF,GAAcvjB,EAAQ0+B,OACxBzD,GAAQC,EAAAA,GAAAA,MAEd05E,EAAkB,CAChB97E,MAAO94B,EAAQO,OACfs9B,QAASta,EACTua,SAAU99B,EAAQk9B,WAClBjC,SAEJ,MAAWj7B,EAAQ21G,eACjBhB,EAAiB,CAAE5xF,KAAM/iB,EAAQ21G,iBACxB31G,EAAQ+sG,cACjBjjG,EAAa,CAAEvJ,OAAQP,EAAQO,OAASgE,UAAWvE,EAAQ+sG,iBAE3D1yF,EAAS,CAAEnZ,GAAIlB,EAAQO,SAEnBP,EAAQk9B,YACVmD,EAAS,CACPvH,MAAO94B,EAAQO,OACfy8B,MAAOh9B,EAAQk9B,aAGrB,IAGF,IAAKl9B,EACH,OA6GF,MAAM4uG,GAAmBp+C,EAAAA,GAAAA,GACvB,gEACAs0B,EAAAA,GAAAA,GAAkBnsD,GAAO1d,GAAQmoC,IAGnC,OACEyL,GAAAA,GAAAC,cAAA,OACEqI,IAAKA,EACL1S,IAAI,oBACJ39B,WAAW0pC,EAAAA,GAAAA,GAAe,gCAAiCwyC,GAAc,gBAExEA,GAnHDn0C,GAAAA,GAAAC,cAACo8B,GAAAA,EAAM,CACLvlC,KAAMkX,EAAW,eAAiB,QAClC5hD,KAAMA,EACNg2C,QAASh2C,EAAOswF,OAAoB5pG,IAiHtCktD,GAAAA,GAAAC,cAAA,OACEhoC,UAAW8nF,EACX19C,IAAI,OACJkhB,YAtLmBh5B,KACvBypC,EAAAA,GAAAA,GAAwBzpC,GACxB83B,EAAwB93B,EAAE,EAqLtBi5B,cAAelB,GAEftiB,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,gBAAgBoqC,IAAI,QAlHzC,WACE,GAAIlxD,GAAS0+B,OAAQ,CACnB,IAAK1+B,EAAQ0+B,OAAOx7B,MAAO,OAE3B,OACE2rD,GAAAA,GAAAC,cAACo8B,GAAAA,EAAM,CACLvlC,KAAK,QACL1qC,KAAM0d,EACNz1B,MAAOlD,EAAQ0+B,OAAOx7B,MACtB4jB,WAAW0pC,EAAAA,GAAAA,GAAe,iBAAkBle,EAAK6e,OAAS,WAGhE,CAEA,GAAI/N,EACF,OACEyL,GAAAA,GAAAC,cAACo8B,GAAAA,EAAM,CACLvlC,KAAK,QACL1qC,KAAMmoC,EACNt8B,WAAW0pC,EAAAA,GAAAA,GAAe,iBAAkBle,EAAK6e,OAAS,WAMlE,CA0FSykD,GACD/mD,GAAAA,GAAAC,cAAA,QAAMhoC,UAAU,8BACb9mB,EAAS61G,cAAgBvjE,EAAK,4BAA8BA,EAAK,qBA1F5E,WACE,GAAItyC,GAASwjG,QACX,OACE30C,GAAAA,GAAAC,cAAAD,GAAAA,GAAAiC,SAAA,KACEjC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,yBAAyBoqC,IAAI,OAAOiG,IAAK29C,GACtDjmD,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,6BAA6BoqC,IAAI,QAC7CqhB,EAAAA,GAAAA,GAAWvyE,EAAQwjG,QAAQsS,WAE9BjnD,GAAAA,GAAAC,cAAA,QAAMhoC,UAAU,qBAAqBoqC,IAAI,SACtCsrC,EAAAA,GAAAA,GAAuB,CACtBvxF,KAAMjL,EAASiL,KAAKA,KACpBiM,SAAUlX,EAASiL,KAAKiM,aAK9B23C,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLtqC,UAAU,2BACV6+B,KAAK,OACL0L,MAAM,cACN0kD,eAAa,EACb9kD,QAASwkD,GAET5mD,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,wBAAwB,mBACpCwrB,EAAK,cAMd,MAAMlX,EAAap7B,GAASo7B,aAC1Bo6E,EACIljE,EAAK,4BACJtyC,EAASw0G,MACRliE,EAAK,wBACLA,EAAKtyC,EAAS+sG,cAAgB,wBAA0B,6BAE1DnmF,EAAQ4uF,EACVx1G,EAAS0+B,OAAQ9X,MAChB+R,GACC45C,EAAAA,GAAAA,IAAW35D,EAAAA,EAAAA,IAAgB+f,IAAQ,IAClCyqB,GAAUmvB,EAAAA,GAAAA,GAAWvyE,EAASg2G,kBAAmBh4D,EAAAA,EAAAA,GAAa1L,EAAM8Q,IAAY,IAAM,GAG7F,OACEyL,GAAAA,GAAAC,cAAAD,GAAAA,GAAAiC,SAAA,KACEjC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,6BAA6BoqC,IAAI,QAAQtqC,GACxDioC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,yBAAyBoqC,IAAI,OAAOiG,IAAK29C,GACtDjmD,GAAAA,GAAAC,cAAA,QAAMhoC,UAAU,qBAAqBoqC,IAAI,SACtCsrC,EAAAA,GAAAA,GAAuB,CACtBvxF,KAAMjL,EAASiL,KAAKA,KACpBiM,SAAUlX,EAASiL,KAAKiM,aAK9B23C,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLtqC,UAAU,2BACV6+B,KAAK,OACL0L,MAAM,cACN0kD,eAAa,EACb9kD,QAASsgB,GAERn2C,GAIT,CAyBSiyC,IAEHxe,GAAAA,GAAAC,cAAColD,GAAe,MAChBrlD,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLtqC,UAAU,wBACVuqC,MAAM,oBACN9+C,OAAK,EACLozC,KAAK,OACL2L,UAAWhf,EAAK,SAChB2e,QAASykD,GAET7mD,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,kBAAkB,qBAGlCsiF,GACCv6C,GAAAA,GAAAC,cAACylD,GAAoC,CACnCrvE,OAAQ+rC,EACRmjC,OAAQhL,EACRppG,QAASA,EACTi2G,WAAYZ,EACZzjD,QAASwf,EACT5L,oBAAqB6L,IAGzBxiB,GAAAA,GAAAC,cAACwlD,GAAa,CACZpvE,OAAQkwE,EACRxjD,QAAS0jD,IAEP,KCNV,IAAejmD,EAAAA,GAAAA,KAtP0B6mD,EACvCv5F,uBACApc,SACA2E,WACAmH,aACA8pG,gBACAC,qBACAC,mBACAj7F,WACAwvE,aACA0rB,gBACAC,YACAC,gBACAz8B,YACA5C,eACAs/B,cACAC,+BACAlO,uBACAtyF,OACAygG,UACAnP,gBACAoP,aACAC,sBACAvN,wBACA72F,gBACAqkG,cACAC,gBACAtO,iCAEA,MAAM,oBAAEuO,IAAwBn1F,EAAAA,EAAAA,MAE1B2rF,GAAayJ,EAAAA,GAAAA,GAAiBN,GAC9BO,GAAqBzkG,IAAkBmkG,GAEvC,8BACJO,EAA6B,8BAC7BjzB,EAA6B,8BAC7B2c,G3CvFW,SACb3qF,EACAihE,EACAqxB,EACAC,EACAloG,GAEA,MAAM,oBACJ0L,EAAmB,iBAAEmrG,EAAgB,sBAAE1O,EAAqB,0BAC5D2O,IACEx1F,EAAAA,EAAAA,OAEE,SAAEg7C,IAAaC,EAAAA,EAAAA,MACfw6C,EAAkCz6C,EAAW,IAAM,KAGvDm4C,QAASmC,EAA+BI,OAAQC,EAAkBC,SAAUC,IAC1EzC,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS/9B,EACTwgC,WAtBsC,MAuBpCjrG,IACF,GAAa,WAATwJ,IAAqB0hG,EAAAA,GAAAA,KACvB,OAGF,IAAI1rG,EAAQ,EACZ,MAAM2rG,EAAuB,GACvBC,EAAwB,GACxBC,EAAmC,GACnCvO,EAAsC,GACtCwO,EAAmC,GACzC,IAAI7vE,GAAa,EAEjBz7B,EAAQ3L,SAASmvG,IACf,MAAM,eACJ/rB,EAAc,OAAEp/B,EAAM,mBAAEkzD,EAAkB,WAAEC,GAC1ChI,GAEE,QAAEiI,GAAYpzD,EACdxgD,EAAYyD,OAAOmwG,EAAQ1zG,eAAiB0zG,EAAQ5zG,WACpD6zG,EAAkD,SAA9BD,EAAQC,kBAC5BC,EAAcF,EAAQE,YAAcrwG,OAAOmwG,EAAQE,kBAAe12G,EAEnEwiF,GAUD5/E,EAAY2H,IACdA,EAAQ3H,GAGN4zG,EAAQ3vD,kBACVqvD,EAAWrvG,KAAKjE,GAGd4zG,EAAQpS,mBACV+R,EAAYtvG,KAAKjE,GAGf4zG,EAAQ/rG,UACV2rG,EAAuBvvG,KAAK6vG,GAAe9zG,GAGzC6zG,GACFJ,EAAuBxvG,KAAK6vG,GAAe9zG,IA1BvC4zG,EAAQ/rG,WACN8rG,GAAcD,EAAmBK,OAASJ,EAAWK,MACvDpwE,GAAa,GAEfqhE,EAA0BhhG,KAAK6vG,GAAe9zG,GAuBlD,IAGEikG,EAAqBxhF,SAAW9a,GAASs8F,EAAqBxhF,SAChE/a,EAAoB,CAAEC,UAGpB2rG,EAAWn3G,QACb02G,EAAiB,CAAE/qG,WAAYwrG,IAG7BC,EAAYp3G,QACdgoG,EAAsB,CAAEr8F,WAAYyrG,KAGlCC,EAAuBr3G,QAAU8oG,EAA0B9oG,SAC7D+nG,EAA2B,CAAEsP,yBAAwBvO,4BAA2BrhE,eAG9E6vE,EAAuBt3G,QACzB22G,EAA0B,CAAE92G,SAAQ6G,IAAK4wG,GAC3C,KAGFQ,EAAAA,GAAAA,GAAkBhB,EAAkBE,GAEpC,MACE1C,QAAS9wB,IACP+wB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS/9B,EACTwgC,WAAY5+B,GACZ0/B,OAAQnB,KAGFtC,QAASnU,IAAkCoU,EAAAA,GAAAA,IAAwB,CACzEC,QAAS/9B,EACTwgC,WAAY5+B,KAGd,MAAO,CACLo+B,gCACAjzB,gCACA2c,gCAEJ,C2C3BM6X,CAAoBxiG,EAAMihE,EAAcqxB,EAAsBC,EAA4BloG,IAExF,oBACJo4G,EAAmB,oBACnBC,EAAmB,mBACnBC,EAAkB,cAClBC,GCtFW,SACb5iG,EACAihE,EACA9qE,EACA+pG,EACAC,EACAj7F,EACA07F,EACAC,EACAJ,GAEA,MAAM,qBAAEppG,IAAyBsU,EAAAA,EAAAA,OAE1Bk3F,EAAmBC,IAAoBnoD,EAAAA,GAAAA,KAC5C,IAAgB,WAAT36C,EAAoB,EACzBrF,EAAAA,EAAAA,KAAS,IAAMtD,EAAqB,CAAEsE,UAAWO,EAAAA,GAAkBC,aAAc,KAAM,GAAM,IAC7FxB,EAAAA,EAAAA,KAAS,IAAMtD,EAAqB,CAAEsE,UAAWO,EAAAA,GAAkBI,YAAa,KAAM,GAAM,IAC1F,IAEJ,CAACjF,EAAsBlB,IAInBusG,GAAsBrlD,EAAAA,GAAAA,IAAuB,MAE7CslD,GAAqBtlD,EAAAA,GAAAA,IAAuB,MAE5CulD,GAAgBvlD,EAAAA,GAAAA,IAAuB,MAEvC0lD,GAAoBhkD,EAAAA,GAAAA,IAAgB,KACxC,IAAK0hD,EAAS,OAEd,IAAKtqG,GAAY3L,OAGf,OAFAo2G,GAAY,QACZC,GAAc,GAIhB,IAAKV,EAGH,OAFAS,GAAY,QACZC,GAAc,GAIhB,MAAMjuB,EAAY3R,EAAanwD,QAC/B,IAAK8hE,EACH,OAGF,MAAM,aAAE2nB,EAAY,aAAEC,EAAY,UAAEC,GAAc7nB,EAC5CowB,EAAev5G,KAAK4S,MAAMm+F,EAAeC,EAAYF,GAErD0I,EAAaD,GAxDC,EA0DC,IAAjBxI,IAEJoG,EAAY17F,GAAY+9F,IALHD,GAxDH,KA8DlBnC,GAAeoC,GAAW,KAI1BnE,QAASoE,IACPnE,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS/9B,EACTshC,OAAQY,EAAAA,KACN3sG,IACGssG,GAAqBD,GAI1BrsG,EAAQ3L,SAAQ,EAAGojF,iBAAgBp/B,aAC5Bo/B,IAEoB,sBAArBp/B,EAAOj+B,WACTiyF,IAGuB,qBAArBh0D,EAAOj+B,WACTkyF,IACF,GACA,IAGEL,EAAsBtsG,GAAcA,EAAW3L,OAAS,GAE9DyoG,EAAAA,GAAAA,IAAeyP,EAAqBD,EAAsBS,OAAgCz3G,IAC1FwnG,EAAAA,GAAAA,IAAe0P,EAAoBF,EAAsBS,OAAgCz3G,GAEzF,MACEqzG,QAASsE,EACT/B,OAAQgC,EACR9B,SAAU+B,IACRvE,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS/9B,EACTshC,OAAQgB,IACRC,kBAAmBj3B,GAAAA,IAClBw2B,IAEH9P,EAAAA,GAAAA,IAAe2P,EAAeQ,GAE9B,MACEtE,QAAS2E,EACTpC,OAAQqC,EACRnC,SAAUoC,IACR5E,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS/9B,EACTshC,OA9GoB,EA+GpBiB,kBAAmBj3B,GAAAA,IAClBw2B,IAEH9P,EAAAA,GAAAA,IAAe2P,EAAea,IAE9BjqD,EAAAA,GAAAA,KAAU,KACJinD,GACFsC,GACF,GACC,CAACtC,EAASsC,IAEb,MAAMa,GAAgB7kD,EAAAA,GAAAA,IAAgB,KACpCskD,IACAK,IAEA1xG,YAAW,KACT2xG,IACAL,GAAgB,GA9HO,IA+HD,KAI1B1sC,EAAAA,GAAAA,GAAcgtC,EAAe,CAACA,EAAeztG,IAG7C,MAAM0tG,GAA8BC,EAAAA,GAAAA,IAAmB5D,EAvIvB,KA0IhC,OAFA6D,EAAAA,GAAAA,GAAgBH,EAAe,CAACA,EAAeC,IAExC,CACLpB,sBACAC,sBACAC,qBACAC,gBAEJ,CDtDMoB,CACFhkG,EACAihE,EACA9qE,EACA+pG,EACAC,EACAj7F,EACA07F,EACAC,EACAJ,GAGIrkE,GAAOge,EAAAA,GAAAA,KAEP6pD,EACJtrD,GAAAA,GAAAC,cAAA,OAAKhoC,WAAW0pC,EAAAA,GAAAA,GA9DS,iBA8D4B,wBAAyB/L,IAAI,mBAChFoK,GAAAA,GAAAC,cAAA,YAAOxc,EAAK,oBAGV8nE,EAAwB9Q,EAAwB,EAAI6M,EAAc9+F,QAAO,CAACC,EAAK+iG,IAC5E/iG,EAAM+iG,EAAalkC,aAAamkC,OAAO55G,QAC7C,GACH,IAAI65G,EAAkB,EAEtB,MAAMC,GAAiBlmB,EAAAA,GAAAA,GAAYjoF,GAC7BouG,EAAenlG,QACnBjJ,GAAcmuG,GAAkBnuG,EAAWA,EAAW3L,OAAS,KAAO85G,EAAeA,EAAe95G,OAAS,IAGzG01E,EAAa+/B,EAAc9qG,KAAI,CACnCqvG,EACAC,EACAC,KAEA,MAAMzkC,EAAeukC,EAAUvkC,aAAa9qE,KAAI,CAC9CwvG,EACAC,EACAC,KAEA,GACyB,IAAvBF,EAAYn6G,SACR80E,GAAQqlC,EAAY,MACrB50G,EAAAA,EAAAA,IAAgB40G,EAAY,MAC3BA,EAAY,GAAG53G,QAAQwG,QAAQ2jD,UACnC,CACA,MAAMptD,EAAU66G,EAAY,GACtBtS,EACJuS,IAAqBC,EAAkBr6G,OAAS,GAC7Ci6G,IAAmBC,EAAgBl6G,OAAS,EAGjD,OAAO40C,EAAAA,EAAAA,IAAQ,CACbt1C,EAAQkB,KAAOw1G,EAA6B1vF,SAAWmzF,EACvDtrD,GAAAA,GAAAC,cAACksD,GAAAA,EAAa,CACZv2D,IAAKzkD,EAAQkB,GACblB,QAASA,EACTkF,SAAUA,EACV8T,gBAAiB9C,EACjB+kG,cAAe3lG,QAAQpQ,GAAYA,IAAaD,EAAAA,KAAmBwN,GACnE0kG,8BAA+BA,EAC/BjzB,8BAA+BA,EAC/B2c,8BAA+BA,EAC/B2H,qBAAsBA,EACtBL,gBAAiBiS,IAA0BG,EAC3CnS,YAAaG,GAAgBkS,EAC7BlS,aAAcA,EACdE,2BAA4BA,KAGlC,CAEA,IAAIyS,EAEJ,OAAOL,EAAYxvG,KAAI,CACrBoqE,EACA0lC,KAEA,MAAMn7G,EAAUw1E,GAAQC,GAAkBA,EAAea,YAAcb,EACjEvG,EAAQsG,GAAQC,GAAkBA,OAAiB9zE,EACnDf,GAAQusF,EAAAA,EAAAA,IAAantF,GACrBo7G,EAAiB5lC,GAAQC,GACzBe,EAAcqkC,EAAYM,EAAe,GAE3Cn7G,EAAQ+G,iBAAmB0vG,EAAYzvF,WAAY2gE,EAAAA,EAAAA,IAAiB3nF,EAAQ+G,mBAC9E0vG,EAAYzvF,SAAU2gE,EAAAA,EAAAA,IAAiB3nF,EAAQkB,KAGjD,MAAMm6G,GAAmBD,GAAkBp7G,EAAQiY,UAAYjY,EAAQiY,eAAYtW,EAC7E25G,EAAsB9kC,IAAgBhB,GAAQgB,GAAeA,EAAYv+D,eAAYtW,EACrF45G,EAAoBv7G,EAAQkB,KAAOgE,EAEnCysC,EAAW,CACfuxD,eAAiC,IAAjBiY,EAChB9S,cAAe8S,IAAiBN,EAAYn6G,OAAS,EACrD4nG,uBAAwBhzF,QAAQ+lG,GAAmBA,IAAoBH,GACvEjY,sBAAuB3tF,QAAQ+lG,GAAmBA,IAAoBC,GACtE/S,aACE4S,IAAiBN,EAAYn6G,OAAS,GACnCo6G,IAAqBC,EAAkBr6G,OAAS,GAChDi6G,IAAmBC,EAAgBl6G,OAAS,GAInDw6G,EAAyBG,EAEzB,MAAMG,GAAariG,EAAAA,EAAAA,IAAqBnZ,GAElCykD,GAAMrnC,EAAAA,EAAAA,IAA6Bpd,GAAY,GAAEA,EAAQyR,QAAQ+pG,IAAeA,EAEhFtT,GAA+B,IAAlBV,IAA4BgP,EAE/C,OAAOlhE,EAAAA,EAAAA,IAAQ,CACbt1C,EAAQkB,KAAOw1G,EAA6B1vF,SAAWmzF,EACvDtrD,GAAAA,GAAAC,cAACk5C,GAAO,CACNvjD,IAAKA,EACLzkD,QAASA,EACTioG,6BAA8BkP,EAC9BjzB,8BAA+BA,EAC/B2c,8BAA+BA,EAC/B3xB,MAAOA,EACP6K,UAAWA,EACXipB,WAAYrxD,EAAS02D,eAAiBkO,IAAc31G,KAAW26G,IAAsB3wB,GACrFmY,eAAgBpxD,EAASuxD,gBAAkBqT,IAAc31G,EACzDsE,SAAUA,EACV8T,gBAAiB9C,EACjBgyF,WAAYA,EACZ/Q,WAAY+Q,GAAchjG,IAAaD,EAAAA,IAA2B,cAATiR,EACzDiyF,gBAAiBiS,IAA0BG,EAC3CnS,YAAaz2D,EAAS42D,cAAgBkS,EACtCvX,eAAgBvxD,EAASuxD,eACzBmF,cAAe12D,EAAS02D,cACxBC,uBAAwB32D,EAAS22D,uBACjCrF,sBAAuBtxD,EAASsxD,sBAChCsF,aAAc52D,EAAS42D,aACvBC,qBAAsBA,EACtBC,2BAA4BA,EAC5BrnB,sBAAuBosB,IAEzBxtG,EAAQkB,KAAOgE,GACb2pD,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,uBAAuB29B,IAAI,sBACxCoK,GAAAA,GAAAC,cAAA,YAAOxc,EAAKgkE,EACP1rB,EAAa,aAAe,YAAe,wBAIpD,IACD0vB,MAAM,IAGX,OACEzrD,GAAAA,GAAAC,cAAA,OACEhoC,UAAU,qBACV29B,IAAKi2D,EAAUzkC,SACf7D,YAAayQ,GAAAA,EACb44B,eAAa,GAEb5sD,GAAAA,GAAAC,cAAA,OACEhoC,WAAW0pC,EAAAA,GAAAA,GAAe,cAAe0mD,GAAqB,eAC9DzyD,IAAI,cACJ2tB,YAAayQ,GAAAA,EACb5xB,QAASimD,EAAoB,IAAMF,EAAoB,CAAE97D,WAAYw/D,EAAUzkC,gBAAct0E,GAE7FktD,GAAAA,GAAAC,cAAA,QAAMoC,IAAI,QACP0lD,GAAc8D,EAAU1kC,eAAiB0lC,EAAAA,KACxCppE,EAAK,+BAENskE,GAAc8D,EAAU1kC,eAAiB0lC,EAAAA,KACxCppE,EAAK,sBAAsBqpE,EAAAA,GAAAA,IAAgBrpE,EAAMooE,EAAUzkC,cAAUt0E,GAAW,KAEhFi1G,IAAc+E,EAAAA,GAAAA,IAAgBrpE,EAAMooE,EAAUzkC,YAGnDE,EAAamkC,OACV,IAIV,OACEzrD,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,qBAAqB20F,eAAa,GAC9C9C,GAAuB9pD,GAAAA,GAAAC,cAAA,OAAKqI,IAAKyhD,EAAqBn0D,IAAI,oBAAoB39B,UAAU,sBACxF+vF,GAAuBhoD,GAAAA,GAAAC,cAAC2oB,GAAkB,CAACC,iBAAe,EAACjzB,IAAM,YAAWlkD,IAAUA,OAAQA,IAC9F61E,EAAWkkC,QACV39F,GAAwB05F,GACxBxnD,GAAAA,GAAAC,cAAC2lD,GAAgB,CAAChwD,IAAKlkD,EAAQA,OAAQA,EAAQ42E,aAAcA,IAE9DwhC,GACC9pD,GAAAA,GAAAC,cAAA,OACEqI,IAAK0hD,EACLp0D,IAAI,mBACJ39B,UAAU,qBAGd+nC,GAAAA,GAAAC,cAAA,OACEqI,IAAK2hD,EACLr0D,IAAI,cACJ39B,UAAU,gBAER,IEnSJ80F,GAAY,EAAIl9G,EAAAA,GA+FtB,IAAe2wD,EAAAA,GAAAA,KArFkBwsD,EAC/BjmC,iBACA1/D,OACA4lG,yBACAp1G,YAEA,MAAM4rC,GAAOge,EAAAA,GAAAA,KAEb,MAAa,cAATp6C,EAqCN,SAAyBo8B,GACvB,OACEuc,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,SAAQ+nC,GAAAA,GAAAC,cAAA,YAAOxc,EAAK,uCAEvC,CAxCWypE,CAAgBzpE,GAGrBsjC,EAuCN,SAA6BtjC,GAC3B,OACEuc,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,cACb+nC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,WACb+nC,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,8CACb+nC,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,EAAK,wCAC5Buc,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,eACZ+nC,GAAAA,GAAAC,cAAA,UAAKxc,EAAK,+CACVuc,GAAAA,GAAAC,cAAA,UAAKxc,EAAK,+CACVuc,GAAAA,GAAAC,cAAA,UAAKxc,EAAK,+CACVuc,GAAAA,GAAAC,cAAA,UAAKxc,EAAK,iDAKpB,CArDW0pE,CAAoB1pE,GAGzBwpE,EAoDN,SAAqBxpE,GACnB,OACEuc,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,cACb+nC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,UAAUoqC,IAAK5e,EAAK6e,MAAQ,WAAQxvD,GACjDktD,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,EAAK,yBAC5Buc,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,eAAewrB,EAAK,4BACjCuc,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,mBACZ+nC,GAAAA,GAAAC,cAAA,UAAKxc,EAAK,yBACVuc,GAAAA,GAAAC,cAAA,UAAKxc,EAAK,yBACVuc,GAAAA,GAAAC,cAAA,UAAKxc,EAAK,yBACVuc,GAAAA,GAAAC,cAAA,UAAKxc,EAAK,2BAKpB,CAlEW2pE,CAAY3pE,GAGjB5rC,EASN,SAAqB4rC,EAAc5rC,GACjC,OACEmoD,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,cACb+nC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,WACb+nC,GAAAA,GAAAC,cAAC02B,GAAAA,EAAS,CACR9+E,MAAOA,EACPi/C,KAAMi2D,GACN90F,UAAU,gCAEZ+nC,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,EAAK,qCAC5Buc,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,kCAAiCyrD,EAAAA,GAAAA,GAAWjgC,EAAK,mCAAoC,CAAC,SAI3G,CAtBW4pE,CAAY5pE,EAAM5rC,GAIzBmoD,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,SAAQ+nC,GAAAA,GAAAC,cAAA,YAAOxc,EAAK,eAA2B,IC0F5D6pE,IAAwBtrG,EAAAA,EAAAA,KAAUC,GAAOA,KANvB,KAM8C,GAkgBtE,IAAeu+C,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KAClB,CAAC9yD,GAAUuB,SAAQ2E,WAAUgR,WAC3B,MAAMpV,EAAgB9B,EAAO8B,cACvBgB,GAAO+C,EAAAA,EAAAA,KAAW7F,EAAQuB,GAChC,IAAKuB,EACH,MAAO,CAAEhB,iBAGX,MAAMuL,GAAa+vG,EAAAA,EAAAA,KAAwBp9G,EAAQuB,EAAQ2E,EAAUgR,GAC/D/I,EAAwB,cAAT+I,GACjB9K,EAAAA,EAAAA,KAA4BpM,EAAQuB,IACpC0G,EAAAA,EAAAA,KAAmBjI,EAAQuB,GAEzBkS,GAAgB/J,EAAAA,EAAAA,IAAiBnI,EAAQ2E,EAAUpE,GAEzD,KACEoE,IAAaD,EAAAA,IAAmBwN,GAAkB3Q,GAAM6E,SACnDwG,GAAgBjI,GAAYiI,EAAanF,OAAO9C,KAErD,MAAO,CAAEpE,iBAGX,MAAM,aAAEqU,EAAY,kBAAEknG,GAAsBv6G,EACtCsI,GAAc2sE,EAAAA,EAAAA,KAAsB/3E,EAAQuB,EAAQkS,EAAgB,QAAU,OAC9E6pG,GAAa9mG,EAAAA,EAAAA,KAAuBxW,EAAQuB,GAE5Cg8G,EACJr3G,IAAaD,EAAAA,KACToH,IAAevK,EAAKiD,cAAgBu3G,GAAclyG,IAAgBA,EAAY6N,UAG9Eq/D,GAAU57C,EAAAA,EAAAA,KAAU18B,EAAQuB,GAE5BmG,EAAQ5E,EAAK0F,SAAStC,GACtBmT,GAAgBjL,EAAAA,EAAAA,IAAS7M,QAA+CoB,GAArC2W,EAAAA,EAAAA,KAAmBtZ,EAAQuB,GAC9D+1G,IAAiBzuG,EAAAA,EAAAA,KAAiB7I,EAAQuB,EAAQ2E,IAAWiB,cAEnE,MAAO,CACLwW,sBAAsBC,EAAAA,EAAAA,KAA2B5d,GACjDw9G,cAAc,EACdrnG,eACAknG,oBACA7F,eAAex8F,EAAAA,EAAAA,IAAclY,GAC7B26G,aAAajyF,EAAAA,EAAAA,IAAY1oB,GACzB46G,UAAW56G,EAAK46G,UAChB9mC,gBAAgBntE,EAAAA,EAAAA,KAAqBzJ,EAAQuB,GAC7C4iG,eAAeC,EAAAA,EAAAA,IAAqB7iG,GACpC8iG,qBAAqBC,EAAAA,EAAAA,IAAwB/iG,GAC7Ci0G,MAAOl/F,QAAQgiE,GACfjlD,SAAUrzB,EAAOqzB,SACjBhmB,aACAc,eACA1H,eAAeC,EAAAA,EAAAA,KAAoB1G,EAAQuB,EAAQ2E,GACnDmxG,iBAA2B,WAATngG,IAAqB1Q,EAAAA,EAAAA,KAAuBxG,EAAQuB,EAAQ2E,GAC9Eo3G,aACAK,oBAAoB92B,EAAAA,EAAAA,KAAqB7mF,GACzCwoG,cAAenvF,EAAe/C,QAAQ+C,EAAaovF,mBAAgB9lG,EACnE+E,QACAk2G,4BAA4BpzE,EAAAA,EAAAA,KAA+BxqC,EAAQ,4BACnE69G,2BAA4Bt8G,IAAWqN,EAAAA,IACvCjH,QAAS7E,EAAK6E,QACd2vG,gBACAx1G,mBACIy7G,GAAiC,CAAEnyG,eACxC,GAhEe0nD,EAhgB2BgrD,EAC7Cv8G,SACA2E,WACAgR,OACA6mG,WACAjG,cACAC,gBACAp6F,uBACA6/F,eACA71G,UACA6vG,gBACAiG,cACAloC,UACAliD,WACAskF,UACA/gC,iBACAutB,gBACAE,sBACAqZ,YACAlI,QACAnoG,aACAc,eACA1H,gBACAmlF,aACAyrB,mBACAlhG,eACAknG,oBACA/F,gBACAgG,aACAK,qBACAvyG,cACAo9F,gBACAwV,kBACAC,gBACAv2G,QACAk2G,4BACAC,6BACA/7G,gBACAo8G,6BACAzU,iCAEA,MAAM,qBACJl7F,EAAoB,gBAAE4vG,EAAe,sBAAEC,EAAqB,qBAAEC,EAAoB,kBAAEC,EAAiB,iBACrG17F,EAAgB,qBAAE27F,IAChB17F,EAAAA,EAAAA,MAGEs1D,IAAe5jB,EAAAA,GAAAA,IAAuB,MAItCiqD,IAAkBjqD,EAAAA,GAAAA,IACZ,WAATr9C,IAAqBunG,EAAAA,EAAAA,MAAmBt1G,EAAAA,EAAAA,MAAa5H,EAAQ2E,KAC3Dw4G,EAAAA,EAAAA,MAAuBv1G,EAAAA,EAAAA,MAAa5H,EAAQ2E,IAC5C,GAGCuxG,IAAcljD,EAAAA,GAAAA,MACdoqD,IAAepqD,EAAAA,GAAAA,MACfqqD,IAAsBrqD,EAAAA,GAAAA,MACtBi1C,IAAuBj1C,EAAAA,GAAAA,MACvBmjD,IAA+BnjD,EAAAA,GAAAA,MAC/BsqD,IAAoBtqD,EAAAA,GAAAA,MACpBuqD,IAA4BvqD,EAAAA,GAAAA,KAAO,GACnCwqD,IAA6BxqD,EAAAA,GAAAA,IAAOj+C,QAAQlL,IAE5CqI,IAAgB/J,EAAAA,EAAAA,IAAiBnI,EAAQ2E,EAAUpE,GACnDk9G,GAAoBvrG,IAAiBvN,IAAa+4G,EAAAA,IAElDpuF,GAAoBva,QAAQjJ,IAElCygE,EAAAA,GAAAA,IAAc,KAERj9C,KACFrtB,EAAAA,EAAAA,KAAU,KACRu7G,GAA2B/2F,SAAU,CAAK,GAE9C,GACC,CAAC6I,MAGJi9C,EAAAA,GAAAA,IAAc,KACZ07B,GAAqBxhF,QAAUvhB,CAAa,GAC3C,CAACA,KAEJiqD,EAAAA,GAAAA,KAAU,MACH/yC,GAAwB65F,GAAiBnkF,GAAYskF,GACxDyG,EAAsB,CAAE78G,UAC1B,GACC,CAACoc,EAAsBpc,EAAQ8xB,EAAUskF,EAASH,KAGrD1pC,EAAAA,GAAAA,IAAc,KACRj9C,KACF6mF,GAA6B1vF,QAAUwhF,GAAqBxhF,QAC9D,GACC,CAAC6I,MAEJi9C,EAAAA,GAAAA,IAAc,KACZ+wC,GAAkB72F,QAAUs1F,CAAU,GACrC,CAACA,IChPiCgB,MAUrC39C,EAAAA,GAAAA,GAAW,CAAE,QATb,SAAoBvmB,GAClB,MAAM/sC,GAAa6xG,EAAAA,GAAAA,KAEf7xG,GAAcA,EAAW3L,OAAS,IACpC04C,EAAEmV,iBACF+uD,EAAkB,CAAEjxG,eAExB,GAEmC,EDwOnC8xG,CAA8Bb,GAE9B,MAAMnH,IAAgBtlD,EAAAA,GAAAA,KAAQ,KAC5B,IAAKxkD,GAAY3L,SAAWyM,EAC1B,OAGF,MAAMixG,EAAiB/xG,EAAWhB,KAAKnK,GAAOiM,EAAajM,KAAKP,OAAO2U,SAGjE+oG,EAA2C,cAATnoG,GAAwB2mG,EAC5D,CAAC,OAAQ,MACT,CAAC,MAEL,OAAOuB,EAAe19G,OAClBg1E,IACA4oC,EAAAA,EAAAA,IAAQF,EAAgBC,GACxB3H,GAA6B1vF,QAC5BrgB,OAA6BhF,EAAnBqG,OAAO9C,GAClB0wE,QAEAj0E,CAAS,GACZ,CAAC0K,EAAYc,EAAc+I,EAAM2mG,EAA4Bl2G,EAASzB,EAAU0wE,KAEnFsc,EAAAA,GAAAA,IAAY,KACV,IAAK7lF,IAAec,GAAyB,cAAT+I,EAClC,OAEF,MAAM9O,EAAMiF,EAAW1L,QAAQO,GAAOiM,EAAajM,IAAKf,WAAWC,QAAQM,SAEtE0G,EAAI1G,QAET28G,EAAqB,CAAE98G,SAAQ6G,OAAM,GApJE,MAuJzC8qF,EAAAA,GAAAA,IAAY,KACV,IAAK7lF,IAAec,GAAyB,cAAT+I,EAClC,OAEF,MAAMqoG,EAAgBlyG,EAAWhB,KAAKnK,GAAOiM,EAAajM,IAAK+B,QAAQ0G,YAAWhJ,OAAO2U,SAEzF,IAAKipG,EAAc79G,OAAQ,OAE3B,MAAM89G,EAAmBD,EAAclnG,QAAO,CAACC,EAAK3N,KAClD,MAAM,OAAE9I,EAAM,GAAEK,GAAOyI,EAKvB,OAJK2N,EAAIzW,KACPyW,EAAIzW,GAAU,IAEhByW,EAAIzW,GAAQ2H,KAAKtH,GACVoW,CAAG,GACT,CAAC,GAEJlS,OAAOsH,QAAQ8xG,GAAkBz9G,SAAQ,EAAEF,EAAQwsC,MACjDkwE,EAAqB,CAAE18G,SAAQwsC,YAAW,GAC1C,GAxKiC,MA2KrC6kD,EAAAA,GAAAA,IAAY,KACV,IAAK7lF,IAAec,GAAgBjI,IAAaD,EAAAA,IAA2B,cAATiR,EACjE,OAEF,MAAMlX,GAASmJ,EAAAA,EAAAA,MACTf,EAAMiF,EAAW1L,QAAQO,IAAO2G,EAAAA,EAAAA,KAAiB7I,EAAQuB,EAAQW,IAAKqwB,qBACtC5vB,IAAjCwL,EAAajM,IAAKshB,aAElBpb,EAAI1G,QAETkhB,EAAiB,CAAErhB,SAAQ6G,OAAM,GAtLK,KAyLxC,MAAMq3G,IAAiB5tD,EAAAA,GAAAA,KAAQ,KAC7B,GAAa,WAAT36C,EAIJ,OAAOrF,EAAAA,EAAAA,KAAS,IAAMtD,EAAqB,CAAEsE,UAAWO,EAAAA,GAAkBE,UAAW,KAAM,GAAM,EAAM,GAEtG,CAAC/E,EAAsBlB,KAEpB,WAAEqyG,GAAU,kBAAEC,IE1TP,WAGb,MAAOD,EAAYE,IAAkBtiD,EAAAA,GAAAA,IAAQ,GAEvCuiD,GAAeC,EAAAA,GAAAA,GATN,KASgC,GA8B/C,MAAO,CACLJ,aACAC,mBA9BwB1pD,EAAAA,GAAAA,IAAgB,CAAC6zB,EAA2Bi0B,KACpE6B,IAEKv7G,SAASmgC,KAAKs/C,UAAUC,SAAS,2BACpCyS,EAAAA,GAAAA,KAAgB,KACdnyF,SAASmgC,KAAKs/C,UAAUv7E,IAAI,wBAAwB,IAIxDs3G,GAAa,KACX,MAAME,EAwBZ,SAAuBj2B,EAAwBi0B,GAC7C,MAAMiC,EAAcl2B,EAAU1wC,iBAAiC,gBACzD6mE,EAAen2B,EAAU6nB,UAE/B,OAAO7uF,MAAM7N,KAAK+qG,GAAapwG,MAAMukB,IACnC,MAAM,UAAE+rF,EAAS,aAAEzO,GAAiBt9E,EAC9BolF,EAAM2G,EAAYD,EACxB,OAAQxO,GAAgB8H,GAAOA,IAAQwE,EAlDb,GADX,GAmDsE,GAEzF,CAjC0BoC,CAAcr2B,EAAWi0B,GACzCgC,IACFvpB,EAAAA,GAAAA,KAAgB,KACdupB,EAAYj8B,UAAUv7E,IAAI,QAAQ,KAItCiuF,EAAAA,GAAAA,KAAgB,KACd,MAAM4pB,EAAe/7G,SAAS8qD,cAAc,UACxCixD,GACFA,EAAat8B,UAAU4F,OAAO,SAGhCrlF,SAASmgC,KAAKs/C,UAAU4F,OAAO,wBAAwB,GACvD,GACF,IAON,CFmR4C22B,GAEpCC,IAAerqD,EAAAA,GAAAA,IAAgB,KACnC,GAAI6oD,GAA0B92F,QAE5B,YADA82F,GAA0B92F,SAAU,GAItC,MAAM8hE,EAAY3R,GAAanwD,QAC1B8hE,IAIA+0B,GAAkB72F,SACrB23F,GAAkB71B,EAAWi0B,GAG/BZ,IAAsB,KACpB,MAAMn9G,GAASmJ,EAAAA,EAAAA,MACiB+0G,OAAiCh+G,EAAAA,EAAAA,KAAeF,GAAQ6jG,gBAAgBtiG,QAEtGkoG,EAA2B,CAAE8W,aAAa,IAGvCz2B,EAAU3T,gBAIfqoC,GAAgBx2F,QAAU8hE,EAAU4nB,aAAe5nB,EAAU6nB,UAEhD,WAATz6F,GACFinG,EAAgB,CAAE58G,SAAQ2E,WAAUyuC,aAAc6pE,GAAgBx2F,UACpE,IACA,KAGGovF,GAAoBoJ,IGjWd,SAA4BroC,EAAyCsoC,GAClF,MAAOrJ,EAAoBsJ,IAAsB9f,EAAAA,GAAAA,KAG3CqQ,GAAeh7C,EAAAA,GAAAA,IAAiBi7C,IACpCwP,EAAmBxP,EAAMG,YAAYtqD,OAAO,KAG9C8qD,EAAAA,GAAAA,GAAkB15B,EAAc84B,IAEhCvgD,EAAAA,GAAAA,KAAU,KACR,MAAMiwD,EAAsB33G,OAAOmvE,EAAanwD,QAASmxF,QAAQyH,eAAiB,EAC5Ez4B,EAAkBivB,IAEpBjvB,GAAmBA,EAAkBw4B,GAAuBF,IAC9DtoC,EAAanwD,QAASmxF,QAAQyH,aAAe/2G,OAAOs+E,GACtD,GACC,CAACs4B,EAAmBtoC,EAAci/B,IAErC,MAAMyJ,GAAsBtsD,EAAAA,GAAAA,MAE5B,MAAO,CAAC6iD,EAAoByJ,EAC9B,CH2UuDC,CAAmB3oC,GAAc5C,IAAYooC,IAGlGjtD,EAAAA,GAAAA,KAAU,KACR,IAAK+uD,KAAmBjC,GAAgBrnG,GAAgBmnG,EACtD,OAKF,GAD2BjwG,IAAcgJ,EAAAA,EAAAA,IAAiBhJ,EAAWA,EAAW3L,OAAS,IAEvF,OAGF,MAAMooF,EAAY3R,GAAanwD,UAE1B3a,GACHA,EAAW3L,OAASyR,EAAAA,IAAqB,GACrC22E,EAAUmM,kBAAqC8qB,cAAgBj3B,EAAU2nB,eAE7EgO,IACF,GACC,CAACjC,EAAcnwG,EAAYoyG,GAAgBnC,EAAYnnG,IAE1D,MAAM6qG,IAA4B/yC,EAAAA,GAAAA,IAAY,KAC5C,IAAK5gE,IAAeuxG,GAAoB52F,QACtC,OAGF,MAAMi5F,EAAwBrC,GAAoB52F,QAC/CrmB,QAAQmjF,GAAYz3E,EAAWlK,SAAS6F,OAAO87E,EAAQq0B,QAAQ5zG,cAI5D6vG,EAAS6L,EAAsB,IAAMA,EAAsB,GAC5D7L,IAILqC,GAAYzvF,QAAUotF,EAAOlzG,GAC7By8G,GAAa32F,QAAUotF,EAAO9xB,wBAAwBi2B,IAAG,KAG3DzrC,EAAAA,GAAAA,IACE,KAAMozC,EAAAA,GAAAA,KAAa,IAAMF,GAA0Bh5F,aAEnD,CAAC3a,EAAYgqG,EAAkB0G,EAAUiD,MAE3CtwD,EAAAA,GAAAA,KACE,IAAMswD,GAA0Bh5F,WAEhC,CAACovF,GAAoB4J,MAIvB7uB,EAAAA,GAAAA,IAA4B,EAAEqpB,EAAgB2F,MAM5C,MAAMh5B,EAAkBivB,KAClByJ,EAAsBL,GAAuBx4F,QAInD,GAHAw4F,GAAuBx4F,QAAUmgE,EAI/B96E,IAAemuG,GACZnE,IAAqB8J,GACrBh5B,IAAoB04B,QACIl+G,IAAxBk+G,EAEH,OAGF,MAAM/2B,EAAY3R,GAAanwD,QAC/B42F,GAAoB52F,QAAUlF,MAAM7N,KAAK60E,EAAU1wC,iBAAiC,uBACpF,MAAMgoE,EAAkBxC,GAAoB52F,QAAQ42F,GAAoB52F,QAAQtmB,OAAS,GACnF2/G,EAAqB7X,GAAqBxhF,QAC5C8hE,EAAU36B,cAA+B,KAAGw5B,EAAAA,EAAAA,IAAiB6gB,GAAqBxhF,iBAClFrlB,EAEE2+G,EACJj0G,GAAcmuG,GAAkBnuG,EAAWA,EAAW3L,OAAS,KAAO85G,EAAeA,EAAe95G,OAAS,GAEzG6/G,EACJl0G,IAAa,KAAOmuG,IAAiB,IAAMnuG,GAAY3L,SAAYyR,EAAAA,IAAqB,EAAI,EAExFquG,EAAkBF,IAA0BC,EAIhDlK,GACGmK,GACCn0G,GAAcA,EAAW3L,OAASyR,EAAAA,IAAqB,IACvD22E,EAAU3T,cAAe2N,UAAUC,SAAS,2BAC7Cm9B,EAAAA,GAAAA,KAAa,IACbp3B,EAAUmM,kBAAsC8qB,cAAyC,EAAzBj3B,EAAU2nB,kBAG7EgQ,EAAAA,GAAAA,IAAc33B,EAAU3T,cAAgB,yBACxC2T,EAAU3T,cAAe2N,UAAUv7E,IAAI,yBAEvCW,YAAW,KACL4gF,EAAU3T,gBACZurC,EAAAA,GAAAA,IAAiB53B,EAAU3T,cAAgB,wBAC7C,GA1U2B,OA8U/BwrC,EAAAA,GAAAA,KAAoB,KAClB,MAAM,UAAEhQ,EAAS,aAAED,EAAY,aAAED,GAAiB3nB,EAC5Cn1C,EAAe6pE,GAAgBx2F,QAErC,IAAI45F,EAAejtE,GAAgBksE,GAAuBpP,GACtD+P,IAKFI,GADuBR,EAAkBA,EAAgB3P,aAAe,GAG1E,MAAM0I,EAAa9C,GAAoB8J,GAAwBS,GA9V5C,GA+VbC,EAAoBx0G,GAAcwxG,GAAkB72F,UAAY3a,EAAWA,EAAW3L,OAAS,GAGjG8/G,GAAmBrH,IAAe0H,IAEpCp+B,EAAAA,GAAAA,KAAe,KACb,MAAMq+B,IAAwBlJ,EAAAA,GAAAA,OAA6ByI,GAE3D/qC,EAAAA,GAAAA,IACEwT,EACAg4B,EAAuBV,EAAmBC,EAC1CS,EAAuB,MAAQ,QArWf,QAuWhBn/G,OACAA,EACAi7G,EAA4B,OAAIj7G,EACjC,IAIL,MAAMo/G,OAAoCp/G,IAAxBk+G,GAAqCA,IAAwB14B,EAC/E,GAAI45B,IAAazQ,EAAAA,GAAAA,MACf,OAGF,MAAM8D,EAASqC,GAAYzvF,SAAW8hE,EAAU36B,cAAe,IAAGsoD,GAAYzvF,WACxEmzF,GACH/F,GACEsC,GAA6B1vF,SAC7B8hE,EAAU36B,cAA+B,mBAG9C,IAAI6yD,EACJ,GAAI7H,GAAc4H,EAChBC,EAAetQ,EAAeD,OACzB,GAAI2D,EAAQ,CACjB,MAAM6M,EAAe7M,EAAO9xB,wBAAwBi2B,IACpDyI,EAAerQ,GAAasQ,GAAgBtD,GAAa32F,SAAW,GACtE,MACEg6F,EADS7G,EACMx6G,KAAKC,IAClBu6G,EAAc+E,WAAanC,EArYC,GADX,IAuYjBrM,EAAe/8D,GAGF+8D,EAAe/8D,EAGhC,MAAO,MACLutE,EAAAA,GAAAA,GAAYp4B,EAAWnpF,KAAKwhH,KAAKH,KACjCI,EAAAA,GAAAA,MAEA5D,GAAgBx2F,QAAUrnB,KAAKE,IAAIF,KAAKwhH,KAAKzQ,EAAesQ,GAAevQ,GAEtEoN,GAAkB72F,UACrB82F,GAA0B92F,SAAU,GAEpCy7D,EAAAA,GAAAA,KAAe,KACbq7B,GAA0B92F,SAAU,CAAK,IAIR,CAItC,GACD,GAED,CAAC3a,EAAYgqG,EAAkB0G,EAAU3G,GAAoBoJ,GAAwB5C,KAExF1/C,EAAAA,GAAAA,IAAsB,EAAEmkD,WACS1/G,IAA3B0/G,IACF9Q,EAAAA,GAAAA,IAjaiC,IAia4Bp+D,EAAAA,IAC/D,GACC,CAACwqE,IAEJ,MAAMrmF,GAAYhhB,QAAQ/U,IAAU6M,EAAAA,EAAAA,IAAS7M,IACvCg2G,GAAYjhG,SAAUghB,KAAckgF,GAAkB5gC,GAAkButB,GAAiBE,GACzFtpB,GAAYzkE,SAASihG,IAAaC,GAClC8K,IAAuBl0G,EAAAA,EAAAA,IAAS7M,KAAYq1E,IAAmB4+B,IAAUnR,KAGxE8S,KAAkB/rG,GAAeiC,KAE7BuxG,GAAoB52F,SAAkD,IAAvC42F,GAAoB52F,QAAQtmB,SAEvC,IAAvB2L,GAAY3L,QAAwE,kBAAxDyM,IAAed,EAAW,KAAKpJ,QAAQwG,QAAQyM,MACpC,kBAAvC9L,GAAanH,SAASwG,QAAQyM,MAGhC4lG,GAAyBW,GAAeC,GAClB,IAAvBrwG,GAAY3L,QAAwE,eAAxDyM,IAAed,EAAW,KAAKpJ,QAAQwG,QAAQyM,KAC1EqrG,GAAsC,IAAvBl1G,GAAY3L,QAC4B,gBAAxDyM,IAAed,EAAW,KAAKpJ,QAAQwG,QAAQyM,KAE9C4Q,IAAY0pC,EAAAA,GAAAA,GAChB,4BACAupB,IAAa,cACZxF,GAAW,cACH,WAATr+D,GAAqB,cACrB8mG,GAAmB,oBACnBC,GAAiB,kBACjBN,GAAsB,qBACtB+B,IAAc,YACb/H,GAAW,eACZqH,IAAqB,gBAGjBwD,GAAen1G,GAAc8pG,IAAkB/rG,EAErD,OACEykD,GAAAA,GAAAC,cAAA,OACEqI,IAAKggB,GACLrwD,UAAWA,GACX26F,SAAUnC,GACVltC,YAAayQ,GAAAA,GAEZ1tE,EACC05C,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,SACb+nC,GAAAA,GAAAC,cAAA,YACGutD,EAAoBA,EAAkBpxG,KAAQ,sBAAoBurG,EAAgB,UAAY,UAGjGhC,IAAUgN,GACZ3yD,GAAAA,GAAAC,cAAC2oB,GAAkB,CAACl3E,OAAQA,IAC1B+gH,GACFzyD,GAAAA,GAAAC,cAACmoB,GAAe,CAAC1gE,OAAQhW,IACvB8L,KAAgB8pG,IAAiB2F,IAA0ByF,IAC7D1yD,GAAAA,GAAAC,cAAC+sD,GAAU,CACTt7G,OAAQA,EACRmG,MAAOA,EACPwP,KAAMA,EACN0/D,eAAgBA,EAChBkmC,uBAAwBA,KAExB0F,GACF3yD,GAAAA,GAAAC,cAAConD,GAAkB,CACjBv5F,qBAAsBA,EACtBpc,OAAQA,EACRqqF,WAAYA,EACZ4rB,cAAeA,EACf/jG,cAAeA,GACfpG,WAAYA,GAAc,CAACjC,EAAalJ,IACxCi1G,cAAeA,IAAiBzgC,GAAc,CAACtrE,IAC/CgsG,mBAAoBA,GACpBC,iBAAkB/gG,QAAQ+gG,GAC1Bj7F,SAAU9F,QAAQ7P,GAClB6wG,cAAeA,EACfC,UAAWA,GACXx8B,UAAWA,GACX5C,aAAcA,GACds/B,YAAaA,GACbC,6BAA8BA,GAC9BlO,qBAAsBA,GACtBtjG,SAAUA,EACVgR,KAAMA,EACNygG,QAASA,EACTnP,cAAeA,EACfoP,aAAYT,IAAyB,cAATjgG,EAC5B2gG,oBAAqBrC,EACrBlL,uBAAwB6M,KAAkB4H,GAA2B/2F,QACrE8vF,YAAaA,EACbC,cAAeA,EACftO,2BAA4BA,IAG9B55C,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,CAACuB,MAAM,QAAQqwD,gBAAgB,SAErC,KI1nBV,GARiDlzD,IAC/C,MAAM,SAAE7V,GAAa6V,EACfmzD,GAAuBjzD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,wBAAyBxW,GAGrF,OAAOgpE,EAAuB9yD,GAAAA,GAAAC,cAAC6yD,EAAyBnzD,QAAY7sD,CAAS,E,0ECoB/E,MA0IA,IAAe0tD,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KAClB,CAAC9yD,GAAUuB,aAAQ,CACjBO,cAAe9B,EAAO8B,cACtBgB,MAAM+C,EAAAA,EAAAA,KAAW7F,EAAQuB,GACzB6Q,MAAMC,EAAAA,EAAAA,KAAWrS,EAAQuB,MAJTuxD,EA1I+B8vD,EACjDrhH,SAAQumB,YAAWhlB,OAAMsP,OAAMqd,WAAU3tB,oBAEzC,MAAM,qBACJ+gH,EAAoB,UACpBC,EAAS,WACTC,EAAU,WACVC,EAAU,aACVC,EAAY,eACZC,EAAc,cACdC,EAAa,mBACbC,EAAkB,oBAClBC,IACExgG,EAAAA,EAAAA,MAEEywB,GAAOge,EAAAA,GAAAA,MACNgyD,EAAsBC,EAAoBC,IAAuBlmD,EAAAA,GAAAA,MACjEmmD,EAAkBC,IAAuBryD,EAAAA,GAAAA,KAAkB,IAC3DsyD,EAAkBC,IAAuBvyD,EAAAA,GAAAA,KAAkB,IAC5D,eACJwyD,EAAc,cAAEC,EAAa,cAAEC,EAAa,gBAAEC,GAC5Cv0F,GAAY,CAAC,EACXw0F,EAAenhH,IAAQohH,EAAAA,EAAAA,IAAiBphH,GAExCqhH,GAAmBluD,EAAAA,GAAAA,IAAgB,KACvC4sD,EAAqB,CAAEtrG,OAAQhW,IAC3BsiH,GACFT,EAAmB,CAAElhH,GAAIX,GAC3B,IAGI6iH,GAAqBnuD,EAAAA,GAAAA,IAAgB,KACzCutD,IACAV,EAAU,CAAEvrG,OAAQhW,IAChBuiH,GAAiBL,GACnBV,EAAW,CAAExhH,WAEXoiH,GACFX,EAAW,CAAEzhH,UACf,IAGI8iH,GAAyBpuD,EAAAA,GAAAA,IAAgB,KAC7CotD,EAAoB,CAAE9hH,UAAS,IAG3B+iH,GAAuBruD,EAAAA,GAAAA,IAAgB,KAC3CutD,IACAT,EAAW,CAAExhH,WACT0iH,GACFf,EAAe,CAAE3hH,SAAQgW,OAAQzV,IACjCqhH,EAAc,CAAE5hH,SAAQuZ,oBAAoB,KAE5CmoG,EAAa,CAAE1hH,UACjB,IAGF,GAAKkuB,IAAc3sB,GAASsP,GAI5B,OACEy9C,GAAAA,GAAAC,cAAA,OAAKhoC,WAAW0pC,EAAAA,GAAAA,GAAe,kBAAmB1pC,GAAYoqC,IAAK5e,EAAK6e,MAAQ,WAAQxvD,GACrFohH,GACCl0D,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL8rC,QAAM,EACN93B,OAAK,EACLzf,KAAK,OACL7+B,UAAU,0BACVmqC,QAASkyD,GAER7wE,EAAK,wBAGT0wE,GACCn0D,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLC,MAAM,SACN6rC,QAAM,EACN93B,OAAK,EACLzf,KAAK,OACL7+B,UAAU,0BACVmqC,QAASsxD,GAERjwE,EAAK,0BAGTwwE,IAAkBE,GACjBn0D,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLC,MAAM,SACN6rC,QAAM,EACN93B,OAAK,EACLzf,KAAK,OACL7+B,UAAU,0BACVmqC,QAASsxD,GAERjwE,EAAK,8BAGVuc,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7+C,OAAK,EACLirD,QAAM,EACN7X,KAAK,OACL0L,MAAM,cACNJ,QAASoyD,EACT/xD,UAAWhf,EAAK,UAEhBuc,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,qBAEf+nC,GAAAA,GAAAC,cAAC+/B,GAAAA,EAAa,CACZ3pD,OAAQo9E,EACR1wD,QAAS4wD,EACT57F,MAAO0rB,EAAK,iBAAkBlhC,GAAO0d,EAAAA,EAAAA,IAAuB1d,IAAQ4sC,EAAAA,EAAAA,GAAa1L,EAAMxwC,IACvFmJ,KAAMmG,EACFkhC,EAAK,mCAAmC15B,EAAAA,EAAAA,IAAgBxH,IACxDkhC,EAAK,mCACTixE,sBAAoB,EACpBC,aAAclxE,EAAK,SACnBy8C,eAAgB39E,EAAOgyG,EAAqBE,GAE3ClyG,GACCy9C,GAAAA,GAAAC,cAAC20D,GAAAA,EAAQ,CACPnoD,MAAOhpB,EAAK,kBACZipB,QAASonD,EACTe,QAASd,IAGZxxG,GAAQ0xG,GACPj0D,GAAAA,GAAAC,cAAC20D,GAAAA,EAAQ,CACPnoD,MAAOhpB,EAAK,cACZipB,QAASknD,EACTiB,QAAShB,KAIX,K,uCCvKV,UAAgB,wBAAwB,uBAAuB,oBAAsB,uBAAuB,kCAAkC,uBAAuB,4BAA8B,uBAAuB,gCAAgC,uBAAuB,2BAA6B,uBAAuB,6BAA6B,uBAAuB,wBAA0B,wBC2LnZ,SAASiB,GAAS1kH,EAAWgpC,EAAWxoC,EAAesmD,EAAgB69D,GACrE,MAAQ,IAAG3kH,KAAKgpC,EAAI27E,KAAUA,KAAUA,eACtCnkH,OAAWsmD,EAAS,EAAI69D,KAAUA,KAAUA,YAAiBnkH,MACjE,CAoCA,UAAe4vD,EAAAA,GAAAA,KAhN+Bw0D,EAC5CtoG,QAAOzH,YAGP,MAAMqjE,GAAe5jB,EAAAA,GAAAA,IAAuB,MAEtCuwD,GAAejzD,EAAAA,GAAAA,KAAQ,IAmF/B,SAAyBt1C,EAAezH,GACtC,MAAMiwG,EAAexoG,EAAQzH,EAAQ,EAC/BkwG,EAmBR,SAAsBzoG,GACpB,IAAIyoG,EAAY,EAahB,OAZc,IAAVzoG,EACFyoG,EAAY,GACO,IAAVzoG,EACTyoG,EAAY,GACO,IAAVzoG,EACTyoG,EAAY,IACO,IAAVzoG,GAEAA,EAAQ,KADjByoG,EAAY,KAKPA,CACT,CAlCoBC,CAAa1oG,GACzB2oG,EAmCR,SAAuB3oG,EAAezH,GACpC,IAAIkwG,EAAY,GAahB,OAZc,IAAVzoG,EACFyoG,EAAY,GACO,IAAVzoG,EACTyoG,EAAY,GACO,IAAVzoG,EACTyoG,EAAsB,IAAVlwG,EAAc,GAAK,IACZ,IAAVyH,GAEAA,EAAQ,KADjByoG,EAAY,KAKPA,CACT,CAlDqBG,CAAc5oG,EAAOwoG,GAClCK,EAmDR,SAAwB7oG,EAAeyoG,GACrC,OAAOzoG,GAAS,EAAI,GAAKyoG,EAAYzoG,EAAQ,GAAKA,EAAQ,EAC5D,CArDsB8oG,CAAe9oG,EAAOyoG,GAEpCM,EAAc,WAAU/oG,IACxBgpG,EAoDR,SAAqBrjH,EAAY8iH,EAAmBzoG,GAGlD,IAAI83E,EAAI,GACR,GAAc,IAAV93E,EACF83E,EAAIswB,GAAS,EAAG,EAAG,EAAGK,EAJT,GAKTL,GAAS,EAAG,GAAI,EAAGK,EAAY,EALtB,GAMTL,GAAS,EAAG,GAAI,EAAGK,EANV,QAQb,IAAK,IAAIrhH,EAAI,EAAGA,EAAI4Y,EAAO5Y,IACzB0wF,GAAKswB,GAAS,GAAIK,EAAY,GAAKrhH,EAAG,EAAGqhH,EAT9B,GAaf,MACG,iBAAgB9iH,uBACJmyF,wBAGjB,CAvEmBmxB,CAAYF,EAAYN,EAAWzoG,GAE9CkpG,EA4ER,SAA2B3wG,EAAekwG,EAAmBzoG,GAC3D,OAAc,IAAVA,EACK,EACY,IAAVA,EACQ,IAAVzH,EAAc,EAAIkwG,EAAY,EAGzB,IAAVzoG,EACY,IAAVzH,EACK,EACY,IAAVA,EACF,GAGF,IAECkwG,EAAY,GAAKlwG,CAE7B,CA9FyB4wG,CAAkBX,EAAcC,EAAWzoG,GAC5DopG,EA+FR,SAA4B7wG,EAAeyH,EAAeyoG,EAAmBI,GAC3E,OAAI7oG,GAAS,GAITzH,GAAS,EAHJ,EAKEA,GAASyH,EAAQ,EACnB6oG,EAAc,IAGfJ,EAAY,GAAK,GAAKlwG,EAAQ,IAAMkwG,EAAY,EAC1D,CA3G0BY,CAAmBb,EAAcxoG,EAAOyoG,EAAWI,GAC3E,MAAO,CACLF,aACAK,WACAE,iBACAE,kBACAP,cACAE,aAEJ,CArGWO,CAAgBtpG,EAAOzH,IAC7B,CAACyH,EAAOzH,IAyCX,IAvCAwhF,EAAAA,GAAAA,KAAgB,KACd,IAAKne,EAAanwD,QAChB,OAGF,MAAM,YACJo9F,EAAW,gBACXO,EAAe,WACfT,EAAU,eACVO,EAAc,WACdH,EAAU,SACVC,GACET,EAEEgB,EAAa3tC,EAAanwD,QAAQiuE,kBACxC,GAAI9d,GAAcnwD,QAAS,CACzB,MAAM+9F,EAAiB5tC,EAAanwD,SAC9B,MAAEqxD,GAAU0sC,EAClB1sC,EAAMtyB,OAAU,GAAEq+D,MAClB/rC,EAAMge,UAAa,eAAcsuB,OACjCtsC,EAAMksC,SAAY,SAAQD,MAC1B,MAAMU,EAAMD,EAAe52D,cAAc,OACnC82D,EAAMF,EAAe52D,cAAc,OACnC+2D,EAAOH,EAAe52D,cAAc,QACrC62D,GACCF,IACFA,EAAWK,UAAa,oCAAmCZ,mBAG3DW,IACFA,EAAKC,UAAYZ,GAEfU,IACFA,EAAI5sC,MAAMtyB,OAAU,GAAEm+D,MACtBe,EAAI5sC,MAAMge,UAAa,cAAaouB,OAExC,IACC,CAACX,IAEU,IAAVvoG,EACF,OACEszC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAWyuD,GAAO6vC,qBACrBv2D,GAAAA,GAAAC,cAAA,OACEhoC,UAAWyuD,GAAO8vC,4BAClBluD,IAAKggB,KAMb,MAAM,YACJitC,EAAW,gBAAEO,EAAe,WAAET,EAAU,eAAEO,EAAc,WAAEH,GACxDR,EAEJ,OACEj1D,GAAAA,GAAAC,cAAA,OAAKhoC,WAAW0pC,EAAAA,GAAAA,GACd+kB,GAAO6vC,oBACP7pG,EArEoB,GAqESg6D,GAAO+vC,0BAGpCz2D,GAAAA,GAAAC,cAAA,OACEhoC,UAAWyuD,GAAOgwC,2BAClBpuD,IAAKggB,EACLkB,MACG,oBAAmBisC,uCACVF,+BAAyCO,SAGrD91D,GAAAA,GAAAC,cAAA,aACAD,GAAAA,GAAAC,cAAA,OACEhoC,UAAWyuD,GAAOiwC,wBAClBntC,MAAQ,aAAY6rC,uBAAgCO,2BAC1BE,UAG1B,ICvGV,GAAyK,uBAAzK,GAAoN,uBCmC9Mc,GAAa,MAAQ/mH,EAAAA,GA4K3B,IAAe2wD,EAAAA,GAAAA,KA7J2Bq2D,EACxC1lH,UAASub,QAAOzH,QAAO2+F,cAAa3rF,YAAW6+F,iBAAgB10D,UAAS20D,mBACxEn+F,YAAWo+F,kBAEX,MAAM,qBAAEl6B,IAAyB9pE,EAAAA,EAAAA,MAC3BywB,GAAOge,EAAAA,GAAAA,KAEPo0B,GAAiBohC,EAAAA,GAAAA,GAAa9lH,GAC9BwkF,GAAelV,EAAAA,GAAAA,IAASR,EAAAA,EAAAA,IAAoB9uE,EAAS,cACrDkmD,GAAY6/D,EAAAA,EAAAA,IAAoB/lH,GAEhCgmH,GADkBx7B,EAAAA,GAAAA,GAAkB,CAAC/iE,GA1BnB,MA2BoBA,GAErCw+F,EAAmBC,EAAiBC,IAAoB7pD,EAAAA,GAAAA,KAEzD8pD,GAAqBnxD,EAAAA,GAAAA,IAAgB,KACzCkxD,IAEIR,GACFA,EAAe3lH,EAAQkB,GACzB,IAGImlH,GAAeC,EAAAA,EAAAA,IAA6BtmH,GAE5CumH,GAA0BtxD,EAAAA,GAAAA,IAAgB,KAC1CoxD,GACF16B,EAAqB,CAAEpnF,UAAWvE,EAAQkB,GAAIq5B,OAAQ8rF,GACxD,KAGKG,EAAcC,EAAkBC,IAAsBpqD,EAAAA,GAAAA,MAEvD,YAAEiV,EAAW,gBAAEqR,IAAoBiC,EAAAA,GAAAA,GAAa5zB,GAwBtD,OACEpC,GAAAA,GAAAC,cAAA,OAAKhoC,WAAW0pC,EAAAA,GAAAA,GACd,6BD7GiB,uBC6G0Bq1D,GAAe,aAAc/+F,KAGtEvL,EAAQ,GAAKyqG,IACbn3D,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7+C,OAAK,EACLozC,KAAK,UACL0L,MAAM,cACNC,UAAWhf,EAAK,gCAChB2e,QAAU+0D,OAAsCrkH,EAAnBikH,GAE5Bn+F,GACConC,GAAAA,GAAAC,cAAC2J,GAAAA,EAAO,CACNpH,MAAM,OACNvqC,WAAW0pC,EAAAA,GAAAA,GD3H2G,uBC4HpG+kB,IAAqBywC,GAAoBzwC,MAI/D1mB,GAAAA,GAAAC,cAAA,KACEhoC,WAAW0pC,EAAAA,GAAAA,GACT,OAAQ,gBAAiB+kB,GAAoBywC,GAAoBzwC,OAKxEowC,GACC92D,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7+C,OAAK,EACLozC,KAAK,UACL0L,MAAM,cACNC,UAAWhf,EAAK,0BAChB2e,QAASi1D,GAETr3D,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,qBAGjB+nC,GAAAA,GAAAC,cAAC+/B,GAAAA,EAAa,CACZ3pD,OAAQ+gF,EACRr0D,QAASu0D,EACTl7G,KAAK,wCACLu4G,aAAa,QACbz0B,eAAgBq3B,IAElBv3D,GAAAA,GAAAC,cAAA,OACEhoC,WAAW0pC,EAAAA,GAAAA,GD1J2C,uBC0JNg2D,GD1J+N,wBC2J/Qv1D,QAASsgB,EACTa,YAAawQ,EACb1xB,IAAK5e,EAAK6e,MAAQ,WAAQxvD,GAE1BktD,GAAAA,GAAAC,cAAC+0D,GAAuB,CACtBtoG,MAAOA,EACPzH,MAAOA,IAET+6C,GAAAA,GAAAC,cAACoI,GAAAA,GAAU,CAACE,UAAWp3D,EAAQkB,GAAI4+B,KAAK,gBAAgBhZ,UDnK4b,wBCqF1f,SAAyBurE,EAAuB9uF,EAAkBgvF,GAChE,MAAM,MAAE9yF,EAAK,OAAEsmD,IAAWi/B,EAAAA,EAAAA,MACpBD,EAASxhF,GAAW8uF,EAE1B,OACExjC,GAAAA,GAAAC,cAAA,OAAKhoC,UD1FshB,wBC2FxhBurE,IAAiBE,GAChB1jC,GAAAA,GAAAC,cAAA,OACEhoC,UD7F+jB,uBC8F/jBspD,IAAK2U,EACLtlF,MAAOA,EACPsmD,OAAQA,EACRuyB,IAAI,GACJ2M,WAAW,IAGdoN,GACIxjC,GAAAA,GAAAC,cAACsjC,GAAAA,EAAY,CAACC,aAActN,EAAQuN,UAAWh9E,QAAQi9E,GAAU9yF,MAAOA,EAAOsmD,OAAQA,IAGlG,CA2DSm/B,CACCR,EACAF,EACAt+B,IAGJ2I,GAAAA,GAAAC,cAAA,OAAKhoC,WAAW0pC,EAAAA,GAAAA,GD1K2E,uBC0KxCk0B,GD1K8S,yBC2K/V71B,GAAAA,GAAAC,cAAA,OAAKhoC,UD3KyX,uBC2KhWoqC,IAAI,SAC9BuhD,GACA5jD,GAAAA,GAAAC,cAACk8B,GAAAA,EAAe,CAAC//E,KAAO,GAAEqnC,EAAK,oBAAoBx+B,EAAQ,EAAK,KAAGyH,EAAQzH,GAAU,OAGtF2+F,IAAelgC,EAAAA,GAAAA,GAAWkgC,IAE7B5jD,GAAAA,GAAAC,cAACoI,GAAAA,GAAU,CAACE,UAAWp3D,EAAQkB,GAAI4+B,KAAK,oBAAoBhZ,UDlLgQ,wBCmL1T+nC,GAAAA,GAAAC,cAAA,KAAGoC,IAAI,OAAOpqC,UDnL+Y,wBCoL3Z+nC,GAAAA,GAAAC,cAAC63D,GAAAA,EAAc,CACbr0E,KAAMA,EACNtyC,QAASA,EACT4mH,QAAStxG,QAAQovE,GACjB+qB,UAAWgW,QAKnB52D,GAAAA,GAAAC,cAAC6jB,GAAAA,EAAY,MACZ0zC,GACCx3D,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLzL,KAAK,OACL7+B,UDjMmc,uBCkMncmqC,QAASs1D,EACTM,uBAAqB,EACrB/hD,aAAenuB,EAAAA,QAAkCh1C,EAAnB8kH,EAC9B1hD,aAAepuB,EAAAA,QAAoCh1C,EAArB+kH,GAE7BL,EAAap7G,OAIhB,ICgUV,IAAeokD,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KAClB,CAAC9yD,GACCuB,SAAQ2E,WAAU8T,kBAAiB6jD,eAEnC,MAAM,kBACJ19D,EAAiB,4BAAEizD,EAA2B,YAAElgC,EAAW,aAAE6mB,IAC3D75C,EAAAA,EAAAA,KAAeF,GACb8C,GAAO+C,EAAAA,EAAAA,KAAW7F,EAAQuB,IAExBA,OAAQyxB,EAAaztB,UAAW0tB,GAAmBC,EACrD40F,EAAe90F,GAAeC,GAChC1vB,EAAAA,EAAAA,KAAkBvD,EAAQgzB,EAAaC,QACvCtwB,EAEJ,IAAIwE,EACJ,GAAwB,WAApB6S,EAA8B,CAChC,MAAMrM,GAAYC,EAAAA,EAAAA,KAAgB5N,EAAQuB,EAAQ2E,GAClDiB,EAAgBwG,GAAWjM,MAC7B,MAAO,GAAwB,cAApBsY,EAAiC,CAC1C,MAAMlO,GAAeC,EAAAA,EAAAA,KAAmB/L,EAAQuB,EAAQ2E,GACxDiB,EAAgB2E,GAAcpK,MAChC,MAAO,GAAwB,WAApBsY,GAAgC9T,IAAaD,EAAAA,GAAgB,CACtE,MAAMhB,GAAa4D,EAAAA,EAAAA,KAAiB7I,EAAQuB,EAAQ2E,GACpDiB,EAAgBlC,GAAYkC,eAAiB,CAC/C,CAEA,MAAM4gH,EAAmC,WAApB/tG,GAAgC9T,IAAaD,EAAAA,GAC5D+hH,EAAgBllH,IAAQmlH,EAAAA,EAAAA,KAAoBjoH,EAAQ8C,GACpDolH,EAAgB5xG,QAAQ0xG,IAAiBG,EAAAA,EAAAA,KAAoBnoH,EAAQuB,IACrE6mH,EAAcJ,IAAkBE,GAAiB5xG,SAAQ+xG,EAAAA,EAAAA,KAA0BroH,EAAQuB,IAC3F+mH,EAAehyG,QACnBxT,IAASilH,GAAgBjlH,EAAK6E,YAAaqT,EAAAA,EAAAA,IAAclY,KAASylH,EAAAA,EAAAA,IAAiBzlH,KAAUA,EAAKkmD,aAE9Fw/D,EAAwBlyG,QAAQxT,GAAMkmD,aAAelmD,EAAK2lH,eAC1Dt/D,GAAeE,EAAAA,EAAAA,KAAkBrpD,EAAQuB,EAAQ2E,EAAU,gBAE3D4xB,EAAch1B,GAAMg1B,YACpB4wF,EAAqB5wF,GAAe93B,EAAO4e,aAAarX,KAAKuwB,EAAYnZ,YAEzElL,GAAgB/J,EAAAA,EAAAA,IAAiBnI,EAAQ2E,EAAUlG,EAAO8B,eAE1DgrC,EAAoB,CACxBqc,eACAhpD,oBACAwoH,oBAAoBlzE,EAAAA,EAAAA,KAAyBz1C,EAAQ69D,GACrD8/C,oBAAoB92B,EAAAA,EAAAA,KAAqB7mF,GACzC8nH,eACAhlH,OACAqE,gBACAyvE,gBAAgBntE,EAAAA,EAAAA,KAAqBzJ,EAAQuB,GAC7C6xD,8BACAw1D,qBAAsBjoH,KAAKE,IAAI,EAAGk5C,EAAar4C,OAAS,GACxDwa,gBAAiBlc,EAAOkc,gBACxBmU,UAAWrwB,EAAOqwB,UAClBgD,SAAUrzB,EAAOqzB,SACjBC,qBAAsBtzB,EAAOszB,qBAC7Bo1F,qBACAG,kBAAmBT,GAAeF,GAAiBI,GAAgBE,EACnE/0G,iBAGItF,GAAelG,EAAAA,EAAAA,KAAmBjI,EAAQuB,GAChD,GAAwB,WAApByY,IAAiC7L,EACnC,OAAO2+B,EAGT,GAAI5mC,IAAaD,EAAAA,KAAmBwN,IAAkB3Q,GAAM6E,QAAS,CACnE,MAAMmhH,EAAkB9/G,OAAO9C,GACzBlF,EAAU8nH,GAAkBvlH,EAAAA,EAAAA,KAAkBvD,EAAQuB,EAAQunH,QAAmBnmH,EACjFomH,EAAmB/nH,GAAUusF,EAAAA,EAAAA,KAAsBvtF,EAAQgB,QAAW2B,EAE5E,MAAO,IACFmqC,EACH4I,iBAAkBozE,EAClB36G,eACA66G,UAAU,EACVD,mBAEJ,CAEA,MAAMrzE,EAAoBjiC,OAA4D9Q,GAA5CiL,EAAAA,EAAAA,KAAgB5N,EAAQuB,EAAQ2E,GAC1E,GAAIwvC,GAAkBh0C,OAAQ,CAC5B,MAAMunH,EAAqB96G,EAAaunC,EAAiB,KACnD,SACJszE,GAAW,GAEXC,GAC+B,IAA5BvzE,EAAiBh0C,SACjB6xC,EAAAA,EAAAA,KAA4BvzC,EAAQipH,EAAoB/iH,IACxD,CAAC,EAEN,MAAO,IACF4mC,EACH4I,mBACAvnC,eACA66G,WAEJ,CAEA,OAAOl8E,CAAK,GAnGIgmB,EApZ4Bo2D,EAC9C3nH,SACA2E,WACA8T,kBACA29F,UACA95C,WACAnoB,mBACAvnC,eACA66G,WACAD,mBACA5/D,eACAw0D,qBACAx9G,oBACAwoH,qBACAb,eACAhlH,OACAqE,gBACAykF,aACAhV,iBACAiyC,oBACAz1D,8BACAw1D,uBACA1sG,kBACAmU,YACAgD,WACAC,uBACA61F,0BACAC,qBACAV,qBACAj1G,gBACA41G,2BAEA,MAAM,mBACJC,EAAkB,WAClBC,EAAU,aACVz+G,EAAY,SACZuQ,EAAQ,iBACRmuG,EAAgB,mBAChBC,EAAkB,iBAClBC,EAAgB,sBAChB7nG,EAAqB,iBACrB4pC,EAAgB,WAChB9pC,EAAU,eACVwgF,IACEt/E,EAAAA,EAAAA,MAEEywB,GAAOge,EAAAA,GAAAA,KACPq4D,GAAqBp1D,EAAAA,GAAAA,KAAO,IAC5B,SAAEq1D,IAAa9rD,EAAAA,EAAAA,MAGf+rD,GADuBC,EAAAA,GAAAA,GAAgBX,GACI,GAAE5nH,KAAU2E,MAAe,EACtE6jH,GAAqBD,EAAAA,GAAAA,GAAgBV,GACrCN,EAAkBhmG,MAAMgiC,QAAQpP,GAAoBA,EAAiBm0E,GAAsBn0E,EAC3Fs0E,EAAgB77G,GAAgB26G,EAAkB36G,EAAa26G,QAAmBnmH,EAClFsnH,GAAsBnnG,MAAMgiC,QAAQpP,GACtCA,EAAiBh0C,OAAUg0C,EAAmB,OAAI/yC,EAChDunH,GAAkBpnH,IAAQk8C,EAAAA,EAAAA,GAAa1L,EAAMxwC,GAAMpB,OACnDyoH,GAAkBpB,GAAmB/0E,EAAAA,EAAAA,IAAeV,EAAMy1E,QAAoBpmH,GAC9E,SAAE8sB,IAAa3sB,GAAQ,CAAC,EACxB6E,GAAU7E,GAAM6E,SAEtB+oD,EAAAA,GAAAA,KAAU,KACJr9B,GAAYskF,IAAYzxG,IAAaD,EAAAA,IAAkB0B,KACzD8hH,EAAmB,CAAEloH,SAAQ2E,YAC/B,GACC,CAAC3E,EAAQ2E,EAAUmtB,EAAUskF,EAAShwG,MAEzCkpG,EAAAA,GAAAA,GAAiBtvG,EAAQunH,EAAiBkB,GAE1C,MAAQvpH,MAAOH,KAAgB8pH,EAAAA,GAAAA,KAEzBC,GAAuB/pH,IAAeQ,EAAAA,IACtCwpH,GAAwBV,GAAYzpH,EAGpCoqH,IAAeh2D,EAAAA,GAAAA,IAAuB,MACtCi2D,IAAqBj2D,EAAAA,GAAAA,KAAgB,IAGzCge,YAAak4C,GACb7mC,gBAAiB8mC,KACf7kC,EAAAA,GAAAA,IAAczrC,IACD,cAAXA,EAAEljC,MAAyBkjC,EAAE2L,OAAmBusC,QAAQ,2BAE5Dg3B,EAAmB,CAAE/nH,SAAQ2E,YAAW,IAGpCkhH,IAAqBnxD,EAAAA,GAAAA,IAAiB1wD,IAC1CgkH,EAAW,CAAEhkH,YAAWmV,SAAS,GAAO,IAGpCiwG,IAA2B10D,EAAAA,GAAAA,IAAiB7b,IAChD,MAAM70C,EAAY60C,EAAE0c,UAAYh0C,MAAMgiC,QAAQpP,GAC1CA,GAAiBk1E,EAAAA,GAAAA,GAAcl1E,EAAiBh0C,OAAQg0C,EAAiB9C,QAAQk2E,GAAoB,IACrGA,EAEAO,EAAqB9jH,IACvBuF,EAAa,CACXvJ,SAAQ2E,WAAUX,YAAW4rC,mBAAmB,GAEpD,IAGI05E,IAAuB50D,EAAAA,GAAAA,IAAgB,KAC3Ct0C,EAAW,CAAEpgB,SAAQ2E,WAAUgR,KAAM,UAAW,IAG5C4zG,IAAsB70D,EAAAA,GAAAA,IAAgB,KAC1C/sD,YAAW,KACTygH,EAAmB3hG,SAAU,CAAI,GArJL,IAsJD,IAGzB+iG,IAAwB90D,EAAAA,GAAAA,IAAgB,KAC5CxK,EAAiB,CAAEplB,WAAY9kC,GAAS,IAGpCypH,IAA2B/0D,EAAAA,GAAAA,IAAgB,KAC/CksC,EAAe,CACb/9E,eAAgBskG,EAAoBtkG,gBACpC,IAGE6mG,IAAkBh1D,EAAAA,GAAAA,IAAiB7b,IACvC,GAAKuvE,EAAmB3hG,QAAxB,CAIA,GADA2hG,EAAmB3hG,SAAU,EACzB61C,EAAU,CACZ,MAAMqtD,EAAe7mH,SAAS8qD,cAA8Bg8D,EAAAA,KAC5DD,GAAcxyF,MAChB,CAEA,GAAIilF,EAGF,OAFA97F,SACAipG,KAIF,GAAwB,WAApB9wG,GAAyD,IAAzB4uG,EAUlC,OATKgB,GAAYU,IACflwE,EAAE4gB,kBACF3/C,EAAS,CAAEnZ,QAAIS,GAAa,CAAE+T,uBAAuB,KAErDgzG,SAGFoB,KAKFtB,IACAsB,IA7BuC,CA6BlB,IAGjBM,GACJ9qH,IAAeQ,EAAAA,KACZR,GAAc+qH,EAAAA,KAEjB/qH,GAAcgrH,EAAAA,KACXhrH,GAAcQ,EAAAA,OACZopH,IAAmBA,GAAkB,IAEtCqB,GAA6BH,IACjC9qH,GAAcI,EAAAA,KACXJ,GAAckrH,EAAAA,IAGbC,GAAkBn1G,QAAQmZ,IAAUs0F,eAAiBt0F,IAAUu0F,iBAAmBv0F,IAAUq0F,gBAEhGtvD,aAAck3D,GACdh3D,qBAAsBi3D,KACpB92D,EAAAA,GAAAA,GAAkB42D,IAChBG,IAAwBC,EAAAA,GAAAA,GAAiBJ,GAAkBh8F,QAAW9sB,GAAW,IAGrF6xD,aAAcs3D,GACdp3D,qBAAsBq3D,KACpBl3D,EAAAA,GAAAA,GAAkBv+C,QAAQwxG,IAExBkE,IAAwBH,EAAAA,GAAAA,GAAiB/D,GAAc,IAG3DtzD,aAAcy3D,GACdv3D,qBAAsBw3D,KACpBr3D,EAAAA,GAAAA,GAAkBv+C,QAAQ0zG,QAAgBrnH,GAAW,GAEnDwpH,IAAyBN,EAAAA,GAAAA,GAAiB7B,GAAe,GACzDoC,IAA+BP,EAAAA,GAAAA,GAAiB5B,IAAqB,GACrEoC,IAAoBR,EAAAA,GAAAA,GAAiB7C,GAAU,GAC/CsD,IAA8BT,EAAAA,GAAAA,GAAiB1B,IAE/CoC,IAAoBj3B,EAAAA,GAAAA,GAAYszB,GAChC3iD,QACkBtjE,IAAtB4pH,IAAmCA,GAAoB3D,EAAuB2D,QAAoB5pH,EAG9F6pH,GAAkBP,IAA6BE,IAC/CL,IAA2BE,IAGjC11B,EAAAA,GAAAA,KAAgB,KACd,MAAMm2B,EAAclC,GAAaviG,QACjC,GAAKykG,EAIL,OAAKlB,IAA+BiB,QAMhC7D,GAAsByC,IACpBZ,GAAmBxiG,UACrBykG,EAAY3oC,UAAUv7E,IAAI,gBAAiB,YAC3CiiH,GAAmBxiG,SAAU,GAI/B9e,YAAW,MACTstF,EAAAA,GAAAA,KAAgB,KACdi2B,EAAY3oC,UAAU4F,OAAO,WAAW,GACxC,GAzQiB,OA4QrB+iC,EAAY3oC,UAAU4F,OAAO,iBAC7B8gC,GAAmBxiG,SAAU,KAnB7BykG,EAAY3oC,UAAU4F,OAAO,gBAAiB,iBAC9C8gC,GAAmBxiG,SAAU,GAmB/B,GACC,CAACujG,GAA4BiB,GAAgBpB,GAA6BzC,IAE7E,MAAM,qBAAEpvD,IAAyBf,GAAoBllB,EAAMp3B,EAAiBmU,GAAaiD,GAAsB,GAkF/G,SAASo5F,GAAiBC,GAAU,EAAOC,GAAoB,GAC7D,OACE/8D,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,eACb+nC,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7+C,OAAK,EACLozC,KAAK,UACL0L,MAAM,cACNJ,QAASg5D,GACT34D,UAAWhf,EAAKq5E,EAAU,QAAU,SAEpC98D,GAAAA,GAAAC,cAAA,OAAKhoC,WAAW0pC,EAAAA,GAAAA,GAAe,uBAAwBm7D,GAAW,iBAEnEC,GAAqB/8D,GAAAA,GAAAC,cAACQ,GAAa,MAG1C,CAEA,MAAMu8D,GAAwBv2G,QAAQw1G,IAA2BE,IAC3Dc,GAA4BD,KAC3BhvD,GAAYgrD,GAAqBvoH,GAAcysH,EAAAA,IAItD,OAFAjrD,EAAAA,GAAAA,GAAgByoD,IAGd16D,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,eAAeqwC,IAAKoyD,IACjC16D,GAAAA,GAAAC,cAACoI,GAAAA,GAAU,CACTp3B,KAAMsyB,EAA8B,OAAS,YAC7CgF,UAAWwwD,EACX5iD,eAAa,EACbC,oBAAqBA,IA5GD,WAApBjsD,IACE9T,IAAaD,EAAAA,IAAkBwN,GAAiB3Q,GAAM6E,SAwB9D,WAEE,MAAMqlH,EAAsBv5G,EAAgB6/B,EAAK,sBAAmB3wC,EAE9D+Q,EAAaD,EAAgB5J,OAAO3D,GAAY3E,EACtD,OACEsuD,GAAAA,GAAAC,cAAAD,GAAAA,GAAAiC,SAAA,MACIu4D,IAAwBzB,EAAuB,IAAM8D,GAAiBpC,IAAwB72G,GAChGo8C,GAAAA,GAAAC,cAAA,OACEhoC,UAAU,oBACVmqC,QAASw4D,GACTr3C,YAAas3C,KAEZt8G,EAAAA,EAAAA,IAASsF,GACRm8C,GAAAA,GAAAC,cAACm9D,GAAAA,EAAe,CACdxnE,IAAK/xC,EACL6D,OAAQ7D,EACRy1C,aAAcA,EACd9mB,OAAQk3B,IAAwByzD,EAChCE,SAAU52G,QAAQijD,IAClB4zD,cAAY,EACZC,iBAAe,EACfC,WAAYz2C,EACZ02C,oBAAkB,EAClB75G,cAAeA,EACf85G,kBAAmBC,EAAAA,GAAkBC,mBACrCC,gBArUY,GAsUZC,OAAK,EACLC,mBAAoB7C,KAGtBl7D,GAAAA,GAAAC,cAAC+9D,GAAAA,EAAa,CACZpoE,IAAK/xC,EACLnS,OAAQmS,EACRxN,SAAWuN,OAA2B9Q,EAAXuD,EAC3BijD,aAAcA,EACd9mB,OAAQk3B,IAAwByzD,EAChCE,SAAU52G,QAAQijD,IAClB6zD,gBAAiBlnH,IAAaD,EAAAA,GAC9BknH,aAAcjnH,IAAaD,EAAAA,GAC3BqnH,oBAAkB,EAClBD,WAAS,EACT55G,cAAeA,EACf85G,kBAAmBC,EAAAA,GAAkBC,mBACrCC,gBAvVY,GAwVZE,mBAAoB5C,GACpB2C,OAAK,KAMjB,CA3EaG,GAKTj+D,GAAAA,GAAAC,cAAAD,GAAAA,GAAAiC,SAAA,KACG46D,KACD78D,GAAAA,GAAAC,cAAA,eACqBntD,IAAlBwE,EACqB,WAApB6S,EACG7S,EACGmsC,EAAKs4C,EAAa,WAAa,UAAWzkF,EAAe,KACzDmsC,EAAKs4C,EAAa,gBAAkB,gBAClB,WAApB5xE,EAAgCs5B,EAAK,sBAAuBnsC,EAAe,KACrD,cAApB6S,EACA48D,EAAiBtjC,EAAK,aAAeA,EAAK,WAAYnsC,EAAe,UACnExE,EACN2wC,EAAK,cA8FZptC,IAAaD,EAAAA,KAAmBnD,GAAM6E,SACrCkoD,GAAAA,GAAAC,cAACi+D,GAAAA,EAAgB,CACfC,gBACG/B,IAA6B31G,QAAQ61G,KAClCL,IAA2Bx1G,QAAQ01G,IAEzCzqH,OAAQA,IAIX0qH,IAA6BE,IAC5Bt8D,GAAAA,GAAAC,cAAC42D,GAAmB,CAClBjhE,IAAKlkD,EACLP,QAASmrH,GACT5vG,MAAO6vG,IAAgC,EACvCt3G,MAAO+0G,EACPpW,YAAa6Y,GACbxkG,UAAWokG,GACXvF,eAAgB0F,GAAoBjF,QAAqBzkH,EACzDsvD,QAAS04D,GACT/D,iBAAkBiE,GAClBpiG,eAAkC9lB,IAAvBonH,EACXlD,YAAaiG,KAIhBpB,IACC77D,GAAAA,GAAAC,cAAC8yD,GAAe,CACdn9D,IAAKlkD,EACLA,OAAQA,EACRkuB,SAAUm8F,GACV9jG,UAAW6jG,KAIf97D,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,gBACZ+kG,IACCh9D,GAAAA,GAAAC,cAACsf,GAAW,CACV3pB,KAAKlb,EAAAA,EAAAA,IAAcyhF,IACnBhrH,QAASgrH,GACTlkG,UAAWikG,KAGfl8D,GAAAA,GAAAC,cAACm+D,GAAAA,EAAa,CACZ1sH,OAAQA,EACR2E,SAAUA,EACV8T,gBAAiBA,EACjB6jD,SAAUA,EACVqwD,kBAAmBrB,MAGnB,KCvfV,GARyCr9D,IACvC,MAAM,SAAE7V,GAAa6V,EACf2+D,GAAez+D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,gBAAiBxW,GAAU,GAG/E,OAAOw0E,EAAet+D,GAAAA,GAAAC,cAACq+D,EAAiB3+D,QAAY7sD,CAAS,ECG/D,GAR6C6sD,IAC3C,MAAM,OAAEtpB,GAAWspB,EACb4+D,GAAmB1+D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,oBAAqBjqB,GAG7E,OAAOkoF,EAAmBv+D,GAAAA,GAAAC,cAACs+D,EAAqB5+D,QAAY7sD,CAAS,EC2IvE,SAAS0rH,GAAQ7zC,GACf,MAAqB,SAAdA,EAAK8zC,MAAmB9zC,EAAKtjE,MAAQiM,EAAAA,IAA8Bra,IAAI0xE,EAAKtjE,KACrF,CAEA,MAAMq3G,GAA8B,IAAMp7E,EAAAA,IA8iB1C,IAAekd,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KAClB,CAAC9yD,GAAU69D,eACT,MAAM5hC,GAAQ29B,EAAAA,EAAAA,KAAY55D,IAExBq+C,UAAWmwE,EAAqBC,WAAYC,EAAgB,gBAAEhM,EAAe,aAAEiM,GAC7E3uH,EAAOyvB,SAASm/F,OAAO3yF,IAAU,CAAC,GAEhC,aACJ8d,EAAY,kBAAE55C,EAAiB,wBAAEwL,EAAuB,YACxDysC,EAAW,iBAAErR,EAAgB,aAAEoR,EAAY,YAAEjlB,EAAW,4BAAEkgC,EAA2B,kBACrF5a,IACEt4C,EAAAA,EAAAA,KAAeF,GACb4K,GAAqBC,EAAAA,EAAAA,KAAyB7K,IAC9C,gBAAEK,GAAoBL,EAEtB8sC,EAAoB,CACxB7Q,QACAyyF,mBACAhM,kBACAiM,eACAxuH,oBACAwoH,oBAAoBlzE,EAAAA,EAAAA,KAAyBz1C,EAAQ69D,GACrD2wD,sBACAK,qBAAsBv4G,SAAQsW,EAAAA,EAAAA,KAAwB5sB,IACtD29G,oBAAoB92B,EAAAA,EAAAA,KAAqB7mF,GACzC8uH,kBAAmBx4G,QAAQ8hC,GAC3B22E,uBAAwBz4G,QAAQ6hC,GAChC62E,uBAAwBjoF,GAAkBb,OAC1C+oF,wBAAyB34G,QAAQkiC,GACjC02E,yBAAyB5yE,EAAAA,EAAAA,KAA0Bt8C,GACnD4oH,qBAAsBjoH,KAAKE,IAAI,EAAGk5C,EAAar4C,OAAS,GACxDiK,0BACAtL,mBAGF,IAAKuK,EACH,OAAOkiC,EAGT,MAAM,OAAEvrC,EAAM,SAAE2E,EAAUgR,KAAM8C,GAAoBpP,EAC9C0sB,GAAYlpB,EAAAA,EAAAA,IAAS7M,GACrBuB,GAAO+C,EAAAA,EAAAA,KAAW7F,EAAQuB,GAC1Bo4B,GAAM+C,EAAAA,EAAAA,KAAU18B,EAAQuB,GACxBoM,GAAYC,EAAAA,EAAAA,KAAgB5N,EAAQuB,EAAQ2E,IAC1C3E,OAAQyxB,EAAaztB,UAAW0tB,GAAmBC,EAErDjuB,GAAa4D,EAAAA,EAAAA,KAAiB7I,EAAQuB,EAAQ2E,GAC9CipH,EAAkB74G,SAASrR,GAAYstB,gBAAkBttB,GAAYmqH,eACrE75C,EAAUzyE,IAAQusH,EAAAA,EAAAA,IAAiBvsH,EAAMoD,EAAUipH,GACnDG,GAAkBjH,EAAAA,EAAAA,KAA0BroH,EAAQuB,GACpDguH,EAA0C,WAApBv1G,EACtB+tG,EAAmC,WAApB/tG,GAAgC9T,IAAaD,EAAAA,GAC5DwhD,EAAYnxC,QAAQxT,IAAQkY,EAAAA,EAAAA,IAAclY,IAC1CwlH,EAAehyG,QACnBxT,GAAQilH,IAAiBtgE,IAAa8gE,EAAAA,EAAAA,IAAiBzlH,KAAUA,EAAKkmD,cAAgBlmD,EAAKqsB,cAEvFqgG,EAAmBl5G,QAAQxT,GAAMkmD,aAAelmD,EAAK2sH,cACrDjH,EAAwBlyG,QAAQxT,GAAMkmD,aAAelmD,EAAK2lH,eAC1D1kE,IAAgBzsB,IAAY6wF,EAAAA,EAAAA,KAAoBnoH,EAAQuB,GACxD2mH,EAAgB5xG,QAAQqjB,GAAOoqB,GAC/BqkE,GAAeF,GAAiBoH,EAChCI,EAAa3rE,IAAkBpqB,EAC/Bg2F,EAAqBr5G,QACzBxT,IAAQ0oB,EAAAA,EAAAA,IAAY1oB,MAAUwW,EAAAA,EAAAA,KAAmBtZ,EAAQ8C,EAAKZ,KAE1DoV,GAAiBD,EAAAA,EAAAA,KAAYrX,EAAQuB,EAAQ2E,IAAWnB,UACxD6qH,IAAyB9sH,GAAM6E,SACjCzB,IAAaD,EAAAA,KAAmBqR,GAAmBxU,EAAK0F,SAAS0+F,EAAAA,MAAmBlhE,SAElF8hF,EAAe90F,GAAeC,GAChC1vB,EAAAA,EAAAA,KAAkBvD,EAAQgzB,EAAaC,QACvCtwB,EAEE8Q,GAAgB/J,EAAAA,EAAAA,IAAiBnI,EAAQ2E,EAAUlG,EAAO8B,eAC1D+tH,EAAwBp8G,GAAiBvN,IAAa+4G,EAAAA,IAEtD6Q,EAAkB5pH,IAAaD,EAAAA,KAAmBwN,IAAkB3Q,GAAM6E,QAC1EgvE,EAAem5C,EAAkB9mH,OAAO9C,QAAYvD,EAEpDqmH,GAAWlmH,IACfw0B,GACEx0B,GAAM46G,YAAej2D,KAAcsoE,EAAAA,EAAAA,IAAkBjtH,EAAM,iBACtDktH,EAAAA,EAAAA,IAAiBltH,EAAM,gBAIhC,MAAO,IACFgqC,EACHvrC,SACA2E,WACA8T,kBACAlX,OACAwU,iBACAggB,YACA24F,sBAAuB35G,QAAQxT,GAAM2sB,UACrCm8D,WAAYujC,EACZ55C,SAAUg6C,KACHzsH,GAAQyyE,KACT+5C,KACCE,GAAoB1sH,GAAMkmD,eAC3B4mE,IACAn8G,EACN87G,sBACAW,wBAAyBptH,GAAMotH,wBAC/BC,oBAAqBrtH,GAAMqtH,oBAC3BC,UAAWN,GAAmBx5G,SAASi5G,GAAuB5hH,GAAWjM,QACzE2uH,eAAgB/5G,QAAQwxG,GACxBe,kBAAmBT,GAAeF,GAAiBI,GAAgBE,EACnEyB,oBAAqBt8G,EAAYA,EAAUjM,OAAS,EACpD0xD,8BACA3L,YACA6gE,eACAF,cACAF,gBACAsH,mBACAhH,wBACAmH,qBACAhiH,YACAgpE,eACAqyC,YACA0G,aACAj8G,gBACAo8G,wBACD,GA3He/8D,EA5iBpB,UAAsB,cACpBw9D,EAAa,OACb/uH,EAAM,SACN2E,EAAQ,WACR0lF,EAAU,gBACV5xE,EAAe,SACf6jD,EAAQ,KACR/6D,EAAI,eACJwU,EAAc,UACdggB,EAAS,oBACTi4F,EAAmB,QACnBh6C,EAAO,wBACP26C,EAAuB,oBACvBC,EAAmB,UACnBC,EAAS,eACTC,EAAc,kBACdxH,EAAiB,oBACjBoB,EAAmB,iBACnByE,EAAgB,MAChBzyF,EAAK,gBACLymF,EAAe,aACfiM,EAAY,kBACZxuH,EAAiB,mBACjBwoH,EAAkB,oBAClB6F,EAAmB,gBACnBnuH,EAAe,qBACfwuH,EAAoB,mBACpBlR,EAAkB,kBAClBmR,EAAiB,uBACjBC,EAAsB,uBACtBC,EAAsB,wBACtBC,EAAuB,wBACvBC,EAAuB,4BACvB97D,EAA2B,qBAC3Bw1D,EAAoB,UACpBnhE,EAAS,sBACTwoE,EAAqB,aACrB3H,EAAY,YACZF,EAAW,cACXF,EAAa,wBACbv8G,EAAuB,iBACvB6jH,EAAgB,sBAChBhH,GAAqB,mBACrBmH,GAAkB,UAClBhiH,GAAS,aACTgpE,GAAY,SACZqyC,GAAQ,WACR0G,GAAU,cACVj8G,GAAa,sBACbo8G,KAEA,MAAM,SACJx0G,GAAQ,iBACRmuG,GAAgB,iBAChB+G,GAAgB,SAChBC,GAAQ,iBACRr5F,GAAgB,qBAChBmZ,GAAoB,sBACpBzuB,GAAqB,YACrB4uG,GAAW,eACXx2F,GAAc,WACdy2F,GAAU,iBACV72G,GAAgB,aAChBvL,GAAY,mBACZqiH,GAAkB,qBAClBC,GAAoB,YACpBC,KACEhuG,EAAAA,EAAAA,OAEIpiB,MAAOH,KAAgB8pH,EAAAA,GAAAA,MACzB,SAAER,GAAQ,UAAEkH,KAAchzD,EAAAA,EAAAA,MAE1BxqB,IAAOge,EAAAA,GAAAA,MACNy/D,GAAeC,KAAoB3/D,EAAAA,GAAAA,IAAS4/D,GAAAA,EAAch3C,OAC1Di3C,GAAYC,KAAiB9/D,EAAAA,GAAAA,OAC7B+/D,GAAcC,KAAmBhgE,EAAAA,GAAAA,OACjCigE,GAAkBC,KAAuBlgE,EAAAA,GAAAA,KAAS,IAEnD,sBACJmgE,GAAqB,qBACrBnI,GAAoB,wBACpBF,GAAuB,mBACvBC,GAAkB,2BAClBlL,ICvNW,SACb38G,EAAiB2E,EAAqByH,EAAsBgpE,GAE5D,MAAOwyC,EAAyBsI,IAA2B7wB,EAAAA,GAAAA,GAAkC,CAAC,IACvFsd,EAA4BwT,IAA8B9wB,EAAAA,GAAAA,KAC3D+wB,GAAuBp9D,EAAAA,GAAAA,OACtB60D,EAAoBwI,IAAsBhxB,EAAAA,GAAAA,KAE3Cn7C,EAAMlkD,EAAU,GAAEA,KAAU2E,SAAavD,EAiI/C,OA9HA+tD,EAAAA,GAAAA,KAAU,KACRghE,OAA2B/uH,GAC3BgvH,EAAqB3pG,aAAUrlB,EAC/BivH,OAAmBjvH,EAAU,GAC5B,CACDpB,EAAQkwH,EAAyBC,EAA4BE,EAAoB1rH,KAGnFwqD,EAAAA,GAAAA,KAAU,KACR,IAAKjL,EAAK,OACV,MAAMokE,EAAqBV,IAA0B1jE,GAC/CosE,EAAelkH,GAAWjM,QAAU,EACtCmoH,GAAsBgI,GACxBJ,EAAwB,IACnBtI,IACH,CAAC1jE,GAAM9kD,KAAKE,IAAI,EAAGgxH,EAAe,IAEtC,GACC,CAAC1I,EAAyB1jE,EAAK93C,GAAWjM,OAAQ+vH,IA4G9C,CACLD,uBA3G4Bv7D,EAAAA,GAAAA,IAAgB,EAC5C8iD,yBAAyB,GAAIvO,4BAA4B,GAAIrhE,aAAYo3E,cAAa9V,gBAEtF,IAAKlpG,IAAW2E,IAAau/C,EAAK,OAElC,MAAMzlD,GAASmJ,EAAAA,EAAAA,MAIf,IAF4BwE,GAAWjM,SAEViM,EAAW,OAExC,MAAMo8G,EAAqBX,IAC3B,GAAIW,IAAuBxJ,EAAa,CACtC,MAAMuR,EAAiBnkH,EAAUilC,QAAQm3E,GACzC0H,EAAwB,IACnBtI,IACH,CAAC1jE,GAAMqsE,IAETF,OAAmBjvH,EACrB,CAEI49G,IACFmR,OAA2B/uH,GAC3BivH,OAAmBjvH,IAGrB,MAAMovH,EAA0B7T,IAE1B8T,EAA2BL,EAAqB3pG,QAItD,GAAIyiF,GACmC,IAAlCsO,EAAuBr3G,QAAqD,IAArC8oG,EAA0B9oG,SAChEswH,GAA0B7uH,SAASqnG,EAA0B,IACjE,OAGF,MAAMynB,GAAuBnoH,EAAAA,EAAAA,KAC1BkoH,GAA0BrwH,QAAQO,IAAQsoG,EAA0BrnG,SAASjB,MAAQ,IACnF4L,OAAOirG,IAGZ4Y,EAAqB3pG,QAAUiqG,EAE/B,MAAMC,GAAmB17G,EAAAA,EAAAA,KAAuBxW,EAAQuB,GAExD,IAAK0wH,EAAqBvwH,QAAU+oG,GAAaynB,IAAqBvkH,EAAUxK,SAAS+uH,GAAmB,CAC1G,MAAMC,EAA4BxkH,EAAUiC,MAAM1N,GAAOA,EAAKgwH,IAC9D,GAAIC,EAA2B,CAC7B,MAAMl9E,EAAWtnC,EAAUilC,QAAQu/E,GACnCV,EAAwB,IACnBtI,IACH,CAAC1jE,GAAMxQ,GAEX,CACF,CAEA,GAAI88E,GAA2BtnB,EAC7B,OAGF,MAAMv9F,EAAQvM,KAAKE,OAAOoxH,GACpBG,EAAazkH,EAAU2C,WAAWpO,GAAOA,IAAOgL,IAChDmlH,EAAQlpF,EAAa,EAAI,EACzB8L,EAAWg9E,EAAqBvwH,OAAS0wH,EAC7CJ,GAA0BtwH,QACtBq6E,EAAAA,GAAAA,IAAMpuE,EAAUilC,QAAQo/E,EAAyB,IAAMK,EAAO,EAAG1kH,EAAUjM,OAAS,GACpF,EAGN+vH,EAAwB,IACnBtI,IACH,CAAC1jE,GAAMxQ,GACP,IAkCFo0E,sBA/B2BpzD,EAAAA,GAAAA,IAAiB1wD,IAC5C,IAAKhE,IAAW2E,IAAau/C,GAAO2jE,IAAsB,OAAO,EAEjE,MAAMppH,GAASmJ,EAAAA,EAAAA,MACf,IAAKwE,GAAWjM,OAEd,OAAOi1E,IAAiBpxE,EAG1B,MAAMuP,EAAQnH,EAAUilC,QAAQrtC,GAC1BusH,GAAiBlH,EAAAA,GAAAA,GAAcj9G,EAAUjM,OAAQoT,EAAQ,GAC/D48G,GAA2B,GAE3B,MAAMxpH,GAAYlC,EAAAA,EAAAA,KAAgBhG,EAAQuB,EAAQ2E,GAIlD,OAHwBgC,GAAW/E,SAASoC,KACvCgP,EAAAA,EAAAA,KAA8BvU,EAAQuB,EAAQ2E,EAAUX,IAG3DksH,EAAwB,IACnBtI,IACH,CAAC1jE,GAAMqsE,KAEF,IAEPF,EAAmBjkH,EAAUmkH,KACtB,EACT,IAMA3I,0BACAC,qBACAlL,6BAEJ,CDwEMoU,CAAiB/wH,EAAQ2E,EAAUyH,GAAWgpE,IAE5C47C,GAAuB10D,GAAYgxD,EACnC2D,GAAyB30D,EAAW0wD,QAA8B5rH,EAClEo7G,GAAWqS,IACf9vH,GAAcgrH,EAAAA,KACX+E,GAED1H,GAAsBroH,GAAcI,EAAAA,KACjCJ,GAAckrH,EAAAA,MAEd3tD,GAAYgrD,GAAqBvoH,GAAcysH,EAAAA,KAGhD0F,IAAkBC,EAAAA,GAAAA,GAAuBnxH,EAAQixH,IACjDG,IAAoBD,EAAAA,GAAAA,GAAuBxsH,EAAUssH,IACrDI,IAA2BF,EAAAA,GAAAA,GAAuB14G,EAAiBw4G,IACnEK,IAAwBH,EAAAA,GAAAA,GAAuBpK,EAAckK,IAC7DM,IAAuBJ,EAAAA,GAAAA,GAAuBtK,EAAaoK,IAC3DO,IAAyBL,EAAAA,GAAAA,GAAuBxK,EAAesK,IAC/DQ,IAAsBN,EAAAA,GAAAA,GAAuBhD,GAAY8C,IACzDS,IAAmBP,EAAAA,GAAAA,GAAuBn9C,EAASi9C,MACnDO,KAA2BD,KAAyBD,KAA0BG,IAC/EzxH,IAAW2xH,EAAAA,IACVC,IAAoBT,EAAAA,GAAAA,GAAuB3U,GAAUyU,IACrDY,IAAsBV,EAAAA,GAAAA,GAAuBxB,GAAYsB,KAA2BjxH,IAAW2xH,EAAAA,IAC/FG,IAAqBX,EAAAA,GAAAA,GAAuBjrE,EAAW+qE,IACvDc,IAA4BZ,EAAAA,GAAAA,GAAuBlD,EAAkBgD,IACrEe,IAAiCb,EAAAA,GAAAA,GAAuBlK,GAAuBgK,IAC/EgB,IAAsCd,EAAAA,GAAAA,GAC1CnxH,EAASiwH,QAAwB7uH,EACjC6vH,IAGIjG,IAAoBj3B,EAAAA,GAAAA,GAAYszB,GAEhC3iD,QACkBtjE,IAAtB4pH,IAAmCA,GAAoB3D,EAAuB2D,QAAoB5pH,GAG9F,QAAEg1G,GAAO,uBAAE8b,GAAsB,0BAAEC,IA+iB3C,SACEC,EACA/K,EACA2D,EACAhrH,EACAs8D,GAEA,MAAO85C,EAASic,IAAcviE,EAAAA,GAAAA,KAAUwM,GAClC42B,GAAcC,EAAAA,GAAAA,KAEdm/B,OAA8ClxH,IAAtB4pH,GAAmCA,IAAsB3D,EA8BvF,OA7BIiL,IACEF,GACFC,GAAW,GAGX1qH,YAAW,KACT0qH,GAAW,EAAK,GACfrF,KAEH95B,MAIJ3mB,EAAAA,GAAAA,IAAc,KACP6lD,GACHC,GAAW,EACb,GACC,CAACD,IAYG,CACLhc,QAASA,IAAYkc,EACrBJ,uBAAwBE,EAZ1B,SAAgCv5E,GACP,cAAnBA,EAAE05E,cAAgC15E,EAAE2L,SAAW3L,EAAEqqC,eACnDmvC,EAAWt9G,QAAQ/U,GAEvB,OAQoEoB,EAClE+wH,0BAA2BC,EAP7B,WACEC,GAAW,EACb,OAK0EjxH,EAE5E,CA5lByEoxH,EACpE3gE,GAA+B87D,EAChCtG,EACA2D,GACAhrH,EACAs8D,IAGFnN,EAAAA,GAAAA,KAAU,IACDnvD,GACHk1D,EAAAA,GAAAA,IAAsB,KACtBp7C,GAAS,CAAEnZ,QAAIS,GAAY,SAE3BA,GACH,CAACpB,EAAQ8Z,MAEZyyD,EAAAA,GAAAA,IAAc,KACZkjD,GAAiBC,GAAAA,EAAch3C,MAC/Bo3C,QAAgB1uH,EAAU,GACzB,CAACpB,KAGJmvD,EAAAA,GAAAA,KAAU,KACR,IAAK76C,EAAAA,KAAWqiB,EAAAA,GACd,OAGF,MAAM,eAAE87F,GAAmBrzG,OAC3B,IAAKqzG,EACH,OAGF,MAAM/iB,EAAeA,KACnB,MAAMgjB,EAAcD,EAAejtE,SAAW1iD,SAAS6vH,gBAAgBnT,cAEvEvqB,EAAAA,GAAAA,KAAgB,KACdnyF,SAASmgC,KAAKs/C,UAAUqwC,OAAO,mBAAoBF,IAEnDxwC,EAAAA,GAAAA,KAAe,MACRwwC,GAAeD,EAAe9T,YACjC1pB,EAAAA,GAAAA,KAAgB,KACd71E,OAAOyzG,SAAS,CAAE7a,IAAK,GAAI,GAE/B,GACA,GACF,EAKJ,OAFAya,EAAe/8D,iBAAiB,SAAUg6C,GAEnC,KACL+iB,EAAe98D,oBAAoB,SAAU+5C,EAAa,CAC3D,KAGHvgD,EAAAA,GAAAA,KAAU,KACJp5B,GACFk5F,GAAS,CAAEj5G,OAAQhW,GACrB,GACC,CAACA,EAAQ+1B,EAAWk5F,MAEvB9/D,EAAAA,GAAAA,KAAU,KACHu/D,GACH94F,GAAiB,CAAE51B,OAAQA,GAC7B,GACC,CAACA,EAAQ+1B,EAAW24F,KAEvBv/D,EAAAA,GAAAA,KAAU,KACJnvD,GAAUouH,IAAsBhY,IAClCrpG,GAAa,CAAE/M,UACjB,GACC,CAACouH,GAAoBpuH,EAAQo2G,GAASrpG,KAEzC,MAAM,WACJ+lH,GAAU,YAAEC,GAAW,cAAEC,IE9VtB,SACLx+C,EACAy+C,EACAz0D,EACA00D,EACAC,GAEA,MAAO/6E,EAAUg7E,EAAcC,IAAkBt3D,EAAAA,GAAAA,MAC1Cu3D,EAAeC,IAAoBzjE,EAAAA,GAAAA,IAAiB,IACpD0jE,EAAqBC,IAA0B3jE,EAAAA,GAAAA,IAAiB,GAEjE4jE,GAAkBh/D,EAAAA,GAAAA,IAAiBx1D,KACvC+1F,EAAAA,GAAAA,KAAgB,KACd,IAAKzgB,EAAW/tD,QACd,OAGF,MAAMktG,EAAUz0H,EAAS,GAAEA,MAAY,GACvCs1E,EAAW/tD,QAAQqxD,MAAM54E,MAAQy0H,EAC7BR,GACF3+C,EAAW/tD,QAAQqxD,MAAMqZ,YAAYgiC,EAAiBQ,EACxD,GACA,IAWJ,SAASX,KACP/9B,EAAAA,GAAAA,KAAgB,KACdnyF,SAASmgC,KAAKs/C,UAAU4F,OAAO,mBAAmB,GAEtD,CAgDA,OA5DA4M,EAAAA,GAAAA,KAAgB,KACTvgB,EAAW/tD,SAAYysG,GAI5BQ,EAAgBR,EAAa,GAC5B,CAACC,EAAiB3+C,EAAY0+C,EAAcQ,KA0B/CvkE,EAAAA,GAAAA,KAAU,KACR,IAAK/W,EAAU,OAEf,MAAMkpC,EAAmBzoC,IACvB,MAAM+6E,EAAWx0H,KAAKwhH,KAAK4S,EAAsB36E,EAAE4oC,QAAU6xC,GAC7DI,EAAgBE,EAAS,EAG3B,SAASC,IACPC,IACAb,EAASz+C,EAAW/tD,QAASstG,YAC/B,CAEA,SAASD,IACPd,IACAlwH,SAAS6yD,oBAAoB,YAAa2rB,GAAiB,GAC3Dx+E,SAAS6yD,oBAAoB,UAAWk+D,GAAU,GAClD/wH,SAAS6yD,oBAAoB,OAAQk+D,GAAU,GAC/CR,GACF,CAMA,OAJAvwH,SAAS4yD,iBAAiB,YAAa4rB,GAAiB,GACxDx+E,SAAS4yD,iBAAiB,UAAWm+D,GAAU,GAC/C/wH,SAAS4yD,iBAAiB,OAAQm+D,GAAU,GAErCC,CAAO,GACb,CAACN,EAAqBF,EAAe9+C,EAAYy+C,EAAU76E,EAAUi7E,EAAgBK,IAEjF,CAAEZ,WA9CT,SAAoBj6E,GAClBA,EAAEmV,kBAEFinC,EAAAA,GAAAA,KAAgB,KACdnyF,SAASmgC,KAAKs/C,UAAUv7E,IAAI,mBAAmB,IAGjDusH,EAAiB16E,EAAE4oC,SACnBgyC,EAAuBj/C,EAAW/tD,QAASstG,aAC3CX,GACF,EAoCqBL,YAlCrB,SAAqBl6E,GACnBA,EAAEmV,iBACF0lE,OAAgBtyH,GAChBo9D,GACF,EA8BkCw0D,gBACpC,CFyQMgB,CAAUjF,GAAgBz1E,GAAM81E,GAAmB,CACrDtwH,gBAAiBw6C,KACf+1E,GAAsBvwH,EAAiB,uBAErCm1H,IAAkBv/D,EAAAA,GAAAA,IAAiB7b,IACvC,MAAM,MAAEq7E,GAAUr7E,EAAEs7E,cAAgB,CAAC,EAC/BC,EAAkBF,GAASA,EAAM/zH,OAAS,GAAKohB,MAAM7N,KAAKwgH,GAG7D9zH,QAAQ64E,GAAuB,kBAAdA,EAAKtjE,OAEtB0vF,MAAMynB,IAET2C,GAAiB2E,EAAkB1E,GAAAA,EAAc2E,UAAY3E,GAAAA,EAActc,SAAS,IAGhFkhB,IAAqB5/D,EAAAA,GAAAA,IAAgB,KACzC+6D,GAAiBC,GAAAA,EAAch3C,KAAK,IAGhC67C,IAAuB7/D,EAAAA,GAAAA,IAAgB,KAC3Cs7D,IAAoB,EAAK,IAGrBwE,IAAkB9/D,EAAAA,GAAAA,IAAgB,KACtCs7D,IAAoB,EAAM,IAGtByE,IAA0B//D,EAAAA,GAAAA,IAAgB,KAC9C56C,GAAS,CAAEnZ,GAAI2H,OAAO3D,IAAY,IAG9B+vH,IAAyBhgE,EAAAA,GAAAA,IAAgB,KAC7Cs6D,GAAiB,CAAEhvH,OAAQA,EAAS2E,SAAUA,IAC9C6vH,KACAvM,IAAkB,IAGd0M,IAAoBjgE,EAAAA,GAAAA,IAAgB,KACxC56C,GAAS,CAAEnZ,GAAIX,GAAS,IAGpB40H,IAAuBlgE,EAAAA,GAAAA,IAAgB,KAC3Cw6D,GAAY,CAAElvH,OAAQA,IAClBgyH,IACF15G,GAAiB,CACf7Y,QAAqBsyC,GAAZmU,EAAiB,sCAA8C,sCAE5E,IAGI2uE,IAAiBngE,EAAAA,GAAAA,IAAgB,KACrCh8B,GAAe,CAAEC,QAAS,UAAW,IAGjCm8F,IAAmBpgE,EAAAA,GAAAA,IAAgB,KACvCy6D,GAAW,CAAEnvH,OAAQA,GAAU,IAG3B+0H,IAAgBrgE,EAAAA,GAAAA,IAAgB,KACpC46D,GAAY,CAAEt5G,OAAQhW,GAAU,IAG5Bg1H,GG5ZoBC,EAACv6F,EAAiBw6F,KAC5C,MAAM,iBAAEC,IAAqB7zG,EAAAA,EAAAA,OACtBgjB,EAAO8wF,IAAYtlE,EAAAA,GAAAA,IAASolE,GA8BnC,OA5BA/lE,EAAAA,GAAAA,KAAU,KACH+lE,IAIDA,EAAa1/D,WAAW,KAC1B4/D,EAASF,GAETG,GAAStzF,MAAMuzF,EAAAA,IAAsB56F,EAAO26F,GAASE,KAAKC,MACvDv5E,MAAMw5E,IACL,MAAMt3G,EAAMY,IAAI22G,gBAAgBD,IAChCE,EAAAA,GAAAA,IAAax3G,GACV89B,MAAK,KACJm5E,EAAU,OAAMj3G,KAAO,GACvB,IAELu+B,OAAM,KACLy4E,EAAiB,CACfz6F,QACAwyF,gBAAY9rH,EACZ+/G,qBAAiB//G,EACjB07C,WAAW,EACXswE,aAAwB,SAAV1yF,EAAmBk7F,EAAAA,IAA2BC,EAAAA,KAC5D,IAER,GACC,CAACX,EAAcx6F,IAEXw6F,EAAe5wF,OAAQljC,CAAS,EH4XT6zH,CAAoBv6F,EAAOyyF,GAEnD5mG,IAAY0pC,EAAAA,GAAAA,GAChB2hE,IAAqB,mBACrBkE,EAAAA,GAAsB,sBAAwB,sBAG1CC,IAAc9lE,EAAAA,GAAAA,GI3aO,uBAAsH,uBJ8a/Ik9D,GI9agE,uBJ+ahEhM,GI/auG,uBJgbvGgM,GAAoBF,GIhb+L,uBJibnN7F,GIjb4P,uBJkb5P92E,EAAAA,MAAiB4gF,IAAmBE,KIlb8I,wBJqb9K4E,IAA6B/lE,EAAAA,GAAAA,GACjC,sBACCmsD,GAAsB,SAGnB6Z,IAAkCC,EAAAA,EAAAA,IACtCnkF,GAAM48E,EAAyBC,GAE3BuH,IAA2BC,EAAAA,EAAAA,IAA4BrkF,GAAMxwC,EAAMoD,EAAUoQ,QAAQgB,IAErFsgH,GAA6BJ,IAAmCE,IAGhE,oBACJG,GAAmB,mBAAEC,GAAkB,mBACvCC,GAAkB,kBAAEC,GAAiB,iBACrCC,GAAgB,2BAAEC,KAChBrmE,EAAAA,GAAAA,KACF,IrJ3bW,SAAyCvxD,EAAqBi1E,GAC3E,MAAM4iD,EAAc73H,GAAegrH,EAAAA,IAC/B5rH,EAAAA,GACA,EAAIA,EAAAA,GACF04H,EAmCR,SAA6B93H,GAC3B,GAAIA,EAAcI,EAAAA,IAA0C,CAC1D,MAAML,EAAkBM,KAAKC,IAC3BD,KAAKE,IAAkB,IAAdP,EAAoBT,GAC7BD,GAGIy4H,EAAmB13H,KAAKC,IACd,IAAdN,EACAV,GAGF,OAAOe,KAAKC,IACVN,EAAcD,EAAkBg4H,EAChC14H,EAEJ,CAEA,GAAIW,EAAcQ,EAAAA,IAAyC,CACzD,MAAMT,EAAkBM,KAAKC,IAC3BD,KAAKE,IAAkB,GAAdP,EAAmBT,GAC5BD,GAGF,OAAOe,KAAKC,IACVN,EAAcD,EACdV,EAEJ,CAEA,OAAIW,EAAcX,EACTA,EAGFW,CACT,CAtE2Bg4H,CAAoBh4H,GACvCi4H,EAAkBj4H,GAAegrH,EAAAA,IACnC,MAAQ5rH,EAAAA,GACR,EAAIA,EAAAA,GAEF84H,EAAgBjjD,EAClB6iD,EAAmBD,EAAcI,EACjCH,EAAmBD,EACjBM,EAAen4H,EAAcgrH,EAAAA,IAC/B3qH,KAAKC,IAAIw3H,EAAmBD,EAAa14H,GACzC24H,EAAmBD,EAEjBN,EAAsBY,EAAeD,EACrCV,EAAqBU,EAAgBC,EAY3C,MAAO,CACLZ,sBACAC,qBACAC,mBAXyBxiD,EACtBgjD,EAAkB,EAAKT,EACxB,EAUFE,kBARwBziD,EACrBgjD,EAAkB,GAAM,EAAIV,EAC7B,EAOFI,iBAhBuBQ,EAAe34H,EAiBtCo4H,2BAhBiCp4H,EAAqB24H,EAkB1D,CqJsZUC,CAAgCp4H,GAAa2yH,KACnD,CAACA,GAAkB3yH,KAGfq4H,IAAkBnnE,EAAAA,GAAAA,GACtB,wBACCyhE,IAAoB,cACrBA,IAAoB7B,KAAiBzT,GAAsB,eAG7DjnD,EAAAA,GAAAA,GAAe,CACb/c,SAAUgkE,EACVhnD,OAAQ90C,MAGV60C,EAAAA,GAAAA,GAAe,CACb/c,SAAU44E,GACV57D,OAAQrmB,KAGV,MAAMsoF,GAAsBtiH,SACzBi5G,IAAwB97G,KAAkBw/G,KAAqBF,KAA2BD,KACvFD,IAAyB+E,IAEzBiB,GAA6BviH,QACjCy8G,IAA0BF,IAAyBU,IAAkCT,IAClFvD,GAAuBM,IAAyBmD,IAE/Cx9C,GAAiBl/D,QAAQsiH,IAAuBjb,GAAsB4R,GAE5E,OACE1/D,GAAAA,GAAAC,cAAA,OACE5tD,GAAG,eACH4lB,UAAWA,GACX46C,gBAAiB+wD,GACjBp6C,OAAOQ,EAAAA,GAAAA,GACJ,4BAA2Bg+C,KAC3B,2BAA0BC,KAC1B,yBAAwBG,KACxB,iCAAgCC,MAChC,2BAA0BH,OAC1B,0BAAyBC,OACzB,oBAAmBrJ,IACpBjM,GAAoB,6BAA4BA,KAElDzwD,QAAU23D,IAAYzpH,EAAqB+1H,QAAoBvzH,GAE9DmuH,IACCjhE,GAAAA,GAAAC,cAAA,OACEhoC,UAAU,gBACVsrD,YAAaihD,GACbyE,UAAWvE,GACX3gB,cAAe0gB,KAGnBzkE,GAAAA,GAAAC,cAAA,OACEhoC,UAAWwvG,GACXj+C,MAAOk9C,GAAyB,wBAAuBA,UAA0B5zH,IAEnFktD,GAAAA,GAAAC,cAAA,OAAK5tD,GAAG,0BACPoU,QAAQm8G,IAAmBE,KAC1B9iE,GAAAA,GAAAC,cAAAD,GAAAA,GAAAiC,SAAA,KACEjC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,kBAAkBixG,YAAa9F,GAAmBuC,QAAkB7yH,GACjFktD,GAAAA,GAAAC,cAACo5D,GAAY,CACX3nH,OAAQkxH,GACRvsH,SAAUysH,GACV34G,gBAAiB44G,GACjBhnC,WAAYA,EACZ+rB,QAASA,GACT95C,SAAUA,EACVsrD,wBAAyBA,GACzBC,mBAAoBA,GACpBC,qBAAsBA,KAExBx5D,GAAAA,GAAAC,cAACoI,GAAAA,GAAU,CACTp3B,KAAMsyB,EAA8B,OAAS87D,EAA0B,QAAU,OACjF92D,UAAWwwD,EACX5iD,eAAa,EACbC,oBAAqBA,GACrB+yD,OAAQtF,IAER7jE,GAAAA,GAAAC,cAACguD,GAAW,CACVr4D,IAAM,GAAEgtE,MAAmBE,MAAqBC,KAChDrxH,OAAQkxH,GACRvsH,SAAUysH,GACVz7G,KAAM07G,GACNhnC,WAAYA,EACZrW,QAAS09C,GACTlV,SAAUoV,GACVrb,YAAaqZ,GACbpZ,cAAesZ,GACf1Z,QAASA,GACTqG,gBAAiB6a,GACjB5a,cAAe3nG,SAASo4G,IAAqBhM,GAC7CjZ,2BAA4B+pB,GAC5BtV,2BAA4BA,KAE9BruD,GAAAA,GAAAC,cAAA,OAAKhoC,UAAW6wG,IACb1F,IACCpjE,GAAAA,GAAAC,cAACmpE,GAAAA,EAAQ,CACP/hH,KAAK,cACL3V,OAAQkxH,GACRvsH,SAAUysH,GACV34G,gBAAiB44G,GACjB7B,cAAeA,GACfmI,WAAYrD,GACZle,QAASA,GACT95C,SAAUA,EACVs7D,gBAAiBC,EAAAA,IACjBC,yBAA0BlO,EAAAA,IAC1BvoD,QAAQ,uBAGX2sD,GAAuBvG,IACtBn5D,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,wCAAwCoqC,IAAK5e,GAAK6e,MAAQ,WAAQxvD,GAC/EktD,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLzL,KAAK,OACLyf,OAAK,EACL/T,MAAM,YACNvqC,UAAU,mCACVmqC,QAAS6jE,IAETjmE,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,oBACb+nC,GAAAA,GAAAC,cAAA,YAAOxc,GAAK,uBAAwB22E,EAAqB,QAI9D4F,IACChgE,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,wCAAwCoqC,IAAK5e,GAAK6e,MAAQ,WAAQxvD,GAC/EktD,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLzL,KAAK,OACLyf,OAAK,EACL/T,MAAM,YACNvqC,UAAU,mCACVmqC,QAAS+jE,IAETnmE,GAAAA,GAAAC,cAAA,YAAOxc,GAAK,oBAIjBslF,IACC/oE,GAAAA,GAAAC,cAAA,OAAKhoC,UAAWyvG,IACd1nE,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,4BACb+nC,GAAAA,GAAAC,cAAA,YACG8nE,MAMP/5D,IAAag1D,IAA0BS,KAA8BC,KAErE1jE,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,wCAAwCoqC,IAAK5e,GAAK6e,MAAQ,WAAQxvD,GAC/EktD,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLzL,KAAK,OACLyf,OAAK,EACL5H,QAAM,EACN12C,UAAU,wCACVmqC,QAASkkE,IAER7iF,GAAK+/E,GAAqB,qBAAuB,sBAIvDx1D,GAAY01D,IACX1jE,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,wCAAwCoqC,IAAK5e,GAAK6e,MAAQ,WAAQxvD,GAC/EktD,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLzL,KAAK,OACLyf,OAAK,EACL5H,QAAM,EACN12C,UAAU,wCACVmqC,QAASkkE,IAER7iF,GAAK,wBAIXuqB,GAAYi1D,IACXjjE,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,wCAAwCoqC,IAAK5e,GAAK6e,MAAQ,WAAQxvD,GAC/EktD,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLzL,KAAK,OACLyf,OAAK,EACL5H,QAAM,EACN12C,UAAU,wCACVmqC,QAASmkE,IAER9iF,GAAK,cAIXuqB,GAAYk1D,IACXljE,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,wCAAwCoqC,IAAK5e,GAAK6e,MAAQ,WAAQxvD,GAC/EktD,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLzL,KAAK,OACLyf,OAAK,EACL5H,QAAM,EACN12C,UAAU,wCACVmqC,QAASokE,IAER/iF,GAAK,gBAIXuqB,GAAYm1D,IACXnjE,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,wCAAwCoqC,IAAK5e,GAAK6e,MAAQ,WAAQxvD,GAC/EktD,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLzL,KAAK,OACLyf,OAAK,EACL5H,QAAM,EACN12C,UAAU,wCACVmqC,QAASqkE,IAERhjF,GAAK,aAIZuc,GAAAA,GAAAC,cAAC6yD,GAAoB,CACnB3oG,gBAAiB44G,GACjBj5E,SAAUgkE,EACVpoC,QAAS09C,KAEXpjE,GAAAA,GAAAC,cAAC8kB,GAAW,CAAC1uC,OAAQ4oF,IACrBj/D,GAAAA,GAAAC,cAACs+D,GAAgB,CAACloF,OAAQ6oF,IACzBlvC,EAAAA,IAA4BhwB,GAAAA,GAAAC,cAACilB,GAAiB,CAAC7uC,OAAQ+oF,MAI5Dp/D,GAAAA,GAAAC,cAACwlB,GAAqB,CACpBxyB,QAASswE,GACT79C,QAAS09C,GACTz9C,eAAgBA,MAGnB3X,GAAYhO,GAAAA,GAAAC,cAACq+D,GAAY,CAACx0E,SAAUrjC,QAAQi8G,OAGhDhxH,GACCsuD,GAAAA,GAAAC,cAAC+kB,GAAqB,CACpB3uC,OAAQorF,GACR/vH,OAAQA,EACR0oH,oBAAqBA,EACrBr3D,QAASmjE,GACTuD,QAASrD,KAGbpmE,GAAAA,GAAAC,cAAA,OAAK2sD,eAAa,GACf9wG,GAAyBU,KAAI,CAAC+8B,EAAwBzlC,IACrDksD,GAAAA,GAAAC,cAACklB,GAAyB,CACxBukD,cAAe51H,EACf8hD,IAAKrc,EAAuBlnC,GAC5BknC,uBAAwBA,OAI9BymB,GAAAA,GAAAC,cAACglB,GAAgB,CAAC5uC,OAAQ8oF,IAGhC,KKxrBA,GARkDx/D,IAChD,MAAM,IAAE71B,GAAQ61B,EACVgqE,GAAwB9pE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,yBAA0Bx2B,GAGvF,OAAO6/F,EAAwB3pE,GAAAA,GAAAC,cAAC0pE,EAA0BhqE,QAAY7sD,CAAS,ECGjF,GARuC6sD,IACrC,MAAM,KAAErnB,GAASqnB,EACXiqE,GAAa/pE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,cAAehoB,GAGjE,OAAOsxF,EAAa5pE,GAAAA,GAAAC,cAAC2pE,EAAejqE,QAAY7sD,CAAS,ECG3D,GAR0C6sD,IACxC,MAAM,KAAErnB,GAASqnB,EACXkqE,GAAgBhqE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkBhoB,GAGvE,OAAOuxF,EAAgB7pE,GAAAA,GAAAC,cAAC4pE,EAAkBlqE,QAAY7sD,CAAS,ECGjE,GAR0C6sD,IACxC,MAAM,MAAEmqE,GAAUnqE,EACZoqE,GAAgBlqE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkBwpE,GAGvE,OAAOC,EAAgB/pE,GAAAA,GAAAC,cAAC8pE,EAAkBpqE,QAAY7sD,CAAS,ECGjE,GARqC6sD,IACnC,MAAM,SAAEpS,GAAaoS,EACfqqE,GAAWnqE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,YAAa/S,GAG7D,OAAOy8E,EAAWhqE,GAAAA,GAAAC,cAAC+pE,EAAarqE,QAAY7sD,CAAS,ECGvD,GAR8C6sD,IAC5C,MAAM,KAAErnB,GAASqnB,EACXsqE,GAAoBpqE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,qBAAsBhoB,GAG/E,OAAO2xF,EAAoBjqE,GAAAA,GAAAC,cAACgqE,EAAsBtqE,QAAY7sD,CAAS,ECGzE,GARyC6sD,IACvC,MAAM,QAAE/1B,GAAY+1B,EACduqE,GAAerqE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,gBAAiB12B,GAGrE,OAAOsgG,EAAelqE,GAAAA,GAAAC,cAACiqE,EAAiBvqE,QAAY7sD,CAAS,ECG/D,GARwC6sD,IACtC,MAAM,OAAE7wB,GAAW6wB,EACbwqE,GAActqE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAAgBxxB,GAGnE,OAAOq7F,EAAcnqE,GAAAA,GAAAC,cAACkqE,EAAgBxqE,QAAY7sD,CAAS,ECG7D,GARyC6sD,IACvC,MAAM,OAAEtpB,GAAWspB,EACbyqE,GAAevqE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,gBAAiBjqB,GAGrE,OAAO+zF,EAAepqE,GAAAA,GAAAC,cAACmqE,EAAiBzqE,QAAY7sD,CAAS,ECG/D,GARyC6sD,IACvC,MAAM,OAAEtpB,GAAWspB,EACb0qE,GAAexqE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,gBAAiBjqB,GAGrE,OAAOg0F,EAAerqE,GAAAA,GAAAC,cAACoqE,EAAiB1qE,QAAY7sD,CAAS,E,wCCiC/D,MAqGA,IAAe0tD,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KAClB,CAAC9yD,GAAUuB,aACT,MAAMuB,GAAO+C,EAAAA,EAAAA,KAAW7F,EAAQuB,IACxB6X,QAAS+gH,GAAoBn6H,EAAOg2B,aAAe,CAAC,GACtD,uBAAEwc,IAA2BtyC,EAAAA,EAAAA,KAAeF,IAC5C,cAAE8B,GAAkB9B,EACpBynD,EAAY3kD,IAAQkY,EAAAA,EAAAA,IAAclY,IAGtCgiB,MAAOm6C,EAAW,eAClBvmB,EAAc,cACd/gB,EAAa,aACbD,IACEx3B,EAAAA,EAAAA,KAAeF,GAAQw3B,WAE3B,MAAO,CACLiwB,YACAmD,SAAStxC,EAAAA,EAAAA,KAAmBtZ,EAAQuB,IAASqpD,QAC7C9oD,gBACAq4H,kBACAl7D,cACAm7D,YAAa1hF,EACbjwB,UAAW+pB,IAA2B6nF,EAAAA,GAAuBvpE,QAC7Dn5B,gBACAD,eACD,GAzBeo7B,EArG8BwnE,EAChD7yE,YACAmD,UACA2vE,aACAz4H,gBACAq4H,kBACA1xG,YACAw2C,cACAm7D,cACA1iG,eACAC,gBACAi7B,UACAjZ,eAEA,MAAM,mBAAE6gF,IAAuB33G,EAAAA,EAAAA,MAEzBywB,GAAOge,EAAAA,GAAAA,MACNmpE,EAAmBC,IAAwBrpE,EAAAA,GAAAA,IAAmB,IAE/DspE,GADwBrlC,EAAAA,GAAAA,GAAYmlC,KACcA,GAExD/jE,EAAAA,GAAAA,GAAe,CACb/c,WACAgd,OAAQ/D,IAGV,MAAMgoE,GAAY/oE,EAAAA,GAAAA,KAAQ,IACjBjH,EAAUA,EAAQv+C,KAAKwuH,GAAWA,EAAOtjH,SAAU,IACzD,CAACqzC,IAEEkwE,GAAqBppE,EAAAA,GAAAA,KAAa5sC,IACtC01G,EAAmB,CAAE11G,SAAQ,GAC5B,CAAC01G,IAEEO,GAAelpE,EAAAA,GAAAA,KAAQ,KAE3B,MAAMopC,GAAY9xF,EAAAA,EAAAA,MAAYyK,MAAMrM,KAC9ByzH,EAAqBb,GAAkBc,EAAAA,EAAAA,IAAkBd,EAAiBl/B,EAAWh8B,GAAe,GAE1G,OAAOi8D,EAAAA,GAAAA,IACLpxH,EAAAA,EAAAA,IAAO,IACFkxH,KACCtjG,GAAgB,MAChBC,GAAiB,KACpBh2B,QAAQ4V,IACT,MAAMnF,EAAO6oF,EAAU1jF,GAOvB,OACGqjH,EAAUz3H,SAASoU,IACjBA,IAAWzV,KACTsQ,KAAS+J,EAAAA,EAAAA,IAAU/J,KAAWq1C,GAAar1C,EAAK+oH,oBAAqB,IAG/E,GACA,CAAChB,EAAiBl7D,EAAavnC,EAAcC,EAAe71B,EAAe84H,EAAWnzE,IAEnF2zE,GAAiB1pE,EAAAA,GAAAA,KAAY,KAC7B+oE,EAAkB/4H,SACpB84H,EAAmB,CAAE11G,MAAO,KAC5By1G,EAAWE,GACb,GACC,CAACA,EAAmBD,EAAoBD,IAE3C,OACE1qE,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,kBACb+nC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,wBACb+nC,GAAAA,GAAAC,cAACurE,GAAAA,EAAM,CACLC,QAASP,EACTQ,YAAad,EACbe,YAAav8D,EACbw8D,kBAAmBnoF,EAAK,yBACxBooF,cAAc,4BACdjzG,UAAW2xG,EACXuB,oBAAqBjB,EACrBkB,eAAgBd,EAChBe,cAAY,EACZC,gBAAiBnB,IAGnB9qE,GAAAA,GAAAC,cAACisE,GAAAA,EAAoB,CACnBj5E,QAASxsC,QAAQmkH,EAAkB/4H,QACnCkyE,SAAUnrD,EACV6pC,UAAWhf,EAAK,yBAChB2e,QAASmpE,GAER3yG,EACConC,GAAAA,GAAAC,cAAC2J,GAAAA,EAAO,CAACpH,MAAM,UAEfxC,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,4BAIf,KC9HV,GAPwC0nC,IACtC,MAAMwsE,GAActsE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAGnD,OAAO6rE,EAAcnsE,GAAAA,GAAAC,cAACksE,EAAgBxsE,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECG/D,GAPsCtB,IACpC,MAAMysE,GAAYvsE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,aAGjD,OAAO8rE,EAAYpsE,GAAAA,GAAAC,cAACmsE,EAAczsE,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECC3D,GAP2BorE,KACzB,MAAMC,GAAYzsE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,aAGjD,OAAOgsE,EAAYtsE,GAAAA,GAAAC,cAACqsE,EAAS,MAAMtsE,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECKhD,GAPuCtB,IACrC,MAAM4sE,GAAa1sE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,cAGlD,OAAOisE,EAAavsE,GAAAA,GAAAC,cAACssE,EAAe5sE,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECA7D,GAN6BurE,KAC3B,MAAMC,GAAc5sE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAEnD,OAAOmsE,EAAczsE,GAAAA,GAAAC,cAACwsE,EAAW,MAAMzsE,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,E,yBCVpD,MCWMyrE,IAAwB14G,EAAAA,EAAAA,KAAU/R,GAAOA,KAAM,KAAK,GAE1D,IAAI0qH,IAA8B,EA+FlC,SAASC,GAAoBC,GAC3B,OAAQA,GACN,IAAK,UACH,OAAOC,EAAAA,GAAaC,WACtB,IAAK,UACH,OAAOD,EAAAA,GAAaE,UACtB,IAAK,UACH,OAAOF,EAAAA,GAAaG,aACtB,QACE,OAAOH,EAAAA,GAAaI,YAE1B,C,gBCoCA,SAASC,GACPC,EACA3B,GAEA,MAAOllH,EAAa8mH,IAAWC,EAAAA,GAAAA,GAC7BF,EACA3B,OACA34H,EACAy6H,EAAAA,IAKF,MAAO,CAAChnH,EAAa8mH,KAFJ9mH,IAAgBklH,GAAWllH,EAAY,KAAOklH,EAAQ,IAGzE,CAEA,SAAS+B,GACPC,EACAC,EACAN,EACAvuH,EACAge,EACAxmB,GAEA,MAAMs3H,GAAgBjpE,EAAAA,GAAAA,OAEtBuZ,EAAAA,GAAAA,IAAc,KACZ0vD,EAAcx1G,aAAUrlB,CAAS,GAChC,CAACuD,KAEJ4nE,EAAAA,GAAAA,IAAc,KACRyvD,IAAsBD,GAAsB5uH,GAAgBge,IAC9D8wG,EAAcx1G,SAAUy1G,EAAAA,EAAAA,IACtB/uH,EACAge,EACA4wG,GAEJ,GACC,CAAC5uH,EAAcge,EAAU6wG,EAAmBD,IAE/C,MAAOlnH,EAAa8mH,IAAWC,EAAAA,GAAAA,GAC7BF,EACAO,EAAcx1G,aACdrlB,EACuB,UAAvB26H,EAAiC1xG,EAAAA,IAAqBiB,EAAAA,KAKxD,MAAO,CAACzW,EAAa8mH,KAFJ9mH,IAAgBonH,EAAcx1G,SAAW5R,EAAY,KAAOonH,EAAcx1G,QAAQ,IAGrG,C,wFC9MA,MC8JA,IAAeqoC,EAAAA,GAAAA,KAjIf,UAAoB,MAAEvuC,EAAK,YAAEkgE,EAAW,UAAE5/B,IACxC,MAAM,gBACJM,EAAe,uBACfg7E,EAAsB,kBACtBC,EAAiB,iBACjB9jH,IACEgJ,EAAAA,EAAAA,MAEEywB,GAAOge,EAAAA,GAAAA,KAEP6mB,GAAe5jB,EAAAA,GAAAA,IAAuB,MAEtCqpE,GAAoB3nE,EAAAA,GAAAA,IAAgB,IAAMkiB,EAAanwD,UACvD61G,GAAiB5nE,EAAAA,GAAAA,IAAgB,IAAM5xD,SAASmgC,OAChDs5F,GAAiB7nE,EAAAA,GAAAA,IAAgB,IAAM5xD,SAAS8qD,cAAc,0CAC9D4uE,GAAY9nE,EAAAA,GAAAA,IAAgB,KAAM,CAAG+nE,YAAY,EAAMC,SAAS,MAEhEp8H,EAASigB,GAASA,EAAMjgB,OACxB+0B,EAAgB9U,GAAS,YAAaA,EACtClgB,EAAQg1B,GAAiB9U,EAAMo8G,MAC/BnvH,EAAY+S,GAAS,cAAeA,EACpC3d,EAAQyyB,EAAiB9U,EAAmB7d,QAAQE,WAAQxB,EAC5D6gG,EAAY5sE,GAAgB6uD,EAAAA,EAAAA,IAAkB3jE,QAAqBnf,EAEnE8gG,GADanzB,EAAAA,GAAAA,GAASkzB,IACGr/F,GAAOK,WAAWyiD,SAEjDyJ,EAAAA,GAAAA,KAAU,MACJ5uC,GAAW8U,GAAiB7nB,GAC9B2uH,EAAuB,CAAE77H,OAAQigB,EAAMjgB,QACzC,GACC,CAACkN,EAAW6nB,EAAe9U,IAE9B,MAAM,kBACJmwD,EAAiB,oBAAEm4B,EAAmB,wBACtCl4B,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuB6F,GAAev2E,IACpC,UACJ6wD,EAAS,UAAEC,EAAS,iBAAE8P,EAAgB,iBAAE27D,EAAkB9kD,MAAO+kD,IAC/DC,EAAAA,GAAAA,GACFj0B,EACAwzB,EACAC,EACAC,EACAC,GAGIxrD,GAAc7gB,EAAAA,GAAAA,KAAY,KAC9BhP,EAAgB,CACd7gD,OAAQigB,EAAMjgB,OACd6I,QAASoX,EAAM5f,GACfggD,cAAc,EACd5qB,WAAW,EACX8qB,aACA,GACD,CAACA,EAAWtgC,EAAM5f,GAAI4f,EAAMjgB,SAEzB+hF,GAAkB3tB,EAAAA,GAAAA,IAAiB7b,KACvCkkF,EAAAA,GAAAA,GAAoClkF,GACpC83B,EAAwB93B,EAAE,IAGtBmkF,GAAiBtoE,EAAAA,GAAAA,IAAiB7b,KACtC8pC,EAAAA,GAAAA,GAAU9pC,GAEVujF,EAAkB,CAAE97H,SAAQ6I,QAASoX,EAAM5f,GAAIkL,UAAU,IACzDyM,EAAiB,CACf7Y,QAASsyC,EAAK,mCAEhB8+B,GAAwB,IAGpBosD,GAAmBvoE,EAAAA,GAAAA,IAAiB7b,KACxC8pC,EAAAA,GAAAA,GAAU9pC,GAEVujF,EAAkB,CAAE97H,SAAQ6I,QAASoX,EAAM5f,GAAIkL,UAAU,IACzDyM,EAAiB,CACf7Y,QAASsyC,EAAK,uCAEhB8+B,GAAwB,IAG1B,OACEviB,GAAAA,GAAAC,cAAA,OACEqI,IAAKggB,EACLrwD,WAAW0pC,EAAAA,GAAAA,GDlHM,uBCkHsB,eACvC4hB,YAAawQ,EACb3xB,QAASsgB,EACTc,cAAelB,GAEdpjE,GACC8gD,GAAAA,GAAAC,cAAA,YACED,GAAAA,GAAAC,cAAA,KAAGhoC,WAAW0pC,EAAAA,GAAAA,GDzHoG,uBCyHjE,2BAA4B,mBAC5Ele,EAAK,iBAGVuc,GAAAA,GAAAC,cAAA,OAAKhoC,UD7H6C,wBC8H/C27E,GACC5zC,GAAAA,GAAAC,cAAA,OAAKshB,IAAKqyB,EAAUnqB,IAAI,GAAGxxD,UD/HkD,uBC+HzBm+D,WAAW,IAEhErvD,GAAiBi5B,GAAAA,GAAAC,cAAC2uE,GAAAA,EAAgB,CAAC38G,MAAOA,IAC1CkgE,GAAenyB,GAAAA,GAAAC,cAAA,QAAMhoC,UAAU,oBAETnlB,IAAxBynG,GACCv6C,GAAAA,GAAAC,cAAC0C,GAAAA,EAAI,CACHtsB,OAAQ+rC,EACRzP,iBAAkBA,EAClB27D,iBAAkBA,EAClB1rE,UAAWA,EACXC,UAAWA,EACX2mB,MAAO+kD,EACPt2G,WAAW0pC,EAAAA,GAAAA,GD5I4I,uBC4IzG,sBAC9CmB,WAAS,EACTC,QAASwf,EACT5L,oBAAqB6L,EACrB2rD,YAAU,GAET57E,GAAayN,GAAAA,GAAAC,cAACiC,GAAAA,EAAQ,CAACC,KAAK,MAAMC,QAASssE,GAAiBjrF,EAAK,6BAChE8O,GACAyN,GAAAA,GAAAC,cAACiC,GAAAA,EAAQ,CAACC,KAAK,QAAQC,QAASusE,GAC7BlrF,EAAK,qCAOpB,I,wCCtBA,MAAMorF,GAAmB,CACvB,CAAExnH,KAAM,QAAS0Q,MAAO,mBACxB,CAAE1Q,KAAM,YAAa0Q,MAAO,mBAC5B,CAAE1Q,KAAM,QAAS0Q,MAAO,mBACxB,CAAE1Q,KAAM,QAAS0Q,MAAO,oBAwhB1B,IAAeyoC,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KAClB,CAAC9yD,GACCuB,SAAQ2E,WAAU23D,eAElB,MAAM/6D,GAAO+C,EAAAA,EAAAA,KAAW7F,EAAQuB,GAC1B8X,GAAeC,EAAAA,EAAAA,KAAmBtZ,EAAQuB,GAC1C4M,GAAelG,EAAAA,EAAAA,KAAmBjI,EAAQuB,IACxCwrB,YAAa4xG,EAAe,cAAElyG,IAAkBX,EAAAA,EAAAA,KAAyB9rB,IAAW,CAAC,GACvF,SAAE0sB,GAAcD,GAAiBkyG,GAAmBlyG,EAAckyG,IAAqB,CAAC,EAExFC,EAActoH,QAAQxT,GAAM6E,SAAWzB,GAAYA,IAAaD,EAAAA,KAE9DsB,KAAM0zF,EAAWrlE,aAAcF,GAAqB11B,EAAO4T,OAC3DrM,KAAMw1F,GAAc/8F,EAAOsH,MAE7BmM,GAAgB/J,EAAAA,EAAAA,IAAiBnI,EAAQ2E,EAAUlG,EAAO8B,eAE1D2pC,EAAU3oC,IAAQ0oB,EAAAA,EAAAA,IAAY1oB,GAC9B2kD,EAAY3kD,IAAQkY,EAAAA,EAAAA,IAAclY,GAClC+7H,GAAiBD,IAAgBnrH,IAAkBg4B,GAAYgc,IAAaq3E,EAAAA,EAAAA,IAAYh8H,IACxF8nD,EAAUvxC,GAAcuxC,QACxBM,EAAmB7xC,GAAc6xC,iBACjC6zE,EAAmBF,GAAiB/7H,IACpCA,EAAKk8H,aAAgB3lH,IAAiBA,EAAa4lH,gBACnDC,EAAgBL,GAAiB/7H,KACjCktH,EAAAA,EAAAA,IAAiBltH,EAAM,kBAAmBitH,EAAAA,EAAAA,IAAkBjtH,EAAM,gBAAkBA,EAAK46G,WACzFyhB,EAAmBN,GAAiB/7H,KAASktH,EAAAA,EAAAA,IAAiBltH,EAAM,aAAeA,EAAK46G,WACxFp2B,GAAkBC,EAAAA,EAAAA,KAAsBvnF,EAAQuB,IAChD,kBAAE69H,IAAsBC,EAAAA,EAAAA,KAAwBr/H,EAAQuB,IAAW,CAAC,EACpEoc,GAAuBC,EAAAA,EAAAA,KAA2B5d,GAExD,IAAIs/H,EACAC,EACAntH,GACAhE,EAAAA,EAAAA,IAAS7M,KACXg+H,EAAiBh+H,EACjB6Q,GAAOC,EAAAA,EAAAA,KAAWrS,EAAQu/H,GAC1BD,EAAoBltH,IAASA,EAAKskB,UAAWva,EAAAA,EAAAA,IAAU/J,KAAUqB,GAGnE,MAAMwI,EAAO7J,GAAQtP,EACf08H,GAAeC,EAAAA,EAAAA,KAAmBz/H,EAAQuB,GAC1Cm+H,EAAgBzjH,IAAS7J,GAAMskB,SAAYza,EAAKssC,kBAAoBi3E,GAAcG,oBAClFlsH,EACAu5B,EAAc0yF,GAAgBlyF,EAAAA,EAAAA,KAAkBxtC,EAAQic,EAAK/Z,SAAMS,EACnE0rC,EAAWrB,GAAar/B,UACxBiyH,EAAa5yF,GAAazlC,KAC1Bs4H,EAAkB7yF,GAAa8yF,WAErC,MAAO,CACL7jG,OAAO29B,EAAAA,EAAAA,KAAY55D,GACnBynD,YACA83E,iBACApxH,eACAue,WACAiyG,kBACAW,oBACAI,gBACAb,gBACAE,mBACAG,gBACAC,mBACAr9H,cAAe9B,EAAO8B,cACtB6mH,oBAAoBlzE,EAAAA,EAAAA,KAAyBz1C,EAAQ69D,GACrD1nD,aAAcrT,GAAMqT,aACpBsxE,kBAAmBH,GAAiBl/E,IACpC6yF,YACAvlE,mBACAqnE,YACA1uD,WACAwxF,kBACAD,aACAj4B,gBAAiB7kG,GAAMk/E,YACvB7vC,gBAAgBjyC,EAAAA,EAAAA,KAAeF,GAAQmyC,eACvCF,uBAAuB/xC,EAAAA,EAAAA,KAAeF,GAAQiyC,sBAC9C62D,mBAAoB9oG,EAAOyvB,SAASwR,MAAM6nE,mBAC1Ci3B,gBAAiBX,EACjBzhH,uBACAihH,cACAnrH,gBACAusH,sBAAsBt4G,EAAAA,GAAAA,GAAmB1nB,EAAQ,0BAC7C6+H,GAAiBj0E,GAAW,CAAEA,UAASM,uBACvCo0E,GAAqBltH,GAAQ,CAAE6tH,cAAe7tH,EAAKukB,aAAavuB,KACrE,GAnFe0qD,EAlhBuBotE,EACzC3+H,SACA2E,WACAi6H,eACAC,uBACAnkG,QACAwrB,YACA83E,iBACAz9H,gBACAqM,eACAue,WACA2hB,WACAwxF,kBACAD,aACAjB,kBACAW,oBACAI,gBACAb,gBACAE,mBACAG,gBACAC,mBACAc,gBACAr1E,UACAM,mBACA+vC,YACAvlE,mBACAqnE,YACA4rB,qBACAxyG,eACAsxE,oBACAkgB,kBACAx1D,iBACA22D,qBACAi3B,kBACApiH,uBACAqiH,uBACApB,cACAnrH,gBACAw+B,4BAEA,MAAM,wBACJouF,EAAuB,gBACvBC,EAAe,gBACfC,EAAe,SACfllH,EAAQ,yBACRmlH,EAAwB,gBACxB7yB,EAAe,gBACfC,EAAe,aACf9iG,EAAY,kBACZ8kB,EAAiB,6BACjB6wG,EAA4B,sBAC5BC,GAAqB,mBACrBC,GAAkB,iBAClBl1E,GAAgB,4BAChB7C,KACE/lC,EAAAA,EAAAA,MAGEs1D,IAAe5jB,EAAAA,GAAAA,IAAuB,MAEtCD,IAAgBC,EAAAA,GAAAA,IAAuB,MACvCjhB,IAAOge,EAAAA,GAAAA,MACNsvE,GAAgBC,KAAqBxvE,EAAAA,GAAAA,MAEtCxhC,GAAYpc,EAAgB5J,OAAO3D,GAAaq5H,GAAkBh+H,EAClEu/H,GAAkBjxG,KAAc/tB,IAAkB2R,EAElDqkD,IAAOjG,EAAAA,GAAAA,KAAQ,IAAO,IACtBivE,KAAoBrtH,EAAgB,CAAC,CAAEyD,KAAM,UAAoB0Q,MAAO,oBAAuB,MAC/F83G,EAAgB,CAAC,CAAExoH,KAAM,UAAoB0Q,MAAO,mBAAsB,MAC1E83G,GAAiBoB,GAAkB,CAAC,CAAE5pH,KAAM,iBAA2B0Q,MAAO,0BAA6B,MAC3Gi3G,EAAgB,CAAC,CACnB3nH,KAAM,UAAoB0Q,MAAO6/B,EAAY,qBAAuB,iBACjE,MACFi3E,MAGEE,EAAuE,GAAzD,CAAC,CAAE1nH,KAAM,QAAkB0Q,MAAO,uBACjD03G,EAAoB,CAAC,CAAEpoH,KAAM,cAAwB0Q,MAAO,qBAAwB,MACpF6/B,GAAas4E,GAAiBr+H,OAC9B,CAAC,CAAEwV,KAAM,kBAA4B0Q,MAAO,uBAC5C,KACF,CACF03G,EACAT,EACAa,EACAj4E,EACAm3E,EACAmB,EACAe,GACArtH,IAGIstH,IAAalvE,EAAAA,GAAAA,KAAQ,KACzB,IAAK1f,EACH,OAAO,EAGT,MAAMr9B,EAAQgjD,GAAKxnD,WAAU,EAAG4G,UAAWA,IAASi7B,IACpD,OAAkB,IAAXr9B,EAAe,EAAIA,CAAK,GAC9B,CAACq9B,EAAgB2lB,MAEbC,GAAWipE,KAAgB3vE,EAAAA,GAAAA,IAAS0vE,KAE3CrwE,EAAAA,GAAAA,KAAU,KACR,IAAKve,EAAgB,OACrB,MAAMr9B,EAAQgjD,GAAKxnD,WAAU,EAAG4G,UAAWA,IAASi7B,KAErC,IAAXr9B,GACJksH,GAAalsH,EAAM,GAClB,CAACq9B,EAAgB2lB,MAEpBpH,EAAAA,GAAAA,KAAU,KACJjJ,IAAcs4E,GAChBn3E,GAA4B,CAAErnD,UAChC,GACC,CAACA,EAAQkmD,EAAWs4E,IAEvB,MAAMkB,GAAqBlpE,GAAYD,GAAKp2D,OAAS,EAAIo2D,GAAKp2D,OAAS,EAAIq2D,GACrE2kE,GAAU5kE,GAAKmpE,IAAoB/pH,KACnCgqH,IAAwBxvE,EAAAA,GAAAA,KAAY,EAAG9+C,eAC3C8tH,GAAsB,CAAE7+H,OAAQN,EAAQqR,YAAW,GAClD,CAACrR,IACE4/H,IAA2BzvE,EAAAA,GAAAA,KAAY,EAAG9+C,eAC9C+tH,GAAmB,CAAE9+H,OAAQC,EAAgB8Q,YAAW,GACvD,CAAC9Q,KAEGs/H,GAAYhrH,GAAa8mH,GAASmE,IHlQ5B,SACbf,EACAC,EACAe,EACAC,EACAZ,EACAjE,EACAiC,EACA6C,EACAvB,EACAhlC,EACAvlE,EACAqnE,EACAruF,EACAge,EACAxmB,EACAmoC,EACAwxF,EACAE,GAEA,MAAMqB,EAAyB,YAAZ1E,GAA0BiC,EAA4BA,EAAVjC,EAEzD9B,GAAY/oE,EAAAA,GAAAA,KAAQ,KACxB,GAAK2vE,GAAqBvmC,GAAcvlE,EAIxC,OAAO+rG,EAAAA,EAAAA,IACLD,EAAiBn1H,KAAI,EAAGkL,YAAaA,IACrC0jF,EACAvlE,EACD,GACA,CAAC8rG,EAAkBvmC,EAAWvlE,IAE3BpJ,GAAUulC,EAAAA,GAAAA,KAAQ,KACtB,GAAKouE,GAAkBljC,EAIvB,OAAOm+B,EAAAA,GAAAA,GAAY+E,GAAe,EAAK,GACtC,CAACljC,EAAWkjC,KAERyB,EAAmBC,EAAgBC,GAA2B5E,GACnEsD,EAAiB1F,IAGZiH,EAAkBC,EAAcC,GAAyB1E,GAC9D,QAAS+D,EAAYE,EAAgB5yH,EAAcge,EAAUxmB,IAGxD87H,EAAqBC,EAAkBC,GAA6B7E,GACzE,YAAa+D,EAAYE,EAAgB5yH,EAAcge,EAAUxmB,IAG5Di8H,EAAiBC,EAAcC,GAAyBhF,GAC7D,QAAS+D,EAAYE,EAAgB5yH,EAAcge,EAAUxmB,IAGxDo8H,EAAkBC,EAAcC,GAAyBnF,GAC9D,QAAS+D,EAAYE,EAAgB5yH,EAAcge,EAAUxmB,IAGxDu8H,EAAkBC,EAAeC,GAA0BtF,GAChE,QAAS+D,EAAYE,EAAgB5yH,EAAcge,EAAUxmB,IAGxD08H,EAAuBC,EAAoBC,GAA+B9F,GAC/EuD,EAAiBj0G,IAGZy2G,EAAkBC,EAAgBC,GAA2BjG,GAClEuE,EAAalzF,IAIb60F,EACAC,EACAC,GACEpG,GACF2D,EAAoBd,GAGtB,IAAIzpH,EACA8mH,EACAmE,GAAgB,EAEpB,OAAQD,GACN,IAAK,UACHhrH,EAAcsrH,EACdxE,EAAUyE,EACVN,EAAgBO,EAChB,MACF,IAAK,cACHxrH,EAAcwsH,EACd1F,EAAU2F,EACVxB,EAAgByB,EAChB,MACF,IAAK,QACH1sH,EAAcyrH,EACd3E,EAAU4E,EACVT,EAAgBU,EAChB,MACF,IAAK,YACH3rH,EAAc4rH,EACd9E,EAAU+E,EACVZ,EAAgBa,EAChB,MACF,IAAK,QACH9rH,EAAc+rH,EACdjF,EAAUkF,EACVf,EAAgBgB,EAChB,MACF,IAAK,QACHjsH,EAAcksH,EACdpF,EAAUqF,EACVlB,EAAgBmB,EAChB,MACF,IAAK,QACHpsH,EAAcqsH,EACdvF,EAAUwF,EACVrB,EAAgBsB,EAChB,MACF,IAAK,UACHvsH,EAAc2sH,EACd7F,EAAU8F,EACV3B,EAAgB4B,EAChB,MACF,IAAK,iBACH7sH,EAAc8sH,EACdhG,EAAUiG,EACV9B,EAAgB+B,EAChB,MACF,IAAK,kBACHhtH,EAAc2pH,EACd,MACF,IAAK,UACHsB,GAAgB,EAIpB,MAAO,CAACD,EAAYhrH,EAAa8mH,EAASmE,EAC5C,CGqH4DgC,CACxD/C,EACAC,EACAC,EACAU,GACAC,GACAzE,GACAiC,EACA/zE,EACAq1E,EACAhlC,EACAvlE,EACAqnE,EACA5uF,EACAue,EACAxmB,EACAmoC,EACAwxF,EACAE,GAEIuD,GAAcxC,IAAkC,YAAfM,IACjC1B,GAAgC,YAAf0B,IACH,YAAfA,KACEvC,GAAgC,UAAfuC,GAClBhpE,GAAYN,GAAKxnD,WAAU,EAAG4G,UAAWA,IAASkqH,MAExDmC,EAAAA,GAAAA,GAAqC,YAAfnC,GAA2BhrH,QAA0BzT,GAE3E,MAAM,aAAE29G,IJ3RK,SACbnoC,EACAukD,EACAyD,EACAC,EACAnuF,GAAwB,IAGxBisB,EAAAA,GAAAA,IAAsB,EAAEslE,MACtB,GAAKA,GAAeA,IAAgB9G,GAAaA,GAAWzqF,EAAwB,CAClF,MAAM63C,EAAY3R,EAAanwD,QACzBy7G,EAAS35C,EAAU36B,cAA8B,YACnD26B,EAAU6nB,UAAY8xB,EAAOvjB,YAC/BkgB,EAAqB3D,GAAoBC,IACzCF,IAA8B,GAC9BlmD,EAAAA,GAAAA,IAAcwT,EAAW25C,EAAQ,aAAS9gI,OAAWA,OAAWA,EAtB5C,KAuBpBuG,YAAW,KACTszH,IAA8B,CAAK,GAvBN,KA0BnC,IACC,CAACE,EAAS0D,EAAsBjoD,EAAclmC,KAGjDisB,EAAAA,GAAAA,IAAsB,EAAEwlE,MACtB,GAAIvD,IAAiBxD,EAAAA,GAAauD,SAAWC,IAAiBuD,EAC5D,OAGF,MAAM55C,EAAY3R,EAAanwD,QAC/B,IAAK8hE,EACH,OAGF,MAAM65C,EAAY75C,EAAU36B,cAA8B,aACrDw0E,GAAaA,EAAUzjB,UAAYp2B,EAAU6nB,YAIlD6qB,IAA8B,GAC9BlmD,EAAAA,GAAAA,IACEwT,EACAA,EAAUmM,kBACV,aACAtzF,EACyB,EAAzBmnF,EAAU2nB,cAGZvoG,YAAW,KACTszH,IAA8B,CAAK,GAvDF,KAwDD,GACjC,CAAC2D,EAAchoD,IAElB,MAAMyrD,GAAwB3tE,EAAAA,GAAAA,IAAgB,KAC5C,MAAM6zB,EAAY3R,EAAanwD,QAC/B,IAAK8hE,EACH,OAGF,MAAM65C,EAAY75C,EAAU36B,cAA8B,YAC1D,IAAKw0E,EACH,OAGF,IAAI72F,EAAsB6vF,EAAAA,GAAauD,QACnCp2C,EAAU6nB,WAAagyB,EAAUzjB,YACnCpzE,EAAQ2vF,GAAoBC,IAG9B0D,EAAqBtzF,EAAM,IAqB7B,OAjBA4jB,EAAAA,GAAAA,KAAU,KACJ8rE,IAIJoH,GAAuB,GACtB,CAACA,EAAuBlH,IAWpB,CAAEpc,cARYrqD,EAAAA,GAAAA,IAAgB,KAC/BumE,IAIJD,GAAsBqH,EAAsB,IAIhD,CIgM2BC,CACvB1rD,GACAipD,GACAjB,EACAC,EACAnuF,IAGI,mBAAE6xF,GAAkB,qBAAEC,IC9Sf,SACb5rD,EACA6rD,EAAuB,uCAgDvB,OA7CAtzE,EAAAA,GAAAA,KAAU,KACR,SAASuzE,IACP,MAAMn6C,EAAY3R,EAAanwD,QACzBk8G,EAAep6C,EAAU36B,cAA8B60E,GACvDP,EAAS35C,EAAU36B,cAA8B,YACvD,GAAI+0E,GAAgBT,EAAQ,CAC1B,MAAMryB,EAAYtnB,EAAU2nB,aAAegyB,EAAOhyB,cAElDjb,EAAAA,GAAAA,KAAgB,KACd0tC,EAAa7qD,MAAM8qD,UAAa,GAAE/yB,KAAa,GAEnD,CACF,CAMA,OAJA6yB,IAEAtjH,OAAOs2C,iBAAiB,SAAUgtE,GAAc,GAEzC,KACLtjH,OAAOu2C,oBAAoB,SAAU+sE,GAAc,EAAM,CAC1D,GACA,CAAC9rD,EAAc6rD,IAwBX,CAAEF,oBArBkB7tE,EAAAA,GAAAA,IAAgB,MAEzCwtB,EAAAA,GAAAA,KAAe,KACb,MAAMqG,EAAY3R,EAAanwD,QAC/B,GAAkC,WAA9B8hE,EAAUzQ,MAAM+qD,UAAwB,OAE5C,MAAMC,EAAiBv6C,EAAUwrC,YAAcxrC,EAAUw6C,aAEzD9tC,EAAAA,GAAAA,KAAgB,KACd1M,EAAUzQ,MAAM+qD,UAAY,SAC5Bt6C,EAAUzQ,MAAMkrD,aAAgB,GAAEF,KAAkB,GACpD,GACF,IASyBN,sBANA9tE,EAAAA,GAAAA,IAAgB,KAC3C,MAAM6zB,EAAY3R,EAAanwD,QAC/B8hE,EAAUzQ,MAAM+qD,UAAY,SAC5Bt6C,EAAUzQ,MAAMkrD,aAAe,GAAG,IAItC,CD2PuDC,CAAmBrsD,KAEjEssD,GAAaC,ILpTCC,MACrB,MAAOF,EAAaG,IAAkBvzE,EAAAA,GAAAA,IAAS,GAM/C,MAAO,CAACozE,GAJkB/yE,EAAAA,GAAAA,KAAY,KACpCkzE,GAAgB58G,GAAYA,EAAU,GAAE,GACvC,IAEoC,EK6SC28G,IAEhC3uB,QAAS6uB,KAAgC5uB,EAAAA,GAAAA,IAAwB,CACvEC,QAAS/9B,GACTwgC,WA3K0B,MA8KtBmsB,IAAuB7uE,EAAAA,GAAAA,IAAgB,KAC3C8tE,KACAW,IAAkB,IAGdK,IAA4B9uE,EAAAA,GAAAA,IAAgB,KAChDwqE,EAA6B,CAAEjuF,uBAAwB6nF,EAAAA,GAAuBjtG,YAAa,KAI7FsjC,EAAAA,GAAAA,KAAU,KACR2vE,EAAwB,CAAEtvF,UAAW2rF,IAA6B,GACjE,CAAC2D,EAAyB3D,GAASx2H,KAEtCwqD,EAAAA,GAAAA,KAAU,KACR9gC,EAAkB,CAAEC,cAAY,GAC/B,CAACA,KAEJ,MAAMm1G,IAAoB/uE,EAAAA,GAAAA,IAAiBvW,IACzCiuD,EAAgB,CACdpsG,OAAQsuB,GACR3pB,SAAUD,EAAAA,GACVy5C,UACAxK,OAAQ84D,EAAAA,GAAkB+uB,aAC1B,IAGEkI,IAAkBhvE,EAAAA,GAAAA,IAAiB1wD,IACvCqoG,EAAgB,CAAErsG,OAAQsuB,GAAWtqB,aAAY,IAG7C2/H,IAAoBjvE,EAAAA,GAAAA,IAAiB/zD,IACzCmZ,EAAS,CAAEnZ,MAAK,IAGZijI,IAAqBlvE,EAAAA,GAAAA,IAAiB1wD,IAC1CuF,EAAa,CAAEvJ,OAAQsuB,GAAWtqB,aAAY,IAG1C6/H,IAAgCnvE,EAAAA,GAAAA,IAAgB,KACpD4qE,QAAkBl+H,EAAU,IAkC9B,IAAI0iI,IA/BJnnE,EAAAA,GAAAA,IAAsB,EAAEonE,MACtB,QAA0B3iI,IAAtB2iI,GAAiD,IAAdvtE,IAAmButE,IAAsBzG,EAC9E,OAGF,MAAM0G,EAAextE,IAAa8mE,EAAgB,GAAK,GAEvDmC,GAAargI,KAAKC,IAAI2kI,EAAcztE,GAAKp2D,OAAS,GAAG,GACpD,CAACm9H,EAAe9mE,GAAWD,MAE9BpH,EAAAA,GAAAA,KAAU,KACR,GAAK4D,GAActsC,SAAY2vB,EAAAA,GAI/B,OAAOue,EAAAA,GAAAA,IAAc5B,GAActsC,QAAS,CAC1CmuC,wBAAyB,WACzBC,QAAUA,CAAChc,EAAGvnC,IACRA,IAAcwjD,GAAAA,GAAeC,MAC/B0qE,GAAargI,KAAKC,IAAIqgI,GAAqB,EAAGnpE,GAAKp2D,OAAS,KACrD,GACEmR,IAAcwjD,GAAAA,GAAeE,QACtCyqE,GAAargI,KAAKE,IAAI,EAAGogI,GAAqB,KACvC,IAKX,GACD,CAACA,GAAoBnpE,GAAKp2D,SAIzB4hI,GACF+B,GAAkB1c,EAA2C,EA5PrC,IA8PdvyG,KACVivH,GAAiBG,EAAAA,KAEnB,MAAMC,IAAmBj6C,EAAAA,GAAAA,GAAkB,CAACjqF,EAAQ2E,EAAUk7H,GAAYH,IAAqBoE,IAiN/F,OACEx1E,GAAAA,GAAAC,cAAC41E,GAAAA,EAAc,CACbvtE,IAAKggB,GACLrwD,UAAU,wBACV69G,aAAe,uDAAsDvE,yBACrE3L,MAAOgQ,GAAmBrvH,QAAczT,EACxC8hI,YAAaA,GACbmB,cAAeC,EAAAA,IACfC,iBAAkBL,GAAmC,YAAfrE,GAA2BhE,EAAAA,GAAgBxxG,EAAAA,IAAsB,EAEvGm6G,sBAAoB,EACpBC,YAAU,EACVC,WAAY/I,GACZza,SAAUnC,KAER+gB,KAAkBP,IA2C1B,SAA2BjxG,EAAmB8nF,EAAkBlkG,GAC9D,OACEo8C,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,gBACb+nC,GAAAA,GAAAC,cAACo2E,GAAAA,EAAW,CAAC3uH,OAAQsY,EAAWs2G,aAAcxuB,IAC9C9nD,GAAAA,GAAAC,cAACs2E,GAAAA,EAAS,CAACC,aAAcx2G,EAAWpc,cAAeA,IAGzD,CAjDQ6yH,CAAkBz2G,GAAW84F,GAAsB8c,GAAkBhyH,IAErE0C,GACA05C,GAAAA,GAAAC,cAAA,OACEhoC,UAAU,gBAEV+nC,GAAAA,GAAAC,cAACoI,GAAAA,GAAU,CACTC,IAAK7D,GACLxzB,KAAMwS,GAAK6e,MAAQ,oBAAsB,iBACzCiG,UAAWA,GACXC,YAAaP,GAAKp2D,OAClB6kI,qBAAmB,EACnBz+G,UAAU,0BACV0+G,QAAS1C,GACT9K,OAAQ8L,IAnOlB,WACE,GAAmB,YAAf1D,GACF,OACEvxE,GAAAA,GAAAC,cAACyH,GAAAA,EAAQ,CAACzvC,UAAU,gBAAgB0vC,WAAW,QAAQ7d,UAAQ,IAInE,IAAKvjC,KAAgBqvH,KAAqBt3H,EAAc,CACtD,MAAMs4H,EAAYnD,KAAemC,GAC3BiB,EAA2BpwH,QAAuB,YAAf8qH,IAA4BrC,GAErE,OACElvE,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,uBACX2+G,IAAcC,GAA4B72E,GAAAA,GAAAC,cAAC2J,GAAAA,EAAO,MACnDitE,GAA4B72E,GAAAA,GAAAC,cAAC62E,GAAAA,EAAY,CAAC16H,KAAK,8CAGtD,CAEA,IAAKmK,GAAY1U,OAAQ,CACvB,IAAIuK,EAEJ,OAAQm1H,IACN,IAAK,UACHn1H,EAAO8yH,EAAmB,4CAA8C,mBACxE,MACF,IAAK,cACH9yH,EAAOqnC,GAAK,oBACZ,MACF,IAAK,YACHrnC,EAAOqnC,GAAK,wBACZ,MACF,IAAK,QACHrnC,EAAOqnC,GAAK,wBACZ,MACF,IAAK,QACHrnC,EAAOqnC,GAAK,wBACZ,MACF,IAAK,QACHrnC,EAAOqnC,GAAK,yBACZ,MACF,IAAK,UACHrnC,EAAOqnC,GAAK,mCACZ,MACF,IAAK,iBACHrnC,EAAOqnC,GAAK,sCACZ,MACF,QACErnC,EAAOqnC,GAAK,0BAGhB,OACEuc,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,sBACb+nC,GAAAA,GAAAC,cAAC62E,GAAAA,EAAY,CAAC16H,KAAMA,IAG1B,CAEA,OACE4jD,GAAAA,GAAAC,cAAA,OACEhoC,UAAY,WAAUs5G,UACtBlvE,IAAK5e,GAAK6e,OAAwB,UAAfivE,GAAyB,WAAQz+H,EACpD85G,eAAa,GAEG,UAAf2kB,GACEhrH,GAA0B/J,KAAKnK,GAAOiM,EAAajM,IAClD2tD,GAAAA,GAAAC,cAAC82E,GAAAA,EAAK,CACJnhF,IAAKvjD,EACLlB,QAASmN,EAAajM,GACtB8/E,YAAa2lB,GAAmBx5F,EAAajM,GAAI8/E,YACjD2F,oBAAqBk9C,GACrB5yE,QAAS+yE,OAGK,YAAf5D,IAA2C,mBAAfA,GAC9BhrH,GAA0B/J,KAAKnK,GAAO09H,IAAa19H,IAClD2tD,GAAAA,GAAAC,cAAC+2E,GAAU,CACTphF,IAAM,GAAE27E,MAAcl/H,IACtB4f,MAAO89G,EAAW19H,GAClB8/E,YAAa2lB,EACbvlD,UAA0B,mBAAfg/E,OAGE,cAAfA,GACDhrH,GAA0B/J,KAAKnK,GAAOiM,EAAajM,IAClD2tD,GAAAA,GAAAC,cAAC6kD,GAAAA,EAAQ,CACPlvD,IAAKvjD,EACLlB,QAASmN,EAAajM,GACtB4kI,UAAQ,EACRC,SAAO,EACPj/G,UAAU,cACV+gE,cAAepB,GAAmBtkF,SAASjB,GAC3CylF,oBAAqBk9C,GACrBmC,YAAa7B,GACbr8B,mBAAoBA,MAGP,UAAfs4B,GACDhrH,GAA0B/J,KAAKnK,GAAOiM,EAAajM,IAClD2tD,GAAAA,GAAAC,cAACm3E,GAAAA,EAAO,CACNxhF,IAAKvjD,EACLlB,QAASmN,EAAajM,GACtB8/E,YAAa2lB,GAAmBx5F,EAAajM,GAAI8/E,YACjD2F,oBAAqBk9C,GACrBqC,eAAgB/B,OAGH,UAAf/D,GACDhrH,GAA0B/J,KAAKnK,GAAOiM,EAAajM,IAClD2tD,GAAAA,GAAAC,cAAC65B,GAAAA,GAAK,CACJlkC,IAAKvjD,EACL+5B,MAAOA,EACPj7B,QAASmN,EAAajM,GACtBgzC,OAAQk/D,EAAAA,GAAY2oB,YACpBtqH,KAAMtE,EAAajM,GAAIuQ,KACvBqV,UAAU,cACVwsF,OAAQ2wB,GACR+B,YAAa7B,GACbhuF,aAAcwwD,IAAoBx5F,EAAajM,GAAI8/E,YACnD6G,cAAepB,GAAmBtkF,SAASjB,OAG9B,UAAfk/H,GACDhrH,GAA0B/J,KAAKnK,GAAOiM,EAAajM,IAClD2tD,GAAAA,GAAAC,cAAC65B,GAAAA,GAAK,CACJlkC,IAAKvjD,EACL+5B,MAAOA,EACPj7B,QAASmN,EAAajM,GACtB6xC,aAAaozF,EAAAA,GAAAA,GAAc7zF,GAAMnlC,EAAajM,GAAK66F,EAAW9B,GAC9D/lD,OAAQk/D,EAAAA,GAAY2oB,YACpBtqH,KAAMtE,EAAajM,GAAIuQ,KACvBqV,UAAU,cACVwsF,OAAQ2wB,GACR+B,YAAa7B,GACbhuF,aAAcwwD,IAAoBx5F,EAAajM,GAAI8/E,YACnD6G,cAAepB,GAAmBtkF,SAASjB,OAG9B,YAAfk/H,GACDhrH,GAA0B/J,KAAI,CAACnK,EAAIyB,KAClCksD,UAAAA,GAAAC,cAACs3E,GAAAA,EAAQ,CACP3hF,IAAKvjD,EACLq3H,cAAe51H,EACfmkB,UAAU,+DAEVmqC,QAASA,IAAMizE,GAAkBhjI,GACjCqzD,gBA5JoB8xE,EA4JmBnlI,EA3J1CmlI,IAAavlI,GAAkBq9H,EAA+B,CAAC,CACpEv3G,MAAO0rB,GAAK,iCACZ0e,KAAM,OACNyD,QAASA,KACPorE,GAAkBwG,EAAS,SAJ0B1kI,IA6J/CktD,GAAAA,GAAAC,cAACm9D,GAAAA,EAAe,CAAC11G,OAAQrV,EAAIolI,YAAap8E,IAAmBhpD,GAAKstF,eAAa,EAAC69B,WAAS,KA9JrG,IAAgCga,CAgKvB,IACgB,gBAAfjG,GACDhrH,GAA0B/J,KAAI,CAACnK,EAAIyB,IAClCksD,GAAAA,GAAAC,cAACs3E,GAAAA,EAAQ,CACP3hF,IAAKvjD,EACLq3H,cAAe51H,EACfmkB,UAAU,6CAEVmqC,QAASA,IAAM52C,EAAS,CAAEnZ,QAE1B2tD,GAAAA,GAAAC,cAAC+9D,GAAAA,EAAa,CAACtsH,OAAQW,OAGV,oBAAfk/H,GACFvxE,GAAAA,GAAAC,cAAA,OAAKrK,IAAK27E,IACNhrH,GAA0B/J,KAAI,CAAC6C,EAAWvL,IAC1CksD,GAAAA,GAAAC,cAACs3E,GAAAA,EAAQ,CACP3hF,IAAKv2C,EACLqqH,cAAe51H,EACfmkB,WAAW0pC,EAAAA,GAAAA,GACT,qCACC7zC,GAAwBha,IAAMo8H,EAAiBr+H,OAAS,GAAK,UAGhEuwD,QAASA,IAAM52C,EAAS,CAAEnZ,GAAIgN,KAE9B2gD,GAAAA,GAAAC,cAAC+9D,GAAAA,EAAa,CAAC0Z,WAAW,QAAQhmI,OAAQ2N,EAAWi+G,cAAY,QAGnExvG,GACAkyC,GAAAA,GAAAC,cAAAD,GAAAA,GAAAiC,SAAA,KAEEjC,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CAACtqC,UAAU,qBAAqB6+B,KAAK,UAAUsL,QAASA,IAAMxG,MAClEnY,GAAK,iBACNuc,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,4BAEf+nC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,iBACZyrD,EAAAA,GAAAA,GAAWjgC,GAAK,kBAAmB0sF,GAAuB,CAAC,4BAKlEr9H,EAGV,CAkCW0rE,IAEHxe,GAAAA,GAAAC,cAAC8H,GAAAA,EAAO,CAAC4vE,KAAG,EAACzvE,UAAWkpE,GAAoBnpE,KAAMA,GAAME,YAAagpE,MAIxE9B,GACCrvE,GAAAA,GAAAC,cAACisE,GAAAA,EAAoB,CACnBj5E,QAAwB,YAAfs+E,GACTnvE,QAAS8yE,GACTzyE,UAAWhf,GAAK,0BAEhBuc,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,+BAGhBq3G,GACCtvE,GAAAA,GAAAC,cAAC23E,GAAAA,EAAiB,CAChBvhG,OAAQ5vB,QAAQsqH,IAChBrpH,OAAQqpH,GACRhuE,QAASwyE,KAGE,KEhkBfsC,GAA4B,IAAMv0F,EAAAA,IAClC9Z,IAAwBxnB,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GAAO,IAE5D61H,GAAa,SAAbA,GAAa,OAAbA,EAAAA,EAAa,qBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,6BAAbA,EAAAA,EAAa,yBAAbA,EAAAA,EAAa,mBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,yCAAbA,EAAAA,EAAa,qCAAbA,EAAAA,EAAa,qCAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,kDAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,sDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,wEAAbA,EAAAA,EAAa,4DAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,gDAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,sCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,gCAAbA,CAAa,EAAbA,IAAa,IAwClB,MA8dA,IAAe70E,EAAAA,EAAAA,KACb,CAAC9yD,GACCuB,SAAQqmI,YAAWC,eAAc3hI,eAEjC,MAAMuF,GAAWvL,EAAAA,EAAAA,KAAeF,IACxB8kB,MAAOgjH,IAAuBl7G,EAAAA,EAAAA,KAAwB5sB,IAAW,CAAC,GAClE8kB,MAAOijH,IAAuBC,EAAAA,EAAAA,KAA2BhoI,IAAW,CAAC,GACrE8kB,MAAOmjH,IAAmBC,EAAAA,EAAAA,KAAuBloI,IAAW,CAAC,EAC/D8C,EAAOvB,GAASsE,EAAAA,EAAAA,KAAW7F,EAAQuB,QAAUoB,EAC7CyP,EAAOw1H,GAAarmI,IAAU6M,EAAAA,EAAAA,IAAS7M,IAAU8Q,EAAAA,EAAAA,KAAWrS,EAAQuB,QAAUoB,EAC9E8kD,EAAY3kD,IAAQkY,EAAAA,EAAAA,IAAclY,GAClCm5G,EAAgBn5G,GAAM6E,SAAW2O,QAAQpQ,GAAYA,IAAaD,EAAAA,IAClEyB,EAAQu0G,EAAgBn5G,EAAK0F,SAAStC,QAAavD,EACnDwlI,EAAelsB,GAAiBv0G,IAAS0gI,EAAAA,EAAAA,IAAkBtlI,EAAM4E,GACjE8tG,EAAQpjG,IAAQ+J,EAAAA,EAAAA,IAAU/J,GAC1B0uH,EAAkBv/H,GAASkI,EAAAA,EAAAA,KAAqBzJ,EAAQuB,QAAUoB,EAClE0lI,EAAa7yB,GAASpjG,GAAMi2H,WAE5BtkB,EAAgB3xG,IAAQk2H,EAAAA,EAAAA,IAAiBl2H,GACzCm2H,EAAYjyH,SAASuxH,GAAgBD,GAAarmI,IAAUinI,EAAAA,EAAAA,IAAgBxoI,EAAQuB,IAEpFknI,EAAkBnyH,QAAQ/U,GAAUkK,EAASyhB,WAAWve,SAASpN,IAASwsB,eAC1E26G,GAAqBzsB,GAAiB16G,GACxC+X,EAAAA,EAAAA,KAAmBtZ,EAAQuB,IAASmnI,uBACpC/lI,EACEqsB,EAAoBztB,EACtBkK,EAASyhB,WAAWve,SAASpN,IAASysB,YAAYF,YAASnrB,EAE/D,MAAO,CACL4lI,YACAxkB,gBACA2kB,oBACAjhF,YACA+tD,QACAyG,gBACAksB,eACA5wH,OAAQnF,GAAMlQ,GACdw0B,OAAQtkB,GAAMskB,OACdoxG,qBACAC,qBACAE,iBACAQ,kBACAz5G,oBACA8xG,kBACA1tE,4BAA6B3nD,EAAS2nD,4BACtCi1E,aACD,GA9CL,EA9d+CM,EAC7CpnI,SACA2E,WACA0iI,eACAhB,YACAiB,WACAhB,eACAiB,eACAC,sBACAC,oBACAC,oBACAC,kBACAC,cACAC,gBACAC,kBACAC,iBACAC,sBACApJ,eACAqJ,mBACAzlB,gBACAxsG,SACAmf,SACA6xG,YACA9gF,YACAqgF,qBACAC,qBACAE,iBACAQ,kBACAC,oBACA15G,oBACAokC,8BACAoiD,QACAyG,gBACAksB,eACArH,kBACAluE,UACA2b,iBACA85D,iBAEA,MAAM,wBACJoB,EAAuB,sBACvBC,EAAqB,kBACrBC,EAAiB,wBACjBC,EAAuB,iBACvBC,EAAgB,oBAChB7xB,EAAmB,qBACnB6K,EAAoB,iBACpBinB,EAAgB,yBAChBC,EAAwB,yBACxBC,EAAwB,mBACxBC,IACEpnH,EAAAA,EAAAA,OAEGqnH,EAAoBC,EAAkBC,KAAqB9sE,EAAAA,GAAAA,MAC5D,SAAEO,KAAaC,EAAAA,EAAAA,MAEfusE,IAAmBC,EAAAA,GAAAA,MAEnBC,IAAwBt0E,EAAAA,GAAAA,IAAgB,KAC5C8zE,EAAyB,CAAExoI,OAAQA,EAASusB,OAAQkB,IACpDu/C,EAAei8D,EAAAA,GAAkBC,WAAW,IAGxCC,IAA0Bz0E,EAAAA,GAAAA,IAAgB,KAC9C+zE,EAAyB,CAAEzoI,OAAQA,EAASgpB,KAAMyE,EAAmBzE,OACrEgkD,EAAei8D,EAAAA,GAAkBG,SACjCP,IAAmB,IAGfQ,IAAiC30E,EAAAA,GAAAA,IAAiBnxC,IACtD2kH,EAAwB,CAAE3kH,UAEtBA,EAAMpjB,QACR23B,GAAsBuwG,EACxB,IAGIiB,IAAiC50E,EAAAA,GAAAA,IAAiBnxC,IACtD4kH,EAAsB,CAAE5kH,SAAQ,IAG5BgmH,IAA6B70E,EAAAA,GAAAA,IAAiBnxC,IAClD6kH,EAAkB,CAAE7kH,SAAQ,IAGxBq/F,IAAmBluD,EAAAA,GAAAA,IAAgB,KACvC4sD,EAAqB,CAAEtrG,UAAS,IAG5BwzH,IAAkB90E,EAAAA,GAAAA,IAAgB,KACjC10D,GAAW2E,GAChB+jI,EAAmB,CAAE1oI,SAAQ+I,QAAStB,OAAO9C,IAAY,IAGrD8kI,IAAyB/0E,EAAAA,GAAAA,IAAgB,KAC7C4zE,GAAkB,IAGdoB,IAAyBh1E,EAAAA,GAAAA,IAAgB,KAC7C6zE,GAAkB,IAGdn4E,IAAcsE,EAAAA,GAAAA,IAAgB,KAClCrD,GAASkuE,EAAgB,KAGpBjhE,GAAsBqrE,KAA2B75E,EAAAA,GAAAA,KAAUu3E,IAElEl4E,EAAAA,GAAAA,KAAU,KACRxnD,YAAW,KACTgiI,IAAyBtC,EAAa,GACrClB,GAA0B,GAC5B,CAACkB,IAEJ,MAAMt1F,IAAOge,EAAAA,GAAAA,KACP65E,GAAavD,EACjBzH,IAAiBxD,EAAAA,GAAauD,QAC5ByH,GAAczH,QACZC,IAAiBxD,EAAAA,GAAaI,YAChC4K,GAAc5K,YACZoD,IAAiBxD,EAAAA,GAAaC,WAChC+K,GAAc/K,WACZuD,IAAiBxD,EAAAA,GAAaE,UAChC8K,GAAc9K,UACZsD,IAAiBxD,EAAAA,GAAaG,aAChC6K,GAAc7K,cACX,EACH+L,EACFlB,GAAcyD,OACZhC,EACFzB,GAAcrL,YACZ4M,EACFvB,GAAc0D,cACZlC,EACFxB,GAAcxL,UACZoN,EACF5B,GAAc2D,cACZzD,EACF2B,IAAqBgB,EAAAA,GAAkBe,QACrC5D,GAAc6D,cACZhC,IAAqBgB,EAAAA,GAAkBiB,gBACzC9D,GAAc+D,sBACZlC,IAAqBgB,EAAAA,GAAkBmB,WACzChE,GAAciE,iBACZpC,IAAqBgB,EAAAA,GAAkBqB,mBACzClE,GAAcmE,yBACZtC,IAAqBgB,EAAAA,GAAkBuB,iBACzCpE,GAAcqE,uBACZxC,IAAqBgB,EAAAA,GAAkByB,mBACzCtE,GAAcuE,yBACZ1C,IAAqBgB,EAAAA,GAAkB2B,kBACzCxE,GAAcyE,wBACZ5C,IAAqBgB,EAAAA,GAAkB6B,oBACzC1E,GAAc2E,0BACZ9C,IAAqBgB,EAAAA,GAAkB+B,2BACzC5E,GAAc6E,iCACZhD,IAAqBgB,EAAAA,GAAkBiC,qBACzC9E,GAAc+E,2BACZlD,IAAqBgB,EAAAA,GAAkBmC,mBACzChF,GAAciF,yBACZpD,IAAqBgB,EAAAA,GAAkBqC,gBACzClF,GAAcmF,uBACZtD,IAAqBgB,EAAAA,GAAkBuC,mBACzCpF,GAAcqF,0BACZxD,IAAqBgB,EAAAA,GAAkByC,aACzCtF,GAAcuF,mBACZ1D,IAAqBgB,EAAAA,GAAkBG,QACzChD,GAAcwF,cACZ3D,IAAqBgB,EAAAA,GAAkBC,WACzC9C,GAAcyF,iBACZ5D,IAAqBgB,EAAAA,GAAkB6C,eACzC1F,GAAc2F,qBACZ9D,IAAqBgB,EAAAA,GAAkB7rC,UACzCgpC,GAAc4F,gBACZ/D,IAAqBgB,EAAAA,GAAkBgD,WACzC7F,GAAc8F,iBACZjE,IAAqBgB,EAAAA,GAAkBkD,aACzC/F,GAAcgG,wBACZhrI,EACFmmI,EACFnB,GAAciG,WACZ7E,EACFpB,GAAckG,kBACZ7E,EACFrB,GAAcmG,gBACZ7E,EACFtB,GAAcoG,gBACZ1E,EACF1B,GAAc3L,YACZsN,EACF3B,GAAc1L,eACZt5H,EAEEqrI,IAAsBniB,EAAAA,GAAAA,GAAiBsf,IAAY,KAAU,EAiP7D8C,GAAepwE,KAClBijE,IACCqK,KAAexD,GAAc5K,aAC1BoO,KAAexD,GAAc/K,YAC7BuO,KAAexD,GAAc9K,WAC7BsO,KAAexD,GAAc2D,eAC7BH,KAAexD,GAAckG,mBAC7B1C,KAAexD,GAAcmG,iBAC7BjG,GAIDqG,IAAkB18E,EAAAA,GAAAA,GACtB,sBACAy8E,IAAgB,cACfpuE,IAAwBzM,IAAgC,iBAIrDyO,IAAYtN,EAAAA,GAAAA,IAAuB,MAGzC,OAFAuN,EAAAA,GAAAA,GAAgBD,IAGdhS,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,cAAcqwC,IAAK0J,IAChChS,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLtqC,UAAU,eACVvU,OAAK,EACL8+C,MAAM,cACN1L,KAAK,UACLsL,QAASN,GACTW,UAA0Bhf,GAAf26F,GAAoB,cAAsB,iBAErDp+E,GAAAA,GAAAC,cAAA,OAAKhoC,UAAWomH,MAElBr+E,GAAAA,GAAAC,cAACoI,GAAAA,GAAU,CACTp3B,KAAO++B,IAAwBzM,EAA+B,OAAS,YACvEgF,UAAW41E,IA/PjB,WACE,IAA6B,IAAzBA,GAIJ,OAAQA,IACN,KAAKrG,GAAcrL,YACjB,OAAOzsE,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,gBACrC,KAAKq0F,GAAcyD,OACjB,OACEv7E,GAAAA,GAAAC,cAAAD,GAAAA,GAAAiC,SAAA,KACEjC,GAAAA,GAAAC,cAAC6S,GAAAA,EAAW,CACVE,yBAAyB,cACzBh9B,MAAOiiG,EACP3kE,SAAUynE,KAEZ/6E,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7+C,OAAK,EACLozC,KAAK,UACL0L,MAAM,cAENJ,QAASA,IAAM+lD,EAAoB,CAAE97D,YAAYg7B,EAAAA,GAAAA,IAAc70E,KAAKC,SACpEgwD,UAAU,2BAEVzC,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,yBAIrB,KAAK6/G,GAAc2D,cACjB,OAAOz7E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAKmU,EAAY,wBAA0B,oBAC3E,KAAKkgF,GAAc6D,cACjB,OAAO37E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,SACrC,KAAKq0F,GAAc+D,sBACjB,OAAO77E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAKmU,EAAY,oBAAsB,oBACvE,KAAKkgF,GAAciE,iBACjB,OAAO/7E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,eACrC,KAAKq0F,GAAcuE,yBACjB,OAAOr8E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,0BACrC,KAAKq0F,GAAciF,yBACjB,OAAO/8E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,wBACrC,KAAKq0F,GAAcmF,uBACjB,OAAOj9E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,oBACrC,KAAKq0F,GAAcqF,0BACjB,OAAOn9E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,eACrC,KAAKq0F,GAAcqE,uBACjB,OAAOn8E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,uBACrC,KAAKq0F,GAAcyE,wBACjB,OAAOv8E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,iBACrC,KAAKq0F,GAAc2E,0BACjB,OAAOz8E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,wBACrC,KAAKq0F,GAAc6E,iCACjB,OAAO38E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,wBACrC,KAAKq0F,GAAc+E,2BACjB,OAAO78E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,qBACrC,KAAKq0F,GAAcwF,cACjB,OAAOt9E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,2BACrC,KAAKq0F,GAAcyF,iBACjB,OAAOv9E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAA2BwrB,GAAlBm1F,EAAuB,WAAmB,YAC1E,KAAKd,GAAc8F,iBACjB,OACE59E,GAAAA,GAAAC,cAAAD,GAAAA,GAAAiC,SAAA,KACEjC,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,eAC5Buc,GAAAA,GAAAC,cAAA,WAAShoC,UAAU,SAChBkH,IAAsBA,EAAkBd,WACvC2hC,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7+C,OAAK,EACL8+C,MAAM,cACN1L,KAAK,UACL2L,UAAWhf,GAAK,QAChB2e,QAASs4E,IAET16E,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,oBAGhBkH,GAAqBA,EAAkBd,WACtC2hC,GAAAA,GAAAC,cAAAD,GAAAA,GAAAiC,SAAA,KACEjC,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7+C,OAAK,EACL8+C,MAAM,SACN1L,KAAK,UACL2L,UAAWhf,GAAK,UAChB2e,QAASk4E,GAETt6E,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,sBAEf+nC,GAAAA,GAAAC,cAAC+/B,GAAAA,EAAa,CACZ3pD,OAAQgkG,EACRt3E,QAASw3E,GACTxiH,MAAO0rB,GAAK,cACZrnC,KAAMqnC,GAAK,kBACXixE,sBAAoB,EACpBC,aAAclxE,GAAK,UACnBy8C,eAAgB26C,QAO9B,KAAK/C,GAAcgG,mBACjB,OAAO99E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAAqBwrB,GAAZmU,EAAiB,oBAA4B,mBAC7E,KAAKkgF,GAAc2F,qBACjB,OAAOz9E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,oCACrC,KAAKq0F,GAAc0D,cACjB,OACEx7E,GAAAA,GAAAC,cAAC6S,GAAAA,EAAW,CACV98B,MAAOkiG,EACP9kE,YAAa3vB,GAAK,sBAClB66F,iBAAe,EACfhrE,SAAU0nE,KAGhB,KAAKlD,GAAcxL,UACjB,OACEtsE,GAAAA,GAAAC,cAAC6S,GAAAA,EAAW,CACV98B,MAAOoiG,EACPhlE,YAAa3vB,GAAK,mBAClB66F,iBAAe,EACfhrE,SAAU2nE,KAGhB,KAAKnD,GAAciG,WACjB,OAAO/9E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAKmU,EAAY,qBAAuB,qBACxE,KAAKkgF,GAAckG,kBACjB,OAAOh+E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,uBACrC,KAAKq0F,GAAcmG,gBACjB,OAAOj+E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,qBACrC,KAAKq0F,GAAcoG,gBACjB,OAAOl+E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,WACrC,KAAKq0F,GAAc5K,YACjB,OAAOltE,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,gBACrC,KAAKq0F,GAAcmE,yBACjB,OAAOj8E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,uBACrC,KAAKq0F,GAAc/K,WACnB,KAAK+K,GAAcuF,mBACjB,OAAOr9E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,iBACrC,KAAKq0F,GAAc9K,UACjB,OAAOhtE,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK5c,EAAS,qBAAuB,yBACrE,KAAKixG,GAAc7K,aACjB,OACEjtE,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,UACb+nC,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,qBAC5Buc,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,YAAYwrB,GAAK,QAAS+2F,GAAiB+D,EAAAA,QAGhE,KAAKzG,GAAc4F,gBACjB,OAAO19E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,cACrC,KAAKq0F,GAAc3L,YACjB,OAAOnsE,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,aACrC,KAAKq0F,GAAc1L,UACjB,OAAOpsE,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SAASwrB,GAAK,cACrC,QACE,OACEuc,GAAAA,GAAAC,cAAAD,GAAAA,GAAAiC,SAAA,KACEjC,GAAAA,GAAAC,cAAA,MAAIhoC,UAAU,SA5KbwrB,GADLwtF,EACU,gBAGV7kB,EACU,gBAGVx0D,EACU,oBAGVlwC,EACUi+F,EAAQ,qBAAuB,sBAGjC,oBAgKJ3lD,GAAAA,GAAAC,cAAA,WAAShoC,UAAU,SAChBi8F,GACCl0D,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7+C,OAAK,EACL8+C,MAAM,cACN1L,KAAK,UACL2L,UAAWhf,GAAK,cAChB2e,QAASkyD,IAETt0D,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,qBAAqB,oBAGrCygH,IAActsB,GACbpsD,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7+C,OAAK,EACL8+C,MAAM,cACN1L,KAAK,UACL2L,UAAWhf,GAAK,QAChB2e,QAAS+4E,IAETn7E,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,oBAGhBugH,GACCx4E,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7+C,OAAK,EACL8+C,MAAM,cACN1L,KAAK,UACL2L,UAAWhf,GAAK,QAChB2e,QAAS+4E,IAETn7E,GAAAA,GAAAC,cAACq2B,GAAAA,EAAI,CAACrlD,KAAK,UAGdqnG,GACCt4E,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7+C,OAAK,EACL8+C,MAAM,cACN1L,KAAK,UACL2L,UAAWhf,GAAK,aAChB2e,QAAS84E,IAETl7E,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,oBAGhB4gH,GACC74E,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7+C,OAAK,EACL8+C,MAAM,cACN1L,KAAK,UACL2L,UAAWhf,GAAK,cAChB2e,QAASg5E,IAETp7E,GAAAA,GAAAC,cAAA,KAAGhoC,UAAU,uBAO7B,CAwCOumH,IAEC,ICzkBV,GAPwC7+E,IACtC,MAAM8+E,GAAc5+E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAGnD,OAAOm+E,EAAcz+E,GAAAA,GAAAC,cAACw+E,EAAgB9+E,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,E,gDCd/D,UAAgB,KAAO,uBAAuB,UAAY,uBAAuB,iBAAiB,uBAAuB,cAAgB,uBAAuB,QAAU,uBAAuB,KAAO,uBAAuB,MAAQ,uBAAuB,KAAO,uBAAuB,gBAAkB,wBC+I9S,IAAeT,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KACjB9yD,IAIQ,CACL0nC,iBAJexnC,EAAAA,EAAAA,KAAeF,GACC0nC,mBAHjBorB,EAnHIi7E,EACtBrmG,sBAEA,MAAM,SAAErsB,EAAQ,iBAAEkzH,EAAgB,qBAAEC,IAAyB3rH,EAAAA,EAAAA,MACvDywB,GAAOge,EAAAA,GAAAA,KAEPiyC,EAAW77D,GAAiBH,YAC5BlF,EAASkhE,EAAW77D,EAAgBH,iBAAc5kC,GAElD,aACJ8rI,EAAY,aACZC,EAAY,OACZjnG,EAAM,cACNknG,EAAa,gBACbC,IACE/8E,EAAAA,GAAAA,KAAQ,IACLxvB,GASEwsG,EAAAA,GAAAA,GAAqBxsG,GARnB,CACLosG,aAAc,EACdC,cAAc,EACdjnG,OAAQ,EACRknG,cAAe,EACfC,gBAAiB,IAIpB,CAACvsG,IAEEysG,GAAgBj9E,EAAAA,GAAAA,KAAQ,KAC5B,GAAKxvB,EAEL,MAAO,CACL0sG,MAAON,EACPhnG,SACAunG,mBAAoB3sG,EAAO2sG,mBAC3BJ,kBACD,GACA,CAACvsG,EAAQoF,EAAQgnG,EAAcG,IAE5BK,GAAsBp9E,EAAAA,GAAAA,KAAQ,KAClC,IAAKnqB,GAAiBnrB,MAAO,OAC7B,MAAM2yH,EAAcxnG,EAAgBI,YAAYpmC,QAAU,EAE1D,OADmBgmC,EAAgBnrB,MACf2yH,CAAW,GAC9B,CAACxnG,IAEEynG,GAAqBl5E,EAAAA,GAAAA,IAAiB1+C,IAC1C8D,EAAS,CAAEnZ,GAAIqV,IACfi3H,GAAsB,IAGlBvR,GAAiBhnE,EAAAA,GAAAA,IAAgB,KACrCs4E,GAAkB,IAGpB,OACE1+E,GAAAA,GAAAC,cAAA,OAAKhoC,WAAW0pC,EAAAA,GAAAA,GAAe+kB,GAAO4c,KAAM,mBACxCoQ,GAAY1zC,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,MACrByyC,GAAYurC,GACXj/E,GAAAA,GAAAC,cAAAD,GAAAA,GAAAiC,SAAA,KACEjC,GAAAA,GAAAC,cAAA,OAAKhoC,UAAWyuD,GAAO64D,SACrBv/E,GAAAA,GAAAC,cAACu/E,GAAAA,EAAe,CACdC,SAAUh8F,EAAK,cAAem7F,GAC9Bc,UAAWb,EAAep7F,EAAK,cAAem7F,EAAgB,QAAK9rI,EACnE+S,SAAUi5H,EACVa,kBAAmB/nG,EAAO36B,WAC1B2iI,kBAAkB,UAEpB5/E,GAAAA,GAAAC,cAAC4/E,GAAAA,EAAkB,CAAC5nH,UAAWyuD,GAAO3qC,MAAOK,WAAY6iG,EAAe53H,KAAK,WAE/E24C,GAAAA,GAAAC,cAAA,OAAKhoC,UAAWyuD,GAAO64D,SACrBv/E,GAAAA,GAAAC,cAAA,MAAIhoC,UAAWyuD,GAAOo5D,cAAez9E,IAAK5e,EAAK6e,MAAQ,WAAQxvD,GAC5D2wC,EAAK,cAEN5L,EAAgBI,YAAYpmC,QAC5BmuD,GAAAA,GAAAC,cAAA,OAAKhoC,UAAWyuD,GAAOq5D,WAAYt8F,EAAK,mBAEzC5L,EAAgBI,YAAYz7B,KAAKkL,GAChCs4C,GAAAA,GAAAC,cAACs3E,GAAAA,EAAQ,CACP3hF,IAAKluC,EACLuQ,UAAU,sBAEVmqC,QAASA,IAAMk9E,EAAmB53H,IAElCs4C,GAAAA,GAAAC,cAACm9D,GAAAA,EAAe,CACdnlG,UAAWyuD,GAAOnkE,KAClBo9E,eAAa,EACbj4E,OAAQA,EACR8qB,OAAQiR,EAAK,iBAAiB88C,EAAAA,GAAAA,IAAiB98C,EAA0C,IAApC5L,EAAgBG,SAAUtwB,UAIpFjB,QAAQ24H,IACPp/E,GAAAA,GAAAC,cAACs3E,GAAAA,EAAQ,CACP3hF,IAAI,YACJ39B,UAAWyuD,GAAOs5D,SAClBj8D,SAAUlsC,GAAiBK,kBAC3BkqB,QAASgrE,GAERv1F,GAAiBK,kBAChB8nB,GAAAA,GAAAC,cAAC2J,GAAAA,EAAO,CAAC3xC,UAAWyuD,GAAOu5D,kBAE3BjgF,GAAAA,GAAAC,cAACq2B,GAAAA,EAAI,CAACrlD,KAAK,OAAOhZ,UAAWyuD,GAAOw5D,OAErCz8F,EAAK,YAAa27F,KAIzBp/E,GAAAA,GAAAC,cAACkgF,GAAAA,EAAS,CAACloH,UAAWyuD,GAAO64D,QAAS7kH,KAAM8X,EAAQ4tG,SAAUC,WAAS,EAACtoH,MAAO0rB,EAAK,sBAGpF,KC1HV,GAP8Ckc,IAC5C,MAAMq+E,GAAoBn+E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,qBAGzD,OAAO09E,EAAoBh+E,GAAAA,GAAAC,cAAC+9E,EAAsBr+E,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECG3E,GAPuCtB,IACrC,MAAMo+E,GAAal+E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,cAGlD,OAAOy9E,EAAa/9E,GAAAA,GAAAC,cAAC89E,EAAep+E,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECG7D,GAP4CtB,IAC1C,MAAMs+E,GAAkBp+E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,mBAGvD,OAAO29E,EAAkBj+E,GAAAA,GAAAC,cAACg+E,EAAoBt+E,GAAYK,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECCvE,GAP+Bq/E,KAC7B,MAAM9E,GAAgB37E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAGrD,OAAOk7E,EAAgBx7E,GAAAA,GAAAC,cAACu7E,EAAa,MAAMx7E,GAAAA,GAAAC,cAACgB,GAAAA,EAAO,KAAG,ECgDlDs/E,GAAqB,IAAMj9F,EAAAA,IAC3Bk9F,GAAqBjqI,OAAO+F,KAAKmkI,EAAAA,IAAoB5uI,OAAS,EAC9D6uI,GAA2BnqI,OAAO+F,KAAKq+H,EAAAA,IAAmB9oI,OAAS,EAEzE,SAAS8uI,KACP,MAAMC,EAAcpsI,SAAS8qD,cAAc,mCACvCshF,GACFA,EAAY/3G,MAEhB,CAEA,MA+UA,IAAe23B,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KAClB,CAAC9yD,GAAU69D,eACT,MAAM,OAAEt8D,EAAM,SAAE2E,IAAa2E,EAAAA,EAAAA,KAAyB7K,IAAW,CAAC,EAC5D0wI,GAAuBC,EAAAA,EAAAA,KAA2B3wI,IAClD,WAAEktB,EAAU,4BAAEkmC,EAA2B,eAAEjhB,IAAmBjyC,EAAAA,EAAAA,KAAeF,GAC7E4wI,EAAuBrvI,EAAS2rB,EAAWve,SAASpN,IAASs4C,gBAAal3C,EAE1Em+H,EAAkBv/H,GAASkI,EAAAA,EAAAA,KAAqBzJ,EAAQuB,QAAUoB,EAClE8Q,EAAgBlS,GAASmI,EAAAA,EAAAA,IAAiBnI,EAAQ2E,EAAUlG,EAAO8B,oBAAiBa,EAE1F,MAAO,CACLwoI,YAAY0F,EAAAA,EAAAA,KAA4B7wI,EAAQ69D,GAChDt8D,SACA2E,WACA4qI,eAAgBx6H,QAAQ/U,GAAUmvI,GAClCt9E,8BACAw9E,uBACAz+F,iBACA2uF,kBACArtH,gBACD,GApBeq/C,EA/U2Bi+E,EAC7C5F,aACA5pI,SACA2E,WACA23D,WACAizE,iBACA19E,8BACAw9E,uBACAz+F,iBACA2uF,kBACArtH,oBAEA,MAAM,eACJu9H,EAAc,iBACdnH,EAAgB,qBAChBv5F,EAAoB,sBACpBo5F,EAAqB,kBACrBC,EAAiB,iBACjBsH,EAAgB,eAChBC,EAAc,6BACdzQ,EAA4B,yBAC5BsJ,EAAwB,iBACxBD,EAAgB,wBAChBqH,EAAuB,sBACvBC,EAAqB,oBACrBC,EAAmB,4BACnBC,EAA2B,oBAC3BC,EAAmB,sBACnBC,EAAqB,oBACrBC,EAAmB,qBACnBjD,IACE3rH,EAAAA,EAAAA,OAEIpiB,MAAOH,IAAgB8pH,EAAAA,GAAAA,MACxB+V,EAAcuR,IAAmBrgF,EAAAA,GAAAA,IACtCyvE,IAAoBrtH,EAAgBkpH,EAAAA,GAAaG,aAAeH,EAAAA,GAAauD,UAExEsJ,EAAkBmI,IAAuBtgF,EAAAA,GAAAA,IAA4Bm5E,EAAAA,GAAkBe,UACvFqG,EAAsBC,IAA2BxgF,EAAAA,GAAAA,OACjDygF,EAAyBC,IAA8B1gF,EAAAA,GAAAA,MACxD2gF,EAAiB7R,IAAiBxD,EAAAA,GAAauD,QAE/Ch6F,OAAwBvjC,IAAfwoI,EACTvD,EAAYuD,IAAemF,EAAAA,GAAmB2B,SAC9CpJ,EAAWsC,IAAemF,EAAAA,GAAmBlF,OAC7CvD,EAAesD,IAAemF,EAAAA,GAAmBlU,WACjD0M,EAAeqC,IAAemF,EAAAA,GAAmB1C,WACjD7E,EAAsBoC,IAAemF,EAAAA,GAAmBzC,kBACxD7E,EAAoBmC,IAAemF,EAAAA,GAAmBxC,gBACtD7E,EAAoBkC,IAAemF,EAAAA,GAAmBvC,gBACtD7E,EAAkBiC,IAAemF,EAAAA,GAAmBjF,cACpDlC,EAAcgC,IAAemF,EAAAA,GAAmBnU,UAChDiN,EAAgB+B,IAAemF,EAAAA,GAAmBhU,YAClDiN,EAAsB4B,IAAemF,EAAAA,GAAmBhF,cACxDjC,EAAkB8B,IAAemF,EAAAA,GAAmBtU,YACpDsN,GAAiB6B,IAAemF,EAAAA,GAAmBrU,UACnDiW,GAAe5xI,GAAeI,EAAAA,KAE7Bm/D,GAAsBqrE,KAA2B75E,EAAAA,GAAAA,KAAUnrB,GAE5D8nG,IAAsBniB,EAAAA,GAAAA,GAAiBsf,GAAY,GAAO2F,KAAoB,EAE9E/3G,IAAQk9B,EAAAA,GAAAA,IAAgB,CAACk8E,GAAiB,KAC9C,OAAQhH,GACN,KAAKmF,EAAAA,GAAmBhF,cACtB7K,EAA6B,CAAEjuF,uBAAwB6nF,EAAAA,GAAuB+X,SAC9E,MACF,KAAK9B,EAAAA,GAAmB2B,SACtB,GAAID,GAAkBG,IAAmBrR,EAAiB,CACxD4Q,EAAgB/U,EAAAA,GAAauD,SAC7B,KACF,CACA8Q,EAAe,CAAE3pI,OAAO,GAAS,CAAEmtE,gBAAgB,IACnD,MACF,KAAK87D,EAAAA,GAAmBlU,WACtB,OAAQoN,GACN,KAAKgB,EAAAA,GAAkBe,QACrB1B,IACA,MACF,KAAKW,EAAAA,GAAkBiB,gBACvB,KAAKjB,EAAAA,GAAkBmB,WACvB,KAAKnB,EAAAA,GAAkBuB,iBACvB,KAAKvB,EAAAA,GAAkB6H,UACvB,KAAK7H,EAAAA,GAAkByB,mBACvB,KAAKzB,EAAAA,GAAkBqB,mBACvB,KAAKrB,EAAAA,GAAkByC,aACvB,KAAKzC,EAAAA,GAAkBG,QACvB,KAAKH,EAAAA,GAAkB7rC,UACvB,KAAK6rC,EAAAA,GAAkBkD,aACvB,KAAKlD,EAAAA,GAAkB6B,oBACrBsF,EAAoBnH,EAAAA,GAAkBe,SACtC,MACF,KAAKf,EAAAA,GAAkB+B,2BACvB,KAAK/B,EAAAA,GAAkB2B,kBACvB,KAAK3B,EAAAA,GAAkBiC,qBACrBkF,EAAoBnH,EAAAA,GAAkBuB,kBACtC8F,OAAwBlvI,GACxBovI,OAA2BpvI,GAC3B,MACF,KAAK6nI,EAAAA,GAAkBqC,gBACvB,KAAKrC,EAAAA,GAAkBuC,mBACvB,KAAKvC,EAAAA,GAAkB6C,eACvB,KAAK7C,EAAAA,GAAkBmC,mBACrBgF,EAAoBnH,EAAAA,GAAkByB,oBACtC,MACF,KAAKzB,EAAAA,GAAkBC,WACvB,KAAKD,EAAAA,GAAkBgD,WACrBmE,EAAoBnH,EAAAA,GAAkBG,SACtC0G,EAAoB,CAAE9vI,OAAQA,EAASusB,YAAQnrB,IAC/ConI,EAAyB,CAAExoI,OAAQA,EAASusB,YAAQnrB,IAIxD,MAEF,KAAK2tI,EAAAA,GAAmBzC,kBACtBsD,IACA,MACF,KAAKb,EAAAA,GAAmBxC,gBACtBsD,IACA,MACF,KAAKd,EAAAA,GAAmB1C,WACtB9D,IACA,MACF,KAAKwG,EAAAA,GAAmBvC,gBACtBS,IACA,MACF,KAAK8B,EAAAA,GAAmBlF,OACtBoF,KACAlgG,IACA,MAEF,KAAKggG,EAAAA,GAAmBjF,cACtBmF,KACA9G,EAAsB,CAAE5kH,WAAOniB,IAC/B,MACF,KAAK2tI,EAAAA,GAAmBnU,UACtBqU,KACA7G,EAAkB,CAAE7kH,WAAOniB,IAC3B,MAEF,KAAK2tI,EAAAA,GAAmBhU,YACtB2U,IACA,MACF,KAAKX,EAAAA,GAAmBtU,YACtBwV,IACA,MACF,KAAKlB,EAAAA,GAAmBrU,UACtBwV,IAEJ,IAGIa,IAAyBr8E,EAAAA,GAAAA,IAAgB,CAACoxE,EAAUkL,KACxDV,EAAwBxK,GACxB0K,EAA2BQ,EAAW,IAGlCC,IAA6Bv8E,EAAAA,GAAAA,IAAiB2kE,IAClDsW,EAAe,CAAE3vI,OAAQA,EAASq5H,aAAY,IAoDhD,SAASvsD,GAAc10B,GACrB,IAA6B,IAAzBq0F,GAIJ,OAAQA,IACN,KAAKsC,EAAAA,GAAmBhF,cACtB,OACEz7E,GAAAA,GAAAC,cAACwqE,GAAc,CACb70E,IAAM,oBAAmBlkD,IACzBA,OAAQA,EACRo4C,SAAUzT,GAAUyT,EACpB4gF,WAAYiY,GACZ5/E,QAAS75B,KAGf,KAAKu3G,EAAAA,GAAmB2B,SACtB,OACEpiF,GAAAA,GAAAC,cAACowE,GAAO,CACNz6E,IAAM,WAAUlkD,KAAW2E,IAC3B3E,OAAQA,EACR2E,SAAUA,EACVi6H,aAAcA,EACdtiE,SAAUA,EACVuiE,qBAAsBsR,IAG5B,KAAKpB,EAAAA,GAAmBlF,OACtB,OACEv7E,GAAAA,GAAAC,cAACw+E,GAAW,CACV7oF,IAAM,gBAAelkD,IACrBA,OAAQA,EACR2E,SAAUA,EACV0sD,QAAS75B,GACT4gB,SAAUzT,GAAUyT,IAG1B,KAAK22F,EAAAA,GAAmBlU,WACtB,OACEvsE,GAAAA,GAAAC,cAACssE,GAAU,CACT32E,IAAM,cAAalkD,KAAWioI,IAC9BjoI,OAAQA,EACR+sE,cAAek7D,EACfsI,wBAAyBA,EACzBF,qBAAsBA,EACtBj4F,SAAUzT,GAAUyT,EACpB40B,eAAgBojE,EAChBc,mBAAoBH,GACpB1/E,QAAS75B,KAIf,KAAKu3G,EAAAA,GAAmB1C,WACtB,OAAO/9E,GAAAA,GAAAC,cAAC89E,GAAU,CAACrsI,OAAQA,IAC7B,KAAK+uI,EAAAA,GAAmBvC,gBACtB,OAAOl+E,GAAAA,GAAAC,cAACi+E,GAAe,MACzB,KAAKuC,EAAAA,GAAmBzC,kBACtB,OAAOh+E,GAAAA,GAAAC,cAAC+9E,GAAiB,CAACtsI,OAAQA,EAASo4C,SAAUzT,GAAUyT,IACjE,KAAK22F,EAAAA,GAAmBxC,gBACtB,OAAOj+E,GAAAA,GAAAC,cAACg+E,GAAe,CAACvsI,OAAQA,EAASo4C,SAAUzT,GAAUyT,IAC/D,KAAK22F,EAAAA,GAAmBjF,cACtB,OAAOx7E,GAAAA,GAAAC,cAACu7E,GAAa,CAACz4E,QAAS75B,GAAO4gB,SAAUzT,GAAUyT,IAC5D,KAAK22F,EAAAA,GAAmBnU,UACtB,OAAOtsE,GAAAA,GAAAC,cAACqsE,GAAS,CAACvpE,QAAS75B,GAAO4gB,SAAUzT,GAAUyT,IACxD,KAAK22F,EAAAA,GAAmBhU,YACtB,OAAOzsE,GAAAA,GAAAC,cAACwsE,GAAW,CAAC1pE,QAAS75B,GAAO4gB,SAAUzT,GAAUyT,IAC1D,KAAK22F,EAAAA,GAAmBtU,YACtB,OAAOnsE,GAAAA,GAAAC,cAACksE,GAAW,CAACppE,QAAS75B,GAAO4gB,SAAUzT,GAAUyT,IAC1D,KAAK22F,EAAAA,GAAmBrU,UACtB,OAAOpsE,GAAAA,GAAAC,cAACmsE,GAAS,CAACrpE,QAAS75B,GAAO4gB,SAAUzT,GAAUyT,IAI5D,CAEA,OA5HA+W,EAAAA,GAAAA,KAAU,IAAOxqB,GAAU3kC,GAASk1D,EAAAA,GAAAA,GAAsB19B,SAASp2B,GAAY,CAACujC,EAAQnN,GAAOx3B,KAE/FmvD,EAAAA,GAAAA,KAAU,KACRxnD,YAAW,KACTgiI,IAAyBhlG,EAAO,GAC/BkqG,GAAmB,GACrB,CAAClqG,KAEJwqB,EAAAA,GAAAA,KAAU,KACJkgF,IACFe,EAAoBf,GACpBU,OAA4B3uI,GAC9B,GACC,CAACiuI,KAEJlgF,EAAAA,GAAAA,KAAU,KACHve,GAELo/F,GAAqB,GACpB,CAACp/F,KAGJue,EAAAA,GAAAA,KAAU,KACJxqB,GAAUgsG,IACZn5G,IACF,GAEC,CAACm5G,MAGJ//C,EAAAA,GAAAA,IAA4B,EAAEugD,EAAYC,MACpCD,IAAenxI,GAAUoxI,IAAiBzsI,IAC5CwrI,EACE5Q,IAAoBrtH,EAAgBkpH,EAAAA,GAAaG,aAAeH,EAAAA,GAAauD,SAE/EyR,EAAoBnH,EAAAA,GAAkBe,SACxC,GACC,CAAChqI,EAAQ2E,EAAUuN,EAAeqtH,KAErCpqE,EAAAA,GAAAA,GAAe,CACb/c,SAAUm3F,IACR3F,IAAemF,EAAAA,GAAmB2B,UAC/B9G,IAAemF,EAAAA,GAAmBlU,YAClC+O,IAAemF,EAAAA,GAAmBhF,eAClCH,IAAemF,EAAAA,GAAmBtU,aAClCmP,IAAemF,EAAAA,GAAmBrU,WACvCtlE,OAAQA,IAAM59B,IAAM,KA+EpB82B,GAAAA,GAAAC,cAAA,OACE5tD,GAAG,sBACH4lB,UAAYgpH,OAA+BnuI,EAAd,aAE5BuvI,IACCriF,GAAAA,GAAAC,cAAA,OAAKhoC,UAAU,mBAAmBmqC,QAASl5B,KAE7C82B,GAAAA,GAAAC,cAAA,OAAK5tD,GAAG,eACN2tD,GAAAA,GAAAC,cAAC64E,GAAW,CACVpnI,OAAQA,EACR2E,SAAUA,EACV0iI,aAAc1iG,EACd0hG,UAAWA,EACXiB,SAAUA,EACVhB,aAAcA,EACdiB,aAAcA,EACdG,kBAAmBA,EACnBF,oBAAqBA,EACrBC,kBAAmBA,EACnBE,gBAAiBA,EACjBC,YAAaA,EACbC,cAAeA,EACfC,gBAAiBA,EACjBC,eAAgBA,GAChBC,oBAAqBA,EACrBpJ,aAAcA,EACdqJ,iBAAkBA,EAClB52E,QAAS75B,GACTw1C,eAAgBojE,IAElB9hF,GAAAA,GAAAC,cAACoI,GAAAA,GAAU,CACTp3B,KAAO++B,IAAwBzM,EAA+B,OAAS,WACvEiF,YAAag4E,GAAqBE,GAClCn4E,UAAWyvE,EAAewI,GAAqB7G,EAAmBwE,GAClEhoE,eAAa,EACbC,oBACG+nE,KAAwBsC,EAAAA,GAAmBzC,mBACvCG,KAAwBsC,EAAAA,GAAmBxC,gBAC5CwC,EAAAA,GAAmB1C,gBAAajrI,GAGrC0rE,KAGD,KClYV,IAAehe,EAAAA,GAAAA,KANwBuiF,EAAG1sG,aACxC,MAAM2sG,GAAcnjF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAAgBjqB,GAEnE,OAAO2sG,EAAchjF,GAAAA,GAAAC,cAAC+iF,EAAW,WAAMlwI,CAAS,ICKlD,GAVqD6sD,IACnD,MAAM,yBAAE5uB,GAA6B4uB,EAC/BsjF,GAA2BpjF,EAAAA,GAAAA,GAC/BC,GAAAA,GAAQQ,MAAO,4BAA6BvvB,GAI9C,OAAOkyG,EAA2BjjF,GAAAA,GAAAC,cAACgjF,EAA6BtjF,QAAY7sD,CAAS,ECCvF,GAR0C6sD,IACxC,MAAM,IAAE71B,GAAQ61B,EACVujF,GAAgBrjF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkBx2B,GAGvE,OAAOo5G,EAAgBljF,GAAAA,GAAAC,cAACijF,EAAkBvjF,QAAY7sD,CAAS,ECbjE,IAAgB,KAAO,wBCyCjBqwI,GAAkB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAmKhF,IAAe3iF,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KACjB9yD,IAAuBgyB,EAAAA,EAAAA,KAAK9xB,EAAAA,EAAAA,KAAeF,GAAS,CAAC,cADpC8yD,EAjKsBmgF,EAAG12F,eAE3C,MAAM22F,GAAY3+E,EAAAA,GAAAA,IAA0B,MACtC4+E,GAAc5+E,EAAAA,GAAAA,IAAmB,IACjC6+E,GAAkB7+E,EAAAA,GAAAA,KAAO,GACzBh0D,GAAa6pH,EAAAA,GAAAA,KACb31B,GAAcC,EAAAA,GAAAA,MACd,SAAE72B,IAAaC,EAAAA,EAAAA,MAEfu1E,EAAwBx1E,EAAW,GAAK,KACxC,iBACJrhB,EAAgB,IAAE+8D,EAAG,MAAE94G,EAAK,KAAE6yI,EAAI,OAAEvsF,GAClCxK,GAAY,CAAC,EAEXg3F,GAAmB7hF,EAAAA,GAAAA,KAAY,CAACotB,EAAWE,EAAW73C,EAASksG,KACnE,IAAK,IAAI1vI,EAAI,EAAGA,EAAIwjC,EAAQxjC,IAAK,CAC/B,MAAM6vI,EAAW7vI,EAAI,EACf8vI,EAAM,CACVxzI,EAAG6+E,GAAK00D,GAAY,GAAM,KAC1BvqG,EAAO,IAAJ+1C,GAEC00D,EAAU/yI,KAAKiL,SAAWkzE,EAAI,IAE9B60D,EAAW,CACf1zI,EAAGuzI,EAAWE,GAAqB,EAAXA,EACxBzqG,GAHe+1C,EAAI,EAAIr+E,KAAKiL,SAAWozE,GAMnC40D,EAAcZ,GAAgBryI,KAAKyB,MAAMzB,KAAKiL,SAAWonI,GAAgBtxI,SACzEilD,EAhCkB,GAiCxBwsF,EAAYnrH,QAAQxe,KAAK,CACvBiqI,MACA9sF,OACA0L,MAAOuhF,EACPD,WACAE,QAASltF,EACTmtF,iBAAkC,GAAhBnzI,KAAKiL,SACvBmoI,SAAU,EACVC,YAAa3xI,KAAKC,MAClB2xI,WAAY,GAEhB,IACC,CAACZ,IAEEa,GAAexiF,EAAAA,GAAAA,KAAY,KAC/B,IAAKwhF,EAAUlrH,UAAYorH,EAAgBprH,QACzC,OAEF,MAAMmsH,EAASjB,EAAUlrH,QAEnBosH,EAAMD,EAAOE,WAAW,MAC9B,IAAKD,EACH,OAGF,MAAQ3zI,MAAO6zI,EAAavtF,OAAQwtF,GAAiBJ,EACrDC,EAAII,UAAU,EAAG,EAAGF,EAAaC,GAEjC,MAAME,EAA+B,GACrCtB,EAAYnrH,QAAQjmB,SAAQ,CAAC2yI,EAAG/wI,KAC9B,MAAM,IACJ8vI,EAAG,SACHE,EAAQ,KACRhtF,EAAI,MACJ0L,EAAK,QACLwhF,EAAO,iBACPC,EAAgB,SAChBC,EAAQ,YACRC,EAAW,WACXC,GACES,EACEt3D,GAAQ/6E,KAAKC,MAAQ0xI,GAAe,IAEpCW,EAAS,CACb10I,EAAGwzI,EAAIxzI,EAAI0zI,EAAS1zI,EAAIm9E,EACxBn0C,EAAGwqG,EAAIxqG,EAAI0qG,EAAS1qG,EAAIm0C,GAGpBw3D,EAAc,CAClB30I,EAAgB,IAAb0zI,EAAS1zI,EACZgpC,EAAG0qG,EAAS1qG,GAAY,IAAPm0C,GAGby3D,EAAaluF,EAAOhmD,KAAK08E,IAAI18E,KAAKm0I,IAAIb,EAAaH,IACnDiB,EAAc,EAAId,EAAaH,GAAoBnzI,KAAKkzF,GAAK,KAE7DmhD,EAAgBf,EAAa,EAC7BgB,EAAiB5yI,KAAKC,MAG5B,GADqBqyI,EAAO1rG,EAAIsrG,EAAeG,EAAE/tF,KAG/C,YADA8tF,EAAiBjrI,KAAKkrI,GAIxB,MAAMQ,EAAc,IACfR,EACHjB,IAAKkB,EACLhB,SAAUiB,EACVf,QAASgB,EACTd,SAAUgB,EACVf,YAAaiB,EACbhB,WAAYe,GAGd7B,EAAYnrH,QAAQrkB,GAAKuxI,EACzBd,EAAIe,UAAY9iF,EAChB+hF,EAAIgB,YACJhB,EAAIiB,QACF5B,EAAIxzI,EACJwzI,EAAIxqG,EACJ0d,EACAktF,EACAE,EACA,EACA,EAAIpzI,KAAKkzF,IAEXugD,EAAIx8C,MAAM,IAEZu7C,EAAYnrH,QAAUmrH,EAAYnrH,QAAQrmB,QAAQ+yI,IAAOD,EAAiBtxI,SAASuxI,KAC/EvB,EAAYnrH,QAAQtmB,QACtB+hF,EAAAA,GAAAA,IAAeywD,GAEfd,EAAgBprH,SAAU,CAC5B,GACC,IAkBH,IAhBA8lD,EAAAA,GAAAA,IAAc,EAAEwnE,MACd,IAAIC,EASJ,OARID,IAAqB94F,IACvB+2F,EAAiB9yI,GAASF,EAAWE,MAAOsmD,GAAUxmD,EAAWwmD,QACjEwuF,EAAcrsI,WAAWurF,EAvIE,KAwItB2+C,EAAgBprH,UACnBorH,EAAgBprH,SAAU,GAC1By7D,EAAAA,GAAAA,IAAeywD,KAGZ,KACLvxH,aAAa4yH,EAAY,CAC1B,GAEA,CAAC/4F,EAAkBi4C,EAAay/C,KAE9B13F,GAAoBn6C,KAAKC,MAAQk6C,EAnJP,IAoJ7B,OAGF,MAAM68B,GAAQQ,EAAAA,GAAAA,GACZvjE,QAAQijG,IAAS,QAAOA,MACxBjjG,QAAQg9H,IAAU,SAAQA,MAC1Bh9H,QAAQ7V,IAAW,UAASA,MAC5B6V,QAAQywC,IAAY,WAAUA,OAGhC,OACE8I,GAAAA,GAAAC,cAAA,OAAK5tD,GAAG,WAAW4lB,UAAWyuD,GAAO4c,KAAM9Z,MAAOA,GAChDxpB,GAAAA,GAAAC,cAAA,UAAQqI,IAAK+6E,EAAWprH,UAAWyuD,GAAO49D,OAAQ1zI,MAAOF,EAAWE,MAAOsmD,OAAQxmD,EAAWwmD,SAC1F,KCxLV,GAR+CyI,IAC7C,MAAM,OAAEh0C,GAAWg0C,EACbgmF,GAAqB9lF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,sBAAuB30C,GAGjF,OAAOg6H,EAAqB3lF,GAAAA,GAAAC,cAAC0lF,EAAuBhmF,QAAY7sD,CAAS,ECA3E,GAPyB8yI,EAAGvvG,aAC1B,MAAMwvG,GAAUhmF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,WAAYjqB,GAG3D,OAAOwvG,EAAU7lF,GAAAA,GAAAC,cAAC4lF,EAAO,WAAM/yI,CAAS,E,eCc1C,MAEMgzI,GAAoB,IAAIrtI,IACxBstI,GAAqB,IAAIttI,IA2F/B,IAAe+nD,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KACjB9yD,IAGQ,CACLsnF,iBAHsBpnF,EAAAA,EAAAA,KAAeF,GAAQsnF,gBAAgB34E,YAF/CmkD,EAzFoB+iF,EACtCvuD,sBAEA,MAAM,4BAAEwuD,EAA2B,iBAAEj8H,IAAqBgJ,EAAAA,EAAAA,MAEpDg9F,GAAeC,EAAAA,GAAAA,GAVQ,KAUgC,GAEvDi2B,GAA0B9/E,EAAAA,GAAAA,IAAiBj1D,IAC/C40I,GAAmBrtI,IAAIvH,GACvB6+G,GAAa,KACP+1B,GAAmBjvF,OACrBmvF,EAA4B,CAAExoI,SAAUwV,MAAM7N,KAAK2gI,MACnDA,GAAmBn1D,QACrB,GACA,KAGJ/vB,EAAAA,GAAAA,KAAU,KAER,MAAMpjD,GAAWnE,EAAAA,EAAAA,MAAYmE,SAASqB,SAChCH,GAAoBrF,EAAAA,EAAAA,MAAYqF,kBAAkBG,SAElDqnI,EAAiB5vI,OAAOsH,QAAQ45E,GAAiBj7E,KAAI,EAAE9K,EAAQ00I,MACnE,MAAMvnI,EAAeunI,EAAoB7tI,KAAKiE,KAAKnK,GAAOoL,EAAS/L,IAASgG,KAAKrF,KAC3Eg0I,EAAwBD,EAAoBnqI,cAAcO,KAAKnK,GAAOsM,EAAkBjN,IAASgG,KAAKrF,KAE5G,OAAOo0C,EAAAA,EAAAA,IAAQ,IAAI5nC,GAAgB,MAAOwnI,GAAyB,IAAI,IACtE56B,OAEE06B,EAAet0I,OAKpBs0I,EAAej0I,SAASf,IACtB,GAAI20I,GAAkB7sI,IAAI9H,GACxB,OAEF20I,GAAkBptI,IAAIvH,GACtB,MAAMm1I,GAAermE,EAAAA,EAAAA,IAAoB9uE,EAAS,YAClD,IAAKm1I,EAEH,YADAJ,EAAwB/0I,GAI1B,MAAM6uE,EAAYpnC,GAAAA,GAA0B0tG,GAE5C,GAAItmE,EAGF,OAFAumE,EAAAA,GAAAA,GAASvmE,GAAWwmE,EAAAA,EAAAA,IAA0Br1I,SAC9C+0I,EAAwB/0I,GAI1B,MAAM,SACJqD,EAAQ,MAAEF,EAAK,MAAEyiD,GACf5lD,EAAQiD,QAEZ,KADmBI,GAAYF,GAASyiD,IAAQD,MAAQ,GACxC2vF,EAAAA,KAAoBC,EAAAA,KAAsBC,EAAAA,GAKxD,OAJA38H,EAAiB,CACf7Y,QAAS,6EAEX+0I,EAAwB/0I,GAI1B,MAAMy1I,GAAc72C,EAAAA,EAAAA,IAAsB5+F,EAAS,YACnDynC,GAAAA,GAAkB0tG,EAAcM,GAAa,GAAMj5F,MAAM9tC,IACvD,GAAI+mI,IAAgB/tG,EAAAA,GAAeguG,YAAa,CAC9C,MAAMh3H,EAAM,IAAIY,IAAI5Q,EAAQiR,OAAOtc,SAASsyI,SACtClwF,GAAW4vF,EAAAA,EAAAA,IAA0Br1I,GAC3C0e,EAAIgB,aAAa9K,IAAI,WAAYghI,mBAAmBnwF,IACpD,MAAMowF,EAAiBl2H,OAAOC,KAAKlB,EAAI5S,YACvC+pI,GAAgB5/E,iBAAiB,gBAAgB,KAC/Cp9C,EAAiB,CACf7Y,QAAS,yEACT,GAEN,MAAW0O,IACT0mI,EAAAA,GAAAA,GAAS1mI,GAAQ2mI,EAAAA,EAAAA,IAA0Br1I,IAG7C+0I,EAAwB/0I,EAAQ,GAChC,IApDF20I,GAAkBl1D,OAqDlB,GACD,CAAC6G,EAAiBwuD,EAA6BC,EAAyBl8H,GAE3D,KCnGlB,GARiD21C,IAC/C,MAAM,eAAEld,GAAmBkd,EACrBsnF,GAAuBpnF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,wBAAyB7d,GAGrF,OAAOwkG,EAAuBjnF,GAAAA,GAAAC,cAACgnF,EAAyBtnF,QAAY7sD,CAAS,ECG/E,GARmD6sD,IACjD,MAAM,OAAEtpB,GAAWspB,EACbunF,GAAyBrnF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,0BAA2BjqB,GAGzF,OAAO6wG,EAAyBlnF,GAAAA,GAAAC,cAACinF,EAA2BvnF,QAAY7sD,CAAS,E,4BCOnF,MAsEA,IAAe0tD,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KAClB,CAAC9yD,GAAUo8C,iBACT,MAAM,OAAE76C,GAAW66C,GAAc,CAAC,EAC5Bt5C,EAAOvB,IAAUsE,EAAAA,EAAAA,KAAW7F,EAAQuB,GAG1C,MAAO,CACLg0E,QAHcj/D,QAAQxT,KAASusH,EAAAA,EAAAA,IAAiBvsH,EAAMmD,EAAAA,IAIvD,GARe6sD,EA3DyBkkF,EAAG56F,aAAY66F,YAAW1hE,cACrE,MAAM,UAAE2hE,EAAS,gBAAElgG,IAAoBn0B,EAAAA,GAAAA,MACjCywB,GAAOge,EAAAA,GAAAA,MACP,IAAE5xC,EAAG,OAAEne,EAAM,UAAEgE,GAAc62C,GAAc,CAAC,EAC5ClW,EAAS5vB,QAAQoJ,GAEjBy3H,GAAoBC,EAAAA,GAAAA,GAAqB71I,IAC/C2xF,EAAAA,GAAAA,IAAY,KACVikD,EAAkB,CAAEjgI,KAAM,eAAgB,GACzCgvB,GAAUqvC,EApBmB,SAoBmB5yE,GAEnD,MAAM00I,GAAgB3lF,EAAAA,GAAAA,KAAa4lF,IACjC,IACE,MAAM91H,EAAOijB,KAAK2c,MAAMk2F,EAAM91H,MACP,gBAAnBA,EAAK+1H,YACPvgG,EAAgB,CAAE55B,WAAY7b,EAAQ8L,WAAY,CAAC9H,GAAY+X,aAAa,IAC5E45H,KAGqB,eAAnB11H,EAAK+1H,YACPvgG,EAAgB,CAAE55B,WAAY7b,EAAQ8L,WAAY,CAAC9H,KACnD2xI,IAEJ,CAAE,MAAO98F,GACP,IAED,CAAC74C,EAAQ21I,EAAW3xI,EAAWyxC,IAE5BwgG,GAAa9lF,EAAAA,GAAAA,KAAa4lF,IAC9BA,EAAM7yD,cAAc7rD,OAAO,GAC1B,IAOH,OALA83B,EAAAA,GAAAA,KAAU,KACR/vC,OAAOs2C,iBAAiB,UAAWogF,GAC5B,IAAM12H,OAAOu2C,oBAAoB,UAAWmgF,KAClD,CAACA,IAGFxnF,GAAAA,GAAAC,cAAC2nF,GAAAA,EAAK,CACJ3vH,UAAU,YACVoe,OAAQA,EACR0sB,QAASskF,EACTtvH,MAAOqvH,EACPS,gBAAc,GAEbxxG,GACC2pB,GAAAA,GAAAC,cAAA,UACEhoC,UAAU,aACV6vH,OAAQH,EACRpmE,IAAK1xD,EACLkI,MAAO0rB,EAAK,cACZskG,QAAQ,yDACRC,MAAM,eAGJ,KCtEZ,GAR4CroF,IAC1C,MAAM,OAAEtpB,GAAWspB,EACbsoF,GAAkBpoF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,mBAAoBjqB,GAG3E,OAAO4xG,EAAkBjoF,GAAAA,GAAAC,cAACgoF,EAAoBtoF,QAAY7sD,CAAS,ECGrE,GAR+C6sD,IAC7C,MAAM,QAAEp2C,EAAO,OAAE7X,GAAWiuD,EACtBuoF,GAAqBroF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,uBAAwB/2C,GAAW7X,IAG7F,OAAOw2I,EAAqBloF,GAAAA,GAAAC,cAACioF,EAAuBvoF,QAAY7sD,CAAS,ECG3E,GAR4C6sD,IAC1C,MAAM,OAAEtpB,GAAWspB,EACbwoF,GAAkBtoF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,mBAAoBjqB,GAG3E,OAAO8xG,EAAkBnoF,GAAAA,GAAAC,cAACkoF,EAAoBxoF,QAAY7sD,CAAS,ECArE,GAP+Bs1I,EAAG/xG,aAChC,MAAM2iC,GAAgBnZ,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkBjqB,GAGvE,OAAO2iC,EAAgBhZ,GAAAA,GAAAC,cAAC+Y,EAAa,WAAMlmE,CAAS,ECMtD,GARqD6sD,IACnD,MAAM,MAAE77C,GAAU67C,EACZ0oF,GAA2BxoF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,4BAA6Bx8C,GAG7F,OAAOukI,EAA2BroF,GAAAA,GAAAC,cAACooF,EAA6B1oF,QAAY7sD,CAAS,ECGvF,GAR6C6sD,IAC3C,MAAM,OAAEtpB,GAAWspB,EACb2oF,GAAmBzoF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,oBAAqBjqB,GAG7E,OAAOiyG,EAAmBtoF,GAAAA,GAAAC,cAACqoF,EAAqB3oF,QAAY7sD,CAAS,ECGvE,GAR0C6sD,IACxC,MAAM,IAAE9vC,GAAQ8vC,EACV4oF,GAAgB1oF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAAkBzwC,GAGvE,OAAO04H,EAAgBvoF,GAAAA,GAAAC,cAACsoF,EAAkB5oF,QAAY7sD,CAAS,EC+JjE,IAAI01I,IAAiB,EAErB,MA2aA,IAAehoF,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KAClB,CAAC9yD,GAAU69D,eACT,MACEpuC,UACEwR,OAAO,SACL3Y,EAAQ,yBAAEgwH,IAEb,cACDx2I,GACE9B,GAEE,gBACJw+B,EAAe,0BACfiB,EAAyB,yBACzBmB,EAAwB,eACxB0R,EAAc,QACd7Y,EAAO,OACPkF,EAAM,iBACNsd,EAAgB,SAChBqB,EAAQ,0BACRh5B,EAAyB,wBACzBu4B,EAAuB,4BACvBuW,EAA2B,WAC3BhX,EAAU,YACVlpB,EAAW,kBACX/yB,EAAiB,0BACjBg8C,EAAyB,cACzBxB,EAAa,QACbmB,EAAO,WACP/C,EAAU,gBACV0V,EAAe,aACfxoB,EAAY,YACZvS,EAAW,QACXyO,EAAO,kBACPya,EAAiB,wBACjB9J,EAAuB,cACvBC,EAAa,WACb1L,EAAU,cACVa,EAAa,mBACb+W,EAAkB,kBAClBxG,IACEv4C,EAAAA,EAAAA,KAAeF,IAEXuB,OAAQyxB,EAAaztB,UAAW0tB,GAAmBC,EACrD40F,EAAe90F,GAAeC,GAChC1vB,EAAAA,EAAAA,KAAkBvD,EAAQgzB,EAAaC,QACvCtwB,EACE41I,EAAcn8F,IAAc74C,EAAAA,EAAAA,KAAkBvD,EAAQo8C,EAAW76C,OAAQ66C,EAAW72C,WACpF0xI,EAAYsB,GAAat0I,QAAQ2oF,MAAMhlE,MACvCuW,EAAcn+B,EAAO8B,eAAgBuQ,EAAAA,EAAAA,KAAWrS,EAAQA,EAAO8B,oBAAiBa,GAChF,OAAEpB,IAAWsJ,EAAAA,EAAAA,KAAyB7K,IAAW,CAAC,EAClDw4I,IAA0BhuG,EAAAA,EAAAA,KAA+BxqC,EAAQ,4BAC/Ds8C,EAAAA,EAAAA,KAA0Bt8C,GAE5By4I,EAAqB3lG,GAA0B4lG,EAAAA,EAAAA,KAAiB14I,EAAQ8yC,QAA2BnwC,EAEzG,MAAO,CACLb,gBACA62I,iBAAkBx4I,EAClBy4I,mBAAoBtiI,QAAQ/U,GAC5Bs3I,mBAAmBpjG,EAAAA,EAAAA,KAAyBz1C,EAAQ69D,GACpDi7E,mBAAmBC,EAAAA,EAAAA,KAAwB/4I,GAC3Cg5I,mBAAmBC,EAAAA,EAAAA,KAAwBj5I,GAC3Ck5I,oBAAoBC,EAAAA,EAAAA,KAAyBn5I,GAC7Co5I,sBAAsBC,EAAAA,EAAAA,KAA2Br5I,GACjDs5I,iBAAkBhjI,QAAQqkC,EAAcj5C,QACxC63I,WAAYjjI,QAAQwlC,EAAQp6C,QAC5BomH,eACA7rE,mBACAu9F,iBAAkBl8F,GAAUC,MAC5Bk8F,aAAcn8F,GAAUD,KACxBq8F,sBAAuBpjI,QAAQ6lC,GAC/BiX,8BACA9uC,4BACAu4B,0BACA88F,oBAAoBjpI,EAAAA,EAAAA,KAAyB1Q,GAC7CstD,kBAAmB55B,EAAc1zB,EAAOqtD,WAAWC,uBAAoB3qD,EACvEusH,yBAAyB5yE,EAAAA,EAAAA,KAA0Bt8C,GACnDsoB,WACAgwH,2BACAsB,kBAAmBlmH,EAAcpd,QAAQtW,EAAOouD,gBAAazrD,EAC7DijB,YAAa5lB,EAAOikB,SAASoB,MAAMM,OACnCk0H,oBAAqB75I,EAAO4e,aAAayG,MAAMM,OAC/Cm0H,iBAAkB/gG,GAAYxhC,OAC9BwiI,wBAAyBhhG,GAAYC,gBACrCoD,aACA66F,YACA+C,yBAA0B1jI,QAAQm4C,GAClCjwB,kBACAy7G,mBAAoBz7G,IAAmBnsB,EAAAA,EAAAA,KAAWrS,EAAQw+B,EAAgB1E,OAC1EogH,mBAAoBz6G,GAA2B9F,IAC/CiH,2BACAjC,SACAw7G,iBAAiBvgI,EAAAA,EAAAA,IAAgBukB,GACjC1E,UACA9b,sBAAsBC,EAAAA,EAAAA,KAA2B5d,GACjDo6I,mBAAoBn0G,GAAcC,OAClCm0G,aAAcz9F,GAAmBjpC,MACjCyuB,mBAAoBD,EAAQC,mBAC5Bk4G,mBAAoBhkI,QAAQ6rB,EAAQK,SACpCi2G,qBACA/kH,cACA4e,iBACAS,gBACA1L,aACAa,gBACAswG,yBACAnlH,SAAUrzB,EAAOqzB,SACjB4rB,qBACAxG,oBACD,GA9Geqa,EA3aoB4U,EACtC7J,WACA86E,mBACAC,qBACAC,oBACAC,oBACAE,oBACAE,qBACAI,mBACAC,aACAzxB,eACAx6D,oBACArR,mBACAu9F,mBACAC,eACAC,wBACAtmF,8BACAinF,eACA/1H,4BACAu4B,0BACA88F,qBACAzqB,0BACA5mG,WACAgwH,2BACA1yH,cACAi0H,sBACAD,oBACAE,mBACAC,0BACA39F,aACA66F,YACA+C,2BACAx7G,kBACAy7G,qBACAC,qBACAt5G,2BACA0R,iBACA3T,SACAw7G,kBACA1gH,UACA2gH,qBACAh4G,qBACAk4G,qBACAlB,uBACAz7H,uBACA86H,qBACA/kH,cACAqf,gBACA7K,gBACAb,aACAmxG,yBACAnlH,YACA4rB,sBACAxG,qBACA32C,qBAEA,MAAM,SACJy4I,GAAQ,mBACRC,GAAkB,yBAClBC,GAAwB,2BACxBC,GAA0B,eAC1Bt7F,GAAc,iBACdu7F,GAAgB,kBAChBC,GAAiB,kBACjBC,GAAiB,gBACjBC,GAAe,uBACfC,GAAsB,gBACtBtuF,GAAe,iBACfuuF,GAAgB,sBAChBC,GAAqB,kBACrBC,GAAiB,qBACjB/uF,GAAoB,uBACpBgvF,GAAsB,iBACtBC,GAAgB,qBAChBC,GAAoB,qBACpBC,GAAoB,yBACpBC,GAAwB,WACxBrwG,GAAU,cACVswG,GAAa,eACbt7G,GAAc,gBACdu7G,GAAe,iBACfh2H,GAAgB,wBAChBi2H,GAAuB,kBACvBC,GAAiB,aACjBC,GAAY,gBACZC,GAAe,WACfl6H,GAAU,iBACV+nG,GAAgB,wBAChBr9D,GAAuB,gBACvB5a,GAAe,iBACfqqG,GAAgB,oBAChB1vF,GAAmB,0BACnB2vF,GAAyB,6BACzBC,GAA4B,uBAC5BC,GAAsB,mBACtB/vF,GAAkB,eAClBgwF,KACEr5H,EAAAA,EAAAA,MAEAqN,EAAAA,MAAUmoH,KACZA,IAAiB,EAEjBloH,QAAQC,IAAI,qBAId6tC,EAAAA,GAAAA,IAAW,MACJk+E,EAAAA,GAAAA,IAAWxsF,GAAAA,GAAQC,MAAM,GAhHG,KAoHnC,MAAMuoB,IAAe5jB,EAAAA,GAAAA,IAAuB,MAEtC+7D,IAAgB/7D,EAAAA,GAAAA,IAAuB,OAEvC,UAAEu8D,KAAchzD,EAAAA,EAAAA,OACtBpN,EAAAA,GAAAA,KAAU,KACHioF,GAAqBC,GAAuB9nB,GAGtC6nB,GAAoBC,GAAsB/6E,GAEnD6rD,KAHAA,IAIF,GACC,CAACoH,GAAW6nB,EAAkBC,EAAoB/6E,EAAU6rD,MAE/Dx2B,EAAAA,GAAAA,GAAY2oD,GAAiBnoH,EApIC,SAoIuC/wB,GAAW,IAEhF+tD,EAAAA,GAAAA,KAAU,KACR,IAAK7e,EAAAA,GACH,OAGF,MAAMuqG,EAAgCz7H,OAAOmxB,SAAUuqG,GAAGC,GAAAA,EAAcC,kBAAkB,KACxFP,IAA6B,EAAK,IAG9BQ,EAA4B77H,OAAOmxB,SAAUuqG,GAAGC,GAAAA,EAAcG,cAAc,KAChFT,IAA6B,GAC7BI,KAAiC,IAGnC,MAAO,KACLI,MACAJ,KAAiC,CAClC,GACA,KAGH1rF,EAAAA,GAAAA,KAAU,KACJh9B,GAAeL,KACjB+rB,IAAe,GACflU,KACAswG,KACAU,KACA3B,KACAQ,KACAP,KACAkB,KACAjB,KACAC,KACAE,KACAC,GAAkB,CAAEvyH,SAAUo0H,EAAAA,MAC9Bx8G,KACAu7G,KACAT,KACAC,KACAY,KACAC,KACA1vF,KACA2vF,KACA7vF,KACF,GACC,CAACx4B,EAAaL,MAGjBq9B,EAAAA,GAAAA,KAAU,KACJh9B,GAAe/V,IACjBw9H,KACA9uF,KACA4vF,KACF,GACC,CAACt+H,EAAsB+V,KAG1Bg9B,EAAAA,GAAAA,KAAU,KACJh9B,IACEpL,IAAao0H,EAAAA,KACf7B,GAAkB,CAAEvyH,SAAUA,IAGhCwyH,GAAgB,CAAE95G,SAAU1Y,IAC9B,GACC,CAACA,EAAUoL,KAGdg9B,EAAAA,GAAAA,KAAU,KACJh9B,GACFjO,GAAiB,CACfrd,IAAKhC,OAAO+F,MAAKhD,EAAAA,EAAAA,MAAYyV,aAAarX,MAC1CkX,aAAa,GAEjB,GACC,CAACiV,KAGJg9B,EAAAA,GAAAA,KAAU,KACJh9B,GAAeL,KACZzN,GAAgBi0H,IACnBptF,KACAN,MAGEvmC,GAAei0H,GACjBqB,KAEJ,GACC,CAACt1H,EAAai0H,EAAqBnmH,EAAaL,MAGnDq9B,EAAAA,GAAAA,KAAU,KACJipF,GAAsBjmH,GACxB6nH,IACF,GACC,CAAC5B,EAAoBjmH,KAGxBg9B,EAAAA,GAAAA,KAAU,KACH4nF,GACH8C,IACF,GACC,CAAC9C,KAGJ5nF,EAAAA,GAAAA,KAAU,KACR,MAAMisF,GAA4BC,EAAAA,GAAAA,MAC9BD,GAA2BE,SAC7BC,EAAAA,GAAAA,IAAgBC,mBAAmBJ,EAA0BE,QAC/D,GACC,KAEHnsF,EAAAA,GAAAA,KAAU,IACD/vC,OAAOmxB,UAAUuqG,GAAGC,GAAAA,EAAcU,UAAWzyH,KAClDuyH,EAAAA,GAAAA,IAAgBC,mBAAmBxyH,GAAM,KAE1C,KAEHmmC,EAAAA,GAAAA,KAAU,KACR,MAAMusF,GAAqBC,EAAAA,GAAAA,IAAkBp7I,IACxCm7I,GAELt7H,GAAW,CACTpgB,OAAQ07I,EAAmB17I,OAC3B2E,SAAU+2I,EAAmB/2I,SAC7BgR,KAAM+lI,EAAmB/lI,MACzB,GACD,CAACpV,MAGJw0F,EAAAA,GAAAA,KAAgB,KACd,MAAMxM,EAAY3R,GAAanwD,QACiB,IAA5C8hE,EAAUqzD,WAAYC,oBACxB37B,EAAAA,GAAAA,IAAc33B,EAAW,0BAC3B,GACC,IAEH,MAAMuzD,IAAuBxoF,EAAAA,GAAAA,GAC3B8jF,OAAkBh2I,GAAW,OAAMA,EAAWywD,OAA6BzwD,GAAW,GAElF26I,IAA2B/oF,EAAAA,GAAAA,KAAO,GAClCkgC,IAAcC,EAAAA,GAAAA,MAGpB5mB,EAAAA,GAAAA,IAAc,EAAEyvE,MACd,QAA6B56I,IAAzB46I,GAAsC5E,IAAqB4E,IAAyBruB,EACtF,OAGFouB,GAAyBt1H,SAAU,EAE/BkQ,EAAAA,KACFslH,EAAAA,GAAAA,KAAoB,KAClBn5I,SAASmgC,KAAKs/C,UAAUqwC,OAAO,8BAA+BwkB,EAAiB,IAInF,MAAM8E,GAA4BlsC,EAAAA,GAAAA,OAElCmsC,EAAAA,GAAAA,GAAqBr5I,SAASokE,eAAe,iBAAkB,KAC7Dg1E,IACAH,GAAyBt1H,SAAU,EACnCysE,IAAa,GACb,GACD,CAACkkD,EAAkBzpB,EAAyBz6B,KAE/C,MAAMkpD,IAAwB9oF,EAAAA,GAAAA,GAC5BgkF,OAAmBl2I,GAAW,OAAMA,EAAWywD,OAA6BzwD,GAAW,GAEnFi7I,IAA4BrpF,EAAAA,GAAAA,KAAO,IAClCspF,GAAqBC,KAA0BzsF,EAAAA,GAAAA,IAASwnF,GAEzDr3E,IAAeC,EAAAA,GAAAA,OAGrBqM,EAAAA,GAAAA,IAAc,EAAEiwE,EAAwBC,MACtC,QAA8Br7I,IAA1Bq7I,GAAuCnF,IAAsBmF,EAC/D,OAGF,IAAKD,GAA0BvF,EAE7B,YADAsF,GAAuBjF,GAIzB+E,GAA0B51H,SAAU,EAEpC,MAAMy1H,GAA4BlsC,EAAAA,GAAAA,OAElCmsC,EAAAA,GAAAA,GAAqBr5I,SAASokE,eAAe,gBAAiB,KAC5Dg1E,IACAG,GAA0B51H,SAAU,EACpCysE,KACAqpD,GAAuBjF,EAAkB,GACzC,GACD,CAACD,EAAoBC,EAAmBL,EAAwB/jD,KAEnE,MAAM3sE,IAAY0pC,EAAAA,GAAAA,GAChB6rF,GAAqBY,eAAiB,oBACtCZ,GAAqBa,cAAgB,mBACrCZ,GAAyBt1H,SAAW,wBACpC21H,GAAsBM,eAAiB,qBACvCN,GAAsBO,cAAgB,oBACtCN,GAA0B51H,SAAW,yBACrC61H,IAAuB,sBACvBzqF,GAA+B,6BAC/BoO,IAAgB,iBAGZ28E,IAAaloF,EAAAA,GAAAA,IAAgB,KACjC0kF,GAAiB,CAAEt8F,WAAW,GAAO,IAGjCgvD,IAAcp3C,EAAAA,GAAAA,IAAgB,KAClC0kF,GAAiB,CAAEt8F,WAAW,IAEzBh6C,SAASujB,MAAMzkB,SAASw7C,EAAAA,MAC3BlN,KAGFyH,IAAW,EAAM,IAGbklG,IAA6BnoF,EAAAA,GAAAA,IAAgB,KACjDolF,IAAsB,IAGlBgD,IAAkCpoF,EAAAA,GAAAA,IAAgB,KACtDqlF,IAAsB,IAQxB,OAJA9hC,EAAAA,GAAAA,GAAkB2kC,GAAY9wC,KAAex7D,EAAAA,KAC7CysG,EAAAA,GAAAA,GAAgBH,I7JjhBH,SAAoCzlF,GAAa,IAC9DhI,EAAAA,GAAAA,KAAU,KACR,GAAK/Y,EAAAA,GAAL,CAIA,IAAI+gB,EAgBJ,OATAxJ,IAAc21B,aAAa,UAAWz1B,IAKlCv5C,EAAAA,KAAW0oI,EAAAA,IACbl6I,SAAS4yD,iBAAiB,eAAgB3H,IAGrC,KACLJ,IAAc21B,aAAa,UAAW,yDAClChvE,EAAAA,KAAW0oI,EAAAA,IACbl6I,SAAS6yD,oBAAoB,eAAgB5H,GAC/C,EAjBAJ,IAAc21B,aAAa,UAXE,4EAM/B,CAuBC,GACA,CAACnsB,GACN,C6JqfE8lF,CAA2B1F,GAAqBE,GAG9CnpF,GAAAA,GAAAC,cAAA,OAAKqI,IAAKggB,GAAcj2E,GAAG,OAAO4lB,UAAWA,IAC3C+nC,GAAAA,GAAAC,cAAC2uF,GAAU,CAACtmF,IAAKm4D,KACjBzgE,GAAAA,GAAAC,cAAC4uF,GAAY,CAACpuB,cAAeA,GAAezyD,SAAUA,IACtDhO,GAAAA,GAAAC,cAACihF,GAAW,CAAClzE,SAAUA,IACvBhO,GAAAA,GAAAC,cAACif,GAAW,CAAC7oC,OAAQ4yG,IACrBjpF,GAAAA,GAAAC,cAAC+iF,GAAW,CAAC3sG,OAAQ8yG,IACrBnpF,GAAAA,GAAAC,cAACinF,GAAsB,CAAC7wG,OAAQgzG,IAChCrpF,GAAAA,GAAAC,cAACgnF,GAAoB,CAACxkG,eAAgBA,IACtCud,GAAAA,GAAAC,cAAC+Y,GAAa,CAAC3iC,OAAQozG,IACvBzpF,GAAAA,GAAAC,cAAC4lF,GAAO,CAACxvG,OAAQqzG,IAChBzxB,GAAgBj4D,GAAAA,GAAAC,cAACsf,GAAW,CAAC3pB,IAAKqiE,EAAa5lH,GAAIlB,QAAS8mH,EAAcz4C,MAAI,IAC/Exf,GAAAA,GAAAC,cAACsoF,GAAa,CAAC14H,IAAKu8B,IACpB4T,GAAAA,GAAAC,cAAC+pE,GAAQ,CAACz8E,SAAUo8F,EAAkBn8F,KAAMo8F,IAC5C5pF,GAAAA,GAAAC,cAACiqE,GAAY,CAACtgG,QAASA,EAAS0gH,gBAAiBA,IACjDtqF,GAAAA,GAAAC,cAACgoF,GAAe,CAAC5xG,OAAQwzG,IACzB7pF,GAAAA,GAAAC,cAACM,GAAe,CACdlqB,OAAQ5vB,QAAQgO,GAChBsuC,QAASwrF,GACTO,oBAAqBr6H,IAEvBurC,GAAAA,GAAAC,cAACI,GAAoB,CACnBnqC,kBAAmB82B,EACnB+V,QAASyrF,KAEV/wF,GAAqBuC,GAAAA,GAAAC,cAACC,GAAS,CAAC/B,YAAaV,IAC9CuC,GAAAA,GAAAC,cAACL,GAAgB,CAAC9V,SAAUrjC,QAAQg3C,GAAqBssF,KACzD/pF,GAAAA,GAAAC,cAACkoF,GAAe,CACd9xG,OAAQ5vB,QAAQwjI,GAAoBC,GACpCxiI,OAAQuiI,EACR9gG,gBAAiB+gG,IAEnBlqF,GAAAA,GAAAC,cAAC2pE,GAAU,CAACtxF,KAAMd,IAClBwoB,GAAAA,GAAAC,cAAC8pE,GAAa,CAACD,MAAOzxF,IACtB2nB,GAAAA,GAAAC,cAACgqE,GAAiB,CAAC3xF,KAAMsQ,KACzBoX,GAAAA,GAAAC,cAAC4pE,GAAa,CAACvxF,KAAM4K,IACrB8c,GAAAA,GAAAC,cAACknF,GAAS,CAAC56F,WAAYA,EAAY66F,UAAWA,IAC9CpnF,GAAAA,GAAAC,cAACkqE,GAAW,CAACr7F,OAAQA,IACrBkxB,GAAAA,GAAAC,cAAC+lF,GAAe,MAChBhmF,GAAAA,GAAAC,cAACmjF,GAAiB,MAClBpjF,GAAAA,GAAAC,cAACE,GAAS,CAACrW,SAAUigG,IACrB/pF,GAAAA,GAAAC,cAAC8uF,GAAW,CAACruF,eAAa,IAC1BV,GAAAA,GAAAC,cAACG,GAAkB,CAAC/pB,OAAQ8zG,IAC5BnqF,GAAAA,GAAAC,cAACijF,GAAa,CACZp5G,IAAKsgH,EACL/iI,KAAMsnB,GAAiBtnB,KACvB0iB,yBAA0B4E,GAAiB5E,2BAE7Ci2B,GAAAA,GAAAC,cAAC0pE,GAAqB,CAAC7/F,IAAKugH,IAC5BrqF,GAAAA,GAAAC,cAACgjF,GAAwB,CAAClyG,yBAA0BA,IACpDivB,GAAAA,GAAAC,cAACwkB,GAAyB,MACzB8lE,GAAsBvqF,GAAAA,GAAAC,cAACqoF,GAAgB,CAACjyG,OAAQk0G,IACjDvqF,GAAAA,GAAAC,cAACooF,GAAwB,CAACvkI,MAAO0mI,IACjCxqF,GAAAA,GAAAC,cAACmqE,GAAY,CAAC/zF,OAAQ9D,EAAoBwwB,QAAS+oF,KACnD9rF,GAAAA,GAAAC,cAACoqE,GAAY,CAACh0F,OAAQo0G,EAAoB1nF,QAASgpF,KACnD/rF,GAAAA,GAAAC,cAAC0lF,GAAkB,CAACh6H,OAAQi9H,IAC5B5oF,GAAAA,GAAAC,cAACukB,GAAc,CAACnuC,OAAQkzG,IACxBvpF,GAAAA,GAAAC,cAACioF,GAAkB,CAAC3+H,QAAS6lC,IAAoB4/F,kBAAmBt9I,OAAQ09C,IAAoB19C,SAC5F,K,sDCpjBV,MAqHA,IAAe8uD,EAAAA,GAAAA,KAAKyC,EAAAA,EAAAA,KACjB9yD,IACQ,CACL8+I,iBAAkB9+I,EAAO8+C,YAHXgU,EAnH0BisF,EAC5CC,WACAF,uBAEA,MAAM,aACJj9F,EAAY,QACZo9F,EAAO,wBACPn9F,EAAuB,2BACvBo9F,IACEr8H,EAAAA,EAAAA,OAEE,qBACJ4+B,EAAoB,aACpBM,EAAY,UACZt5B,GACEq2H,EAEExrG,GAAOge,EAAAA,GAAAA,MACN6tF,EAAiBC,IAAsB/tF,EAAAA,GAAAA,IAAiB,KACxDguF,EAAoBC,IAAyBjuF,EAAAA,GAAAA,KAAS,IACtDkuF,EAAqBC,EAAyBC,IAA4BniF,EAAAA,GAAAA,IAAQ,IACnF,aAAE9I,IAAiBK,EAAAA,GAAAA,GAAkBmqF,IAE3C/gF,EAAAA,GAAAA,GAAWihF,EAA4Bn9F,EAAeA,EAAe1/C,KAAKC,WAAQK,GAElF,MAAM+8I,GAAmBhuF,EAAAA,GAAAA,KAAY,KACnC0tF,EAAmB,GAAG,GACrB,IAEGO,GAAejuF,EAAAA,GAAAA,KAAa5S,SACXn8C,IAAjBo/C,GAKJq9F,EAAmB,KACnBx9F,EAAAA,GAAAA,IAAe9C,GAAUtB,KAAKqE,GAAc,KAC1CC,IACAs9F,EAAmB9rG,EAAK,sBAAsB,KAP9C8rG,EAAmB9rG,EAAK,aAQxB,GACD,CAACA,EAAMyO,KAEV2O,EAAAA,GAAAA,KAAU,UACa/tD,IAAjBo/C,EACFq9F,EAAmB9rG,EAAK,cACU,IAAzBmO,GACT29F,EAAmB,GACrB,GACC,CAACr9F,EAAczO,EAAMmO,IAExB,MAAMm+F,GAAuBluF,EAAAA,GAAAA,KAAY,KACvC+tF,IACAR,EAAQ,CAAEY,cAAc,GAAO,GAC9B,CAACJ,EAA0BR,IAE9B,GAAKzqF,EAoBL,OACE3E,GAAAA,GAAAC,cAAA,OAAKhoC,UC/GmB,wBDgHtB+nC,GAAAA,GAAAC,cAAA,OAAKhoC,UChHkD,uBDgHvBoqC,IAAK5e,EAAK6e,MAAQ,WAAQxvD,GACxDktD,GAAAA,GAAAC,cAACgwF,GAAAA,EAAuB,CACtB5wD,OAAQC,GAAAA,EAAe4wD,KACvBC,WAAYC,GACZt5F,KAnFQ,IAoFR7+B,UCrHiF,yBDwHnF+nC,GAAAA,GAAAC,cAACowF,GAAAA,EAAY,CACXz6F,IAAI,gBACJ06F,kBAAgB,EAChBC,8BAA4B,EAC5B33H,UAAWA,EACXtX,MAAOguI,EACPl8E,YAAa3vB,EAAK,qCAClB+sG,YAAa/sG,EAAK,QAClBgtG,WAAYZ,EACZa,kBAAmBlB,EACnBmB,UAAQ,EACRC,2BAA4BnB,EAC5BoB,SAAUf,IApCd9vF,GAAAA,GAAAC,cAAA,OAAKhoC,UChG8G,wBDiGjH+nC,GAAAA,GAAAC,cAAA,SACED,GAAAA,GAAAC,cAAC6wF,GAAAA,EAAI,CAAC1uF,QAASutF,GAAyB,WAAe,IAAI,wCAG7D3vF,GAAAA,GAAAC,cAAA,SACED,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CAACC,MAAM,cAAc1L,KAAK,OAAOu3C,QAAM,EAACjsC,QAASutF,GACrDlsG,EAAK,8BAmCZuc,GAAAA,GAAAC,cAAC+/B,GAAAA,EAAa,CACZ3pD,OAAQq5G,EACR3sF,QAAS6sF,EACTxzI,KAAMqnC,EAAK,mBACXkxE,aAAclxE,EAAK,0BACnBy8C,eAAgB6vD,EAChBr7B,sBAAoB,IAElB,KE3INr0F,EAAAA,KAEFC,QAAQC,IAAI,+BAGd,MAAQ0uB,UAAU,eAAEC,IAAgB,gBAAE7iC,KAAoB/S,EAAAA,EAAAA,MACrD+S,IAAoB6iC,IAAmBmF,EAAAA,KAC1CrhC,EAAAA,EAAAA,MAAa8+B,S,oCCff,MAAM,aAAEqD,GAAiB47F,EAAQ,OAG3BC,EAAcj8F,EAAO3vC,KAAK,iuCAAkuC,OAC5vC6rI,EAAcl8F,EAAO3vC,KAAK,OAAQ,OAGxC,SAAS8rI,EAAeC,EAAQj7F,GAC5B,MAAM,IAAIr4B,MAAO,eAAcszH,EAAOl5H,4BAA4Bi+B,IACtE,CA+qBAk7F,EAAOC,QAAU,CACbC,aAxKJ,SAAsBngJ,GAClB,QAAgB2B,IAAZ3B,EAAJ,CAGA,GAAuB,iBAAZA,EACP,OAAOA,EAEX,GAA+B,aAA3BA,EAAQqkD,eACR,OAAOrkD,EAAQkB,GAEnB,MAAM,IAAIwrB,MAAO,yBAAwB1sB,EAAQo3B,YAAY0I,OAP7D,CAQJ,EAmKIsgH,aAnqBJ,SAASA,EAAaJ,EAAQK,GAAY,EAAMC,GAAY,GACxD,QAA8B3+I,IAA1Bq+I,EAAO37F,eAA8B,CAGrC,GAAIg8F,GAAa,gBAAiBL,EAC9B,OAAOA,EAAOO,YACX,GAAI,WAAYP,EACnB,OAAOI,EAAaJ,EAAOA,QAE3BD,EAAeC,EAAQ,YAE/B,CACA,GAA8B,aAA1BA,EAAO37F,eACP,OAAO27F,EAGX,GAAIA,aAAkBh8F,EAAaw8F,KAAM,CACrC,GAAIR,EAAOtqH,QAAU2qH,EACjB,OAAO,IAAIr8F,EAAay8F,cACrB,QAA0B9+I,IAAtBq+I,EAAO3/H,YAA6BigI,EAM3C,MAAM,IAAI5zH,MAAM,uDALhB,OAAO,IAAIs3B,EAAa08F,cAAc,CAClCnqI,OAAQypI,EAAO9+I,GACfmf,WAAY2/H,EAAO3/H,YAK/B,CACA,GAAI2/H,aAAkBh8F,EAAa28F,MAAQX,aAAkBh8F,EAAa48F,WACnEZ,aAAkBh8F,EAAa68F,cAClC,OAAO,IAAI78F,EAAa88F,cAAc,CAAEvgJ,OAAQy/I,EAAO9+I,KAE3D,GAAI8+I,aAAkBh8F,EAAa+8F,QAAS,CACxC,QAA0Bp/I,IAAtBq+I,EAAO3/H,YAA6BigI,EAMpC,MAAM,IAAIU,UAAU,0DALpB,OAAO,IAAIh9F,EAAai9F,iBAAiB,CACrC/yI,UAAW8xI,EAAO9+I,GAClBmf,WAAY2/H,EAAO3/H,YAK/B,CACA,OAAI2/H,aAAkBh8F,EAAak9F,iBAGxB,IAAIl9F,EAAai9F,iBAAiB,CACrC/yI,UAAW8xI,EAAO9+I,GAClBmf,WAAY2/H,EAAO3/H,aAIvB2/H,aAAkBh8F,EAAam9F,UACxB,IAAIn9F,EAAa08F,cAAc,CAClCnqI,OAAQypI,EAAOzpI,OACf8J,WAAY2/H,EAAO3/H,aAGvB2/H,aAAkBh8F,EAAao9F,aACxB,IAAIp9F,EAAai9F,iBAAiB,CACrC/yI,UAAW8xI,EAAO9xI,UAClBmS,WAAY2/H,EAAO3/H,aAGvB2/H,aAAkBh8F,EAAaq9F,UACxB,IAAIr9F,EAAas9F,eAExBtB,aAAkBh8F,EAAau9F,SACxBnB,EAAaJ,EAAO5uI,MAG3B4uI,aAAkBh8F,EAAaw9F,SACxB,IAAIx9F,EAAa88F,cAAc,CAAEvgJ,OAAQy/I,EAAO9+I,KAGvD8+I,aAAkBh8F,EAAay9F,SACxB,IAAIz9F,EAAa88F,cAAcd,EAAOz/I,aAGjDw/I,EAAeC,EAAQ,YAE3B,EAwlBI0B,eAhHJ,SAAwB1B,GACpB,OAAIA,aAAkBh8F,EAAaw8F,KAC3BR,EAAO7qH,UAAY6qH,EAAO5qH,UAClB,GAAE4qH,EAAO5qH,aAAa4qH,EAAO7qH,WAC9B6qH,EAAO5qH,UACP4qH,EAAO5qH,UACP4qH,EAAO7qH,SACP6qH,EAAO7qH,SAEP,GAEJ6qH,aAAkBh8F,EAAa28F,MAAQX,aAAkBh8F,EAAa+8F,QACtEf,EAAOp5H,MAEX,EACX,EAoGI+6H,oBAhYJ,SAA6BC,GACzB,GAAIA,GAAY,MACZ,OAAO,GAEX,GAAIA,GAAY,UACZ,OAAO,IAEX,GAAIA,GAAY,SACZ,OAAO,IAEX,GAAIA,GAAY,UACZ,OAAO,IAEX,GAAIA,GAAY,UACZ,OAAO,KAGX,MAAM,IAAIl1H,MAAM,sBACpB,EA+WIm1H,kBAvWJ,SAA2BD,GACvB,GAAIA,GAAY,UACZ,OAAO,IAEX,GAAIA,GAAY,SACZ,OAAO,IAEX,GAAIA,GAAY,UACZ,OAAO,IAEX,GAAIA,GAAY,UACZ,OAAO,IAGX,MAAM,IAAIl1H,MAAM,sBACpB,EA0VIo1H,mBA5cJ,SAA4BC,GAExB,GAAIA,EAASrhJ,OAAS,GAAqB,IAAhBqhJ,EAAS,GAChC,OAAOA,EAEX,MAAMC,EAASp+F,EAAO3vC,KAAK4rI,GAK3B,OAHAmC,EAAO,KAAOD,EAAS,GAEvBC,EAAO,KAAOD,EAAS,GAChBn+F,EAAO92C,OAAO,CAACk1I,EAAQD,EAAS5tI,MAAM,GAAI2rI,GACrD,EAkcImC,MAzEJ,SAAev3G,EAAMw3G,GAAa,GAE9B,OAAQx3G,GACJ,KAAK,EACD,MAAO,CACHxpC,GAAI,EACJihJ,UAAY,OAAMD,EAAa,KAAO,sBACtCE,KAAM,KAEd,KAAK,EACD,MAAO,CACHlhJ,GAAI,EACJihJ,UAAY,OAAMD,EAAa,KAAO,sBACtCE,KAAM,KAEd,KAAK,EACD,MAAO,CACHlhJ,GAAI,EACJihJ,UAAY,OAAMD,EAAa,KAAO,sBACtCE,KAAM,KAEd,KAAK,EACD,MAAO,CACHlhJ,GAAI,EACJihJ,UAAY,OAAMD,EAAa,KAAO,sBACtCE,KAAM,KAEd,KAAK,EACD,MAAO,CACHlhJ,GAAI,EACJihJ,UAAY,OAAMD,EAAa,KAAO,sBACtCE,KAAM,KAEd,QACI,MAAM,IAAI11H,MAAO,qCAAoCge,KAkBjE,E","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/api/gramjs/localDb.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/helpers.ts","webpack://telegram-t/./src/api/gramjs/apiBuilders/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/lib/gramjs/Utils.js"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId) && !isLocal) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiVideo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, partition, split, unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getMessageOriginalId,\n  getUserFullName,\n  isChatChannel,\n  isDeletedUser,\n  isLocalMessageId,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const draftReplyInfo = !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    userId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n          wasDrafted: Boolean(draft),\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: translate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (isDeepLink(urlWithProtocol)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    });\n\n    global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountChats, accountUsers, globalChats, globalUsers,\n      } = result;\n\n      if (accountChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...accountChats, ...globalChats], 'id'));\n      }\n\n      if (accountUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...accountUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: accountChats.map(({ id }) => id),\n          userIds: accountChats.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ApiChat } from '../../../api/types';\nimport type { SharedMediaType, ThreadId } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    threadId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalTextSearchResults(global, resultChatId, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateLocalMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      loadAllChats({ listType: 'saved', shouldReplace: true });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { accountUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (accountUsers.length) {\n      global = addUsers(global, buildCollectionByKey(accountUsers, 'id'));\n      localUserIds = accountUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChats, addUsers, removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectSendAs,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      const attachBot = result.bot;\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError, isChatChannel } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n\n  if (!inputInvoice || !formId) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: String(month.amount),\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatChannel(chat)) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostsListResult, boostStatusResult] = await Promise.all([\n    callApi('fetchBoostsList', { chat }),\n    callApi('fetchBoostsStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostsListResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = addUsers(global, buildCollectionByKey(boostsListResult.users, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      boosters: boostsListResult.boosters,\n      boosterIds: boostsListResult.boosterIds,\n      count: boostsListResult.count,\n      nextOffset: boostsListResult.nextOffset,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      boosters: {\n        ...tabState.boostStatistics.boosters,\n        ...result.boosters,\n      },\n      boosterIds: unique([...tabState.boostStatistics.boosterIds || [], ...result.boosterIds]),\n      count: result.count,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  let tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n\n  const newStatusResult = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!newStatusResult) {\n    return;\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal?.boostStatus) return;\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      boostStatus: newStatusResult,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getMessageKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiStoryView } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerPinnedStory,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isPinned } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isPinned });\n  global = updatePeerPinnedStory(global, peerId, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { peer, storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isPinned: currentIsPinned });\n    global = updatePeerPinnedStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerPinnedStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isPreload = 'isPreload' in payload;\n  const {\n    offset, areReactionsFirst, areJustContacts, query, limit,\n  } = isPreload ? {\n    offset: undefined,\n    areReactionsFirst: undefined,\n    areJustContacts: undefined,\n    query: undefined,\n    limit: PREVIEW_AVATAR_COUNT,\n  } : payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (!isPreload) {\n    global = updateStoryViewsLoading(global, true, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (!isPreload) global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n\n  if (isPreload && result.views?.length) {\n    const recentViewerIds = result.views\n      .filter((view): view is ApiStoryView => 'date' in view)\n      .map((view) => view.peerId);\n    global = updatePeerStoryViews(global, peerId, storyId, {\n      recentViewerIds,\n      viewsCount: result.viewsCount,\n      reactionsCount: result.reactionsCount,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog, getMessageSummaryText, getSenderTitle, isChatChannel, isJoinedChannelMessage,\n} from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({ replyToMsgId: messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import BigInt from 'big-integer';\nimport { constructors } from '../../lib/gramjs/tl';\n\nimport type { Api as GramJs } from '../../lib/gramjs';\n\nimport { DATA_BROADCAST_CHANNEL_NAME } from '../../config';\nimport { throttle } from '../../util/schedulers';\nimport { omitVirtualClassFields } from './apiBuilders/helpers';\n\n// eslint-disable-next-line no-restricted-globals\nconst IS_MULTITAB_SUPPORTED = 'BroadcastChannel' in self;\n\nexport type StoryRepairInfo = {\n  storyData?: {\n    peerId: string;\n    id: number;\n  };\n};\n\nexport interface LocalDb {\n  // Used for loading avatars and media through in-memory Gram JS instances.\n  chats: Record<string, GramJs.Chat | GramJs.Channel>;\n  users: Record<string, GramJs.User>;\n  messages: Record<string, GramJs.Message | GramJs.MessageService>;\n  documents: Record<string, GramJs.Document & StoryRepairInfo>;\n  stickerSets: Record<string, GramJs.StickerSet>;\n  photos: Record<string, GramJs.Photo & StoryRepairInfo>;\n  webDocuments: Record<string, GramJs.TypeWebDocument>;\n  commonBoxState: Record<string, number>;\n  channelPtsById: Record<string, number>;\n}\n\nconst channel = IS_MULTITAB_SUPPORTED ? new BroadcastChannel(DATA_BROADCAST_CHANNEL_NAME) : undefined;\n\nlet batchedUpdates: {\n  name: string;\n  prop: string;\n  value: any;\n}[] = [];\nconst throttledLocalDbUpdate = throttle(() => {\n  channel!.postMessage({\n    type: 'localDbUpdate',\n    batchedUpdates,\n  });\n  batchedUpdates = [];\n}, 100);\n\nfunction createProxy(name: string, object: any) {\n  return new Proxy(object, {\n    get(target, prop: string, value: any) {\n      return Reflect.get(target, prop, value);\n    },\n    set(target, prop: string, value: any) {\n      batchedUpdates.push({ name, prop, value });\n      throttledLocalDbUpdate();\n      return Reflect.set(target, prop, value);\n    },\n  });\n}\n\nfunction convertToVirtualClass(value: any): any {\n  if (value instanceof Uint8Array) return Buffer.from(value);\n  if (typeof value === 'object' && Object.keys(value).length === 1 && Object.keys(value)[0] === 'value') {\n    return BigInt(value.value);\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(convertToVirtualClass);\n  }\n\n  if (typeof value !== 'object' || !('CONSTRUCTOR_ID' in value)) {\n    return value;\n  }\n  const path = value.className.split('.');\n  const VirtualClass = path.reduce((acc: any, field: string) => {\n    return acc[field];\n  }, constructors);\n\n  const valueOmited = omitVirtualClassFields(value);\n  const valueConverted = Object.keys(valueOmited).reduce((acc, key) => {\n    acc[key] = convertToVirtualClass(valueOmited[key]);\n    return acc;\n  }, {} as Record<string, any>);\n\n  return new VirtualClass(valueConverted);\n}\n\nfunction createLocalDbInitial(initial?: LocalDb): LocalDb {\n  return [\n    'localMessages', 'chats', 'users', 'messages', 'documents', 'stickerSets', 'photos', 'webDocuments', 'stories',\n    'commonBoxState', 'channelPtsById',\n  ]\n    .reduce((acc: Record<string, any>, key) => {\n      const value = initial?.[key as keyof LocalDb] ?? {};\n      const convertedValue = Object.keys(value).reduce((acc2, key2) => {\n        if (key === 'commonBoxState' || key === 'channelPtsById') {\n          const typedValue = value as Record<string, number>;\n          acc2[key2] = typedValue[key2];\n          return acc2;\n        }\n\n        acc2[key2] = convertToVirtualClass(value[key2]);\n        return acc2;\n      }, {} as Record<string, any>);\n\n      acc[key] = IS_MULTITAB_SUPPORTED\n        ? createProxy(key, convertedValue)\n        : convertedValue;\n      return acc;\n    }, {} as LocalDb) as LocalDb;\n}\n\nconst localDb: LocalDb = createLocalDbInitial();\n\nexport default localDb;\n\nexport function broadcastLocalDbUpdateFull() {\n  if (!channel) return;\n\n  channel.postMessage({\n    type: 'localDbUpdateFull',\n    localDb: Object.keys(localDb).reduce((acc: Record<string, any>, key) => {\n      acc[key] = { ...localDb[key as keyof LocalDb] };\n      return acc;\n    }, {} as Record<string, any>),\n  });\n}\n\nexport function updateFullLocalDb(initial: LocalDb) {\n  Object.assign(localDb, createLocalDbInitial(initial));\n}\n\nexport function clearLocalDb() {\n  Object.assign(localDb, createLocalDbInitial());\n}\n","import type { Api as GramJs } from '../../../lib/gramjs';\n\ntype VirtualFields =\n  'flags'\n  | 'CONSTRUCTOR_ID'\n  | 'SUBCLASS_OF_ID'\n  | 'className'\n  | 'classType'\n  | 'getBytes';\n\nexport function bytesToDataUri(bytes: Buffer, shouldOmitPrefix = false, mimeType: string = 'image/jpeg') {\n  const prefix = shouldOmitPrefix ? '' : `data:${mimeType};base64,`;\n\n  return `${prefix}${btoa(String.fromCharCode(...bytes))}`;\n}\n\nexport function omitVirtualClassFields<T extends GramJs.VirtualClass<T> & { flags?: any }>(\n  instance: T,\n): Omit<T, VirtualFields> {\n  const {\n    flags,\n    CONSTRUCTOR_ID,\n    SUBCLASS_OF_ID,\n    className,\n    classType,\n    getBytes,\n    ...rest\n  } = instance;\n\n  return rest;\n}\n","import { Api as GramJs } from '../../../lib/gramjs';\n\nimport type { ApiDraft } from '../../../global/types';\nimport type {\n  ApiAction,\n  ApiAttachment,\n  ApiChat,\n  ApiContact,\n  ApiGroupCall,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiKeyboardButton,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiMessageForwardInfo,\n  ApiNewPoll,\n  ApiPeer,\n  ApiPhoto,\n  ApiReplyInfo,\n  ApiReplyKeyboard,\n  ApiSponsoredMessage,\n  ApiSponsoredWebPage,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiThreadInfo,\n  ApiVideo,\n  MediaContent,\n  PhoneCallAction,\n} from '../../types';\nimport {\n  ApiMessageEntityTypes, MAIN_THREAD_ID,\n} from '../../types';\n\nimport {\n  DELETED_COMMENTS_CHANNEL_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SPONSORED_MESSAGE_CACHE_MS,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getEmojiOnlyCountForMessage } from '../../../global/helpers/getEmojiOnlyCountForMessage';\nimport { omitUndefined, pick } from '../../../util/iteratees';\nimport { getServerTime, getServerTimeOffset } from '../../../util/serverTime';\nimport { interpolateArray } from '../../../util/waveform';\nimport { buildPeer } from '../gramjsBuilders';\nimport {\n  addPhotoToLocalDb,\n  resolveMessageApiChatId,\n  serializeBytes,\n} from '../helpers';\nimport { buildApiBotApp } from './bots';\nimport { buildApiCallDiscardReason } from './calls';\nimport {\n  buildApiPhoto,\n} from './common';\nimport { buildMessageContent, buildMessageMediaContent, buildMessageTextContent } from './messageContent';\nimport { buildApiPeerId, getApiChatIdFromMtpPeer, isPeerUser } from './peers';\nimport { buildMessageReactions } from './reactions';\n\nconst LOCAL_MESSAGES_LIMIT = 1e6; // 1M\n\nconst LOCAL_MEDIA_UPLOADING_TEMP_ID = 'temp';\nconst INPUT_WAVEFORM_LENGTH = 63;\nconst MIN_SCHEDULED_PERIOD = 10;\n\nlet localMessageCounter = 0;\nfunction getNextLocalMessageId(lastMessageId = 0) {\n  return lastMessageId + (++localMessageCounter / LOCAL_MESSAGES_LIMIT);\n}\n\nlet currentUserId!: string;\n\nexport function setMessageBuilderCurrentUserId(_currentUserId: string) {\n  currentUserId = _currentUserId;\n}\n\nexport function buildApiSponsoredMessage(mtpMessage: GramJs.SponsoredMessage): ApiSponsoredMessage | undefined {\n  const {\n    fromId, message, entities, startParam, channelPost, chatInvite, chatInviteHash, randomId, recommended, sponsorInfo,\n    additionalInfo, showPeerPhoto, webpage, buttonText, app,\n  } = mtpMessage;\n  const chatId = fromId ? getApiChatIdFromMtpPeer(fromId) : undefined;\n  const chatInviteTitle = chatInvite\n    ? (chatInvite instanceof GramJs.ChatInvite\n      ? chatInvite.title\n      : !(chatInvite.chat instanceof GramJs.ChatEmpty) ? chatInvite.chat.title : undefined)\n    : undefined;\n\n  return {\n    randomId: serializeBytes(randomId),\n    isBot: fromId ? isPeerUser(fromId) : false,\n    text: buildMessageTextContent(message, entities),\n    expiresAt: Math.round(Date.now() / 1000) + SPONSORED_MESSAGE_CACHE_MS,\n    isRecommended: Boolean(recommended),\n    ...(webpage && { webPage: buildSponsoredWebPage(webpage) }),\n    ...(showPeerPhoto && { isAvatarShown: true }),\n    ...(chatId && { chatId }),\n    ...(chatInviteHash && { chatInviteHash }),\n    ...(chatInvite && { chatInviteTitle }),\n    ...(startParam && { startParam }),\n    ...(channelPost && { channelPostId: channelPost }),\n    ...(sponsorInfo && { sponsorInfo }),\n    ...(additionalInfo && { additionalInfo }),\n    ...(buttonText && { buttonText }),\n    ...(app && { botApp: buildApiBotApp(app) }),\n  };\n}\n\nexport function buildApiMessage(mtpMessage: GramJs.TypeMessage): ApiMessage | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message || mtpMessage instanceof GramJs.MessageService)) {\n    return undefined;\n  }\n\n  return buildApiMessageWithChatId(chatId, mtpMessage);\n}\n\nexport function buildApiMessageFromShort(mtpMessage: GramJs.UpdateShortMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.userId, 'user');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(mtpMessage.out ? currentUserId : buildApiPeerId(mtpMessage.userId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromShortChat(mtpMessage: GramJs.UpdateShortChatMessage): ApiMessage {\n  const chatId = buildApiPeerId(mtpMessage.chatId, 'chat');\n\n  return buildApiMessageWithChatId(chatId, {\n    ...mtpMessage,\n    fromId: buildPeer(buildApiPeerId(mtpMessage.fromId, 'user')),\n  });\n}\n\nexport function buildApiMessageFromNotification(\n  notification: GramJs.UpdateServiceNotification,\n  currentDate: number,\n): ApiMessage {\n  const localId = getNextLocalMessageId(currentDate);\n  const content = buildMessageContent(notification);\n\n  return {\n    id: localId,\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: notification.inboxDate || currentDate,\n    content,\n    isOutgoing: false,\n  };\n}\n\nexport type UniversalMessage = (\n  Pick<GramJs.Message & GramJs.MessageService, ('id' | 'date')>\n  & Pick<Partial<GramJs.Message & GramJs.MessageService>, (\n    'out' | 'message' | 'entities' | 'fromId' | 'peerId' | 'fwdFrom' | 'replyTo' | 'replyMarkup' | 'post' |\n    'media' | 'action' | 'views' | 'editDate' | 'editHide' | 'mediaUnread' | 'groupedId' | 'mentioned' | 'viaBotId' |\n    'replies' | 'fromScheduled' | 'postAuthor' | 'noforwards' | 'reactions' | 'forwards' | 'silent' | 'pinned' |\n    'savedPeerId'\n  )>\n);\n\nexport function buildApiMessageWithChatId(\n  chatId: string,\n  mtpMessage: UniversalMessage,\n): ApiMessage {\n  const fromId = mtpMessage.fromId ? getApiChatIdFromMtpPeer(mtpMessage.fromId) : undefined;\n  const peerId = mtpMessage.peerId ? getApiChatIdFromMtpPeer(mtpMessage.peerId) : undefined;\n  const isChatWithSelf = !fromId && chatId === currentUserId;\n  const isOutgoing = (mtpMessage.out && !mtpMessage.post) || (isChatWithSelf && !mtpMessage.fwdFrom);\n  const content = buildMessageContent(mtpMessage);\n  const action = mtpMessage.action\n    && buildAction(mtpMessage.action, fromId, peerId, Boolean(mtpMessage.post), isOutgoing);\n  if (action) {\n    content.action = action;\n  }\n  const isScheduled = mtpMessage.date > getServerTime() + MIN_SCHEDULED_PERIOD;\n\n  const isInvoiceMedia = mtpMessage.media instanceof GramJs.MessageMediaInvoice\n    && Boolean(mtpMessage.media.extendedMedia);\n\n  const isEdited = Boolean(mtpMessage.editDate) && !mtpMessage.editHide;\n  const {\n    inlineButtons, keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n  } = buildReplyButtons(mtpMessage, isInvoiceMedia) || {};\n  const forwardInfo = mtpMessage.fwdFrom && buildApiMessageForwardInfo(mtpMessage.fwdFrom, isChatWithSelf);\n  const { mediaUnread: isMediaUnread, postAuthor } = mtpMessage;\n  const groupedId = mtpMessage.groupedId && String(mtpMessage.groupedId);\n  const isInAlbum = Boolean(groupedId) && !(content.document || content.audio || content.sticker);\n  const shouldHideKeyboardButtons = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide;\n  const isHideKeyboardSelective = mtpMessage.replyMarkup instanceof GramJs.ReplyKeyboardHide\n    && mtpMessage.replyMarkup.selective;\n  const isProtected = mtpMessage.noforwards || isInvoiceMedia;\n  const isForwardingAllowed = !mtpMessage.noforwards;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n  const hasComments = mtpMessage.replies?.comments;\n\n  const savedPeerId = mtpMessage.savedPeerId && getApiChatIdFromMtpPeer(mtpMessage.savedPeerId);\n\n  return omitUndefined({\n    id: mtpMessage.id,\n    chatId,\n    isOutgoing,\n    content,\n    date: mtpMessage.date,\n    senderId: fromId || (mtpMessage.out && mtpMessage.post && currentUserId) || chatId,\n    viewsCount: mtpMessage.views,\n    forwardsCount: mtpMessage.forwards,\n    isScheduled,\n    isFromScheduled: mtpMessage.fromScheduled,\n    isSilent: mtpMessage.silent,\n    isPinned: mtpMessage.pinned,\n    reactions: mtpMessage.reactions && buildMessageReactions(mtpMessage.reactions),\n    emojiOnlyCount,\n    ...(mtpMessage.replyTo && { replyInfo: buildApiReplyInfo(mtpMessage.replyTo) }),\n    forwardInfo,\n    isEdited,\n    editDate: mtpMessage.editDate,\n    isMediaUnread,\n    hasUnreadMention: mtpMessage.mentioned && isMediaUnread,\n    isMentioned: mtpMessage.mentioned,\n    ...(groupedId && {\n      groupedId,\n      isInAlbum,\n    }),\n    inlineButtons,\n    ...(keyboardButtons && {\n      keyboardButtons, keyboardPlaceholder, isKeyboardSingleUse, isKeyboardSelective,\n    }),\n    ...(shouldHideKeyboardButtons && { shouldHideKeyboardButtons, isHideKeyboardSelective }),\n    ...(mtpMessage.viaBotId && { viaBotId: buildApiPeerId(mtpMessage.viaBotId, 'user') }),\n    postAuthorTitle: postAuthor,\n    isProtected,\n    isForwardingAllowed,\n    hasComments,\n    savedPeerId,\n  } satisfies ApiMessage);\n}\n\nexport function buildMessageDraft(draft: GramJs.TypeDraftMessage): ApiDraft | undefined {\n  if (draft instanceof GramJs.DraftMessageEmpty) {\n    return undefined;\n  }\n\n  const {\n    message, entities, replyTo, date,\n  } = draft;\n\n  const replyInfo = replyTo instanceof GramJs.InputReplyToMessage ? {\n    type: 'message',\n    replyToMsgId: replyTo.replyToMsgId,\n    replyToTopId: replyTo.topMsgId,\n    replyToPeerId: replyTo.replyToPeerId && getApiChatIdFromMtpPeer(replyTo.replyToPeerId),\n    quoteText: replyTo.quoteText ? buildMessageTextContent(replyTo.quoteText, replyTo.quoteEntities) : undefined,\n  } satisfies ApiInputMessageReplyInfo : undefined;\n\n  return {\n    text: message ? buildMessageTextContent(message, entities) : undefined,\n    replyInfo,\n    date,\n  };\n}\n\nfunction buildApiMessageForwardInfo(fwdFrom: GramJs.MessageFwdHeader, isChatWithSelf = false): ApiMessageForwardInfo {\n  const savedFromPeerId = fwdFrom.savedFromPeer && getApiChatIdFromMtpPeer(fwdFrom.savedFromPeer);\n  const fromId = fwdFrom.fromId && getApiChatIdFromMtpPeer(fwdFrom.fromId);\n\n  return {\n    date: fwdFrom.date,\n    savedDate: fwdFrom.savedDate,\n    isImported: fwdFrom.imported,\n    isChannelPost: Boolean(fwdFrom.channelPost),\n    channelPostId: fwdFrom.channelPost,\n    isLinkedChannelPost: Boolean(fwdFrom.channelPost && savedFromPeerId && !isChatWithSelf),\n    savedFromPeerId,\n    fromId,\n    fromChatId: fromId || savedFromPeerId,\n    fromMessageId: fwdFrom.savedFromMsgId || fwdFrom.channelPost,\n    hiddenUserName: fwdFrom.fromName,\n    postAuthorTitle: fwdFrom.postAuthor,\n  };\n}\n\nfunction buildApiReplyInfo(replyHeader: GramJs.TypeMessageReplyHeader): ApiReplyInfo | undefined {\n  if (replyHeader instanceof GramJs.MessageReplyStoryHeader) {\n    return {\n      type: 'story',\n      userId: replyHeader.userId.toString(),\n      storyId: replyHeader.storyId,\n    };\n  }\n\n  if (replyHeader instanceof GramJs.MessageReplyHeader) {\n    const {\n      replyFrom,\n      replyToMsgId,\n      replyToTopId,\n      replyMedia,\n      replyToPeerId,\n      forumTopic,\n      quote,\n      quoteText,\n      quoteEntities,\n    } = replyHeader;\n\n    return {\n      type: 'message',\n      replyToMsgId,\n      replyToTopId,\n      isForumTopic: forumTopic,\n      replyFrom: replyFrom && buildApiMessageForwardInfo(replyFrom),\n      replyToPeerId: replyToPeerId && getApiChatIdFromMtpPeer(replyToPeerId),\n      replyMedia: replyMedia && buildMessageMediaContent(replyMedia),\n      isQuote: quote,\n      quoteText: quoteText ? buildMessageTextContent(quoteText, quoteEntities) : undefined,\n    };\n  }\n\n  return undefined;\n}\n\nfunction buildAction(\n  action: GramJs.TypeMessageAction,\n  senderId: string | undefined,\n  targetPeerId: string | undefined,\n  isChannelPost: boolean,\n  isOutgoing: boolean,\n): ApiAction | undefined {\n  if (action instanceof GramJs.MessageActionEmpty) {\n    return undefined;\n  }\n\n  let phoneCall: PhoneCallAction | undefined;\n  let call: Partial<ApiGroupCall> | undefined;\n  let amount: number | undefined;\n  let currency: string | undefined;\n  let giftCryptoInfo: {\n    currency: string;\n    amount: string;\n  } | undefined;\n  let text: string;\n  const translationValues: string[] = [];\n  let type: ApiAction['type'] = 'other';\n  let photo: ApiPhoto | undefined;\n  let score: number | undefined;\n  let months: number | undefined;\n  let topicEmojiIconId: string | undefined;\n  let isTopicAction: boolean | undefined;\n  let slug: string | undefined;\n  let isGiveaway: boolean | undefined;\n  let isUnclaimed: boolean | undefined;\n  let pluralValue: number | undefined;\n\n  const targetUserIds = 'users' in action\n    ? action.users && action.users.map((id) => buildApiPeerId(id, 'user'))\n    : ('userId' in action && [buildApiPeerId(action.userId, 'user')]) || [];\n  let targetChatId: string | undefined;\n\n  if (action instanceof GramJs.MessageActionChatCreate) {\n    text = 'Notification.CreatedChatWithTitle';\n    translationValues.push('%action_origin%', action.title);\n    type = 'chatCreate';\n  } else if (action instanceof GramJs.MessageActionChatEditTitle) {\n    if (isChannelPost) {\n      text = 'Channel.MessageTitleUpdated';\n      translationValues.push(action.title);\n    } else {\n      text = 'Notification.ChangedGroupName';\n      translationValues.push('%action_origin%', action.title);\n    }\n  } else if (action instanceof GramJs.MessageActionChatEditPhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoUpdated';\n    } else {\n      text = 'Notification.ChangedGroupPhoto';\n      translationValues.push('%action_origin%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeletePhoto) {\n    if (isChannelPost) {\n      text = 'Channel.MessagePhotoRemoved';\n    } else {\n      text = 'Group.MessagePhotoRemoved';\n    }\n  } else if (action instanceof GramJs.MessageActionChatAddUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.JoinedChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Invited';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatDeleteUser) {\n    if (!senderId || targetUserIds.includes(senderId)) {\n      text = 'Notification.LeftChat';\n      translationValues.push('%target_user%');\n    } else {\n      text = 'Notification.Kicked';\n      translationValues.push('%action_origin%', '%target_user%');\n    }\n  } else if (action instanceof GramJs.MessageActionChatJoinedByLink) {\n    text = 'Notification.JoinedGroupByLink';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionChannelCreate) {\n    text = 'Notification.CreatedChannel';\n  } else if (action instanceof GramJs.MessageActionChatMigrateTo) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated to %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionChannelMigrateFrom) {\n    targetChatId = getApiChatIdFromMtpPeer(action);\n    text = 'Migrated from %target_chat%';\n    translationValues.push('%target_chat%');\n  } else if (action instanceof GramJs.MessageActionPinMessage) {\n    text = 'Chat.Service.Group.UpdatedPinnedMessage1';\n    translationValues.push('%action_origin%', '%message%');\n  } else if (action instanceof GramJs.MessageActionHistoryClear) {\n    text = 'HistoryCleared';\n    type = 'historyClear';\n  } else if (action instanceof GramJs.MessageActionPhoneCall) {\n    const withDuration = Boolean(action.duration);\n    text = [\n      withDuration ? 'ChatList.Service' : 'Chat',\n      action.video ? 'VideoCall' : 'Call',\n      isOutgoing ? (withDuration ? 'outgoing' : 'Outgoing') : (withDuration ? 'incoming' : 'Incoming'),\n    ].join('.');\n\n    if (withDuration) {\n      const mins = Math.max(Math.round(action.duration! / 60), 1);\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    }\n\n    phoneCall = {\n      isOutgoing,\n      isVideo: action.video,\n      duration: action.duration,\n      reason: buildApiCallDiscardReason(action.reason),\n    };\n  } else if (action instanceof GramJs.MessageActionInviteToGroupCall) {\n    text = 'Notification.VoiceChatInvitation';\n    call = {\n      id: action.call.id.toString(),\n      accessHash: action.call.accessHash.toString(),\n    };\n    translationValues.push('%action_origin%', '%target_user%');\n  } else if (action instanceof GramJs.MessageActionContactSignUp) {\n    text = 'Notification.Joined';\n    translationValues.push('%action_origin%');\n    type = 'contactSignUp';\n  } else if (action instanceof GramJs.MessageActionPaymentSent) {\n    amount = Number(action.totalAmount);\n    currency = action.currency;\n    text = 'PaymentSuccessfullyPaid';\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    translationValues.push('%payment_amount%', '%target_user%', '%product%');\n  } else if (action instanceof GramJs.MessageActionGroupCall) {\n    if (action.duration) {\n      const mins = Math.max(Math.round(action.duration / 60), 1);\n      text = 'Notification.VoiceChatEnded';\n      translationValues.push(`${mins} min${mins > 1 ? 's' : ''}`);\n    } else {\n      text = 'Notification.VoiceChatStartedChannel';\n      call = {\n        id: action.call.id.toString(),\n        accessHash: action.call.accessHash.toString(),\n      };\n    }\n  } else if (action instanceof GramJs.MessageActionBotAllowed) {\n    if (action.domain) {\n      text = 'ActionBotAllowed';\n      translationValues.push(action.domain);\n    } else if (action.fromRequest) {\n      text = 'lng_action_webapp_bot_allowed';\n    } else {\n      text = 'ActionAttachMenuBotAllowed';\n    }\n  } else if (action instanceof GramJs.MessageActionCustomAction) {\n    text = action.message;\n  } else if (action instanceof GramJs.MessageActionChatJoinedByRequest) {\n    text = 'ChatService.UserJoinedGroupByRequest';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGameScore) {\n    text = senderId === currentUserId ? 'ActionYouScoredInGame' : 'ActionUserScoredInGame';\n    translationValues.push('%score%');\n    score = action.score;\n  } else if (action instanceof GramJs.MessageActionWebViewDataSent) {\n    text = 'Notification.WebAppSentData';\n    translationValues.push(action.text);\n  } else if (action instanceof GramJs.MessageActionGiftPremium) {\n    text = isOutgoing ? 'ActionGiftOutbound' : 'ActionGiftInbound';\n    if (isOutgoing) {\n      translationValues.push('%gift_payment_amount%');\n    } else {\n      translationValues.push('%action_origin%', '%gift_payment_amount%');\n    }\n    if (targetPeerId) {\n      targetUserIds.push(targetPeerId);\n    }\n    currency = action.currency;\n    if (action.cryptoCurrency) {\n      const cryptoAmountWithDecimals = action.cryptoAmount!.divide(1e7).toJSNumber() / 100;\n      giftCryptoInfo = {\n        currency: action.cryptoCurrency,\n        amount: cryptoAmountWithDecimals.toFixed(2),\n      };\n    }\n    amount = action.amount.toJSNumber();\n    months = action.months;\n  } else if (action instanceof GramJs.MessageActionTopicCreate) {\n    text = 'TopicWasCreatedAction';\n    type = 'topicCreate';\n    translationValues.push(action.title);\n  } else if (action instanceof GramJs.MessageActionTopicEdit) {\n    if (action.closed !== undefined) {\n      text = action.closed ? 'TopicWasClosedAction' : 'TopicWasReopenedAction';\n      translationValues.push('%action_origin%', '%action_topic%');\n    } else if (action.hidden !== undefined) {\n      text = action.hidden ? 'TopicHidden2' : 'TopicShown';\n    } else if (action.title) {\n      text = 'TopicRenamedTo';\n      translationValues.push('%action_origin%', action.title);\n    } else if (action.iconEmojiId) {\n      text = 'TopicWasIconChangedToAction';\n      translationValues.push('%action_origin%', '%action_topic_icon%');\n      topicEmojiIconId = action.iconEmojiId.toString();\n    } else {\n      text = 'ChatList.UnsupportedMessage';\n    }\n    isTopicAction = true;\n  } else if (action instanceof GramJs.MessageActionSuggestProfilePhoto) {\n    const isVideo = action.photo instanceof GramJs.Photo && action.photo.videoSizes?.length;\n    text = senderId === currentUserId\n      ? (isVideo ? 'ActionSuggestVideoFromYouDescription' : 'ActionSuggestPhotoFromYouDescription')\n      : (isVideo ? 'ActionSuggestVideoToYouDescription' : 'ActionSuggestPhotoToYouDescription');\n    type = 'suggestProfilePhoto';\n    translationValues.push('%target_user%');\n\n    if (targetPeerId) targetUserIds.push(targetPeerId);\n  } else if (action instanceof GramJs.MessageActionGiveawayLaunch) {\n    text = 'BoostingGiveawayJustStarted';\n    translationValues.push('%action_origin%');\n  } else if (action instanceof GramJs.MessageActionGiftCode) {\n    text = 'BoostingReceivedGiftNoName';\n    slug = action.slug;\n    months = action.months;\n    isGiveaway = Boolean(action.viaGiveaway);\n    isUnclaimed = Boolean(action.unclaimed);\n    if (action.boostPeer) {\n      targetChatId = getApiChatIdFromMtpPeer(action.boostPeer);\n    }\n  } else if (action instanceof GramJs.MessageActionGiveawayResults) {\n    if (!action.winnersCount) {\n      text = 'lng_action_giveaway_results_none';\n    } else if (action.unclaimedCount) {\n      text = 'lng_action_giveaway_results_some';\n    } else {\n      text = 'BoostingGiveawayServiceWinnersSelected';\n      translationValues.push('%amount%');\n      amount = action.winnersCount;\n      pluralValue = action.winnersCount;\n    }\n  } else {\n    text = 'ChatList.UnsupportedMessage';\n  }\n\n  if ('photo' in action && action.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(action.photo);\n    photo = buildApiPhoto(action.photo);\n  }\n\n  return {\n    text,\n    type,\n    targetUserIds,\n    targetChatId,\n    photo, // TODO Only used internally now, will be used for the UI in future\n    amount,\n    currency,\n    giftCryptoInfo,\n    isGiveaway,\n    slug,\n    translationValues,\n    call,\n    phoneCall,\n    score,\n    months,\n    topicEmojiIconId,\n    isTopicAction,\n    isUnclaimed,\n    pluralValue,\n  };\n}\n\nfunction buildReplyButtons(message: UniversalMessage, shouldSkipBuyButton?: boolean): ApiReplyKeyboard | undefined {\n  const { replyMarkup, media } = message;\n\n  if (!(replyMarkup instanceof GramJs.ReplyKeyboardMarkup || replyMarkup instanceof GramJs.ReplyInlineMarkup)) {\n    return undefined;\n  }\n\n  const markup = replyMarkup.rows.map(({ buttons }) => {\n    return buttons.map((button): ApiKeyboardButton | undefined => {\n      const { text } = button;\n\n      if (button instanceof GramJs.KeyboardButton) {\n        return {\n          type: 'command',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrl) {\n        if (button.url.includes('?startgroup=')) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'url',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonCallback) {\n        if (button.requiresPassword) {\n          return {\n            type: 'unsupported',\n            text,\n          };\n        }\n\n        return {\n          type: 'callback',\n          text,\n          data: serializeBytes(button.data),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPoll) {\n        return {\n          type: 'requestPoll',\n          text,\n          isQuiz: button.quiz,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonRequestPhone) {\n        return {\n          type: 'requestPhone',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonBuy) {\n        if (media instanceof GramJs.MessageMediaInvoice && media.receiptMsgId) {\n          return {\n            type: 'receipt',\n            text: 'PaymentReceipt',\n            receiptMessageId: media.receiptMsgId,\n          };\n        }\n        if (shouldSkipBuyButton) return undefined;\n        return {\n          type: 'buy',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonGame) {\n        return {\n          type: 'game',\n          text,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSwitchInline) {\n        return {\n          type: 'switchBotInline',\n          text,\n          query: button.query,\n          isSamePeer: button.samePeer,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUserProfile) {\n        return {\n          type: 'userProfile',\n          text,\n          userId: button.userId.toString(),\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonSimpleWebView) {\n        return {\n          type: 'simpleWebView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonWebView) {\n        return {\n          type: 'webView',\n          text,\n          url: button.url,\n        };\n      }\n\n      if (button instanceof GramJs.KeyboardButtonUrlAuth) {\n        return {\n          type: 'urlAuth',\n          text,\n          url: button.url,\n          buttonId: button.buttonId,\n        };\n      }\n\n      return {\n        type: 'unsupported',\n        text,\n      };\n    }).filter(Boolean);\n  });\n\n  if (markup.every((row) => !row.length)) return undefined;\n\n  return {\n    [replyMarkup instanceof GramJs.ReplyKeyboardMarkup ? 'keyboardButtons' : 'inlineButtons']: markup,\n    ...(replyMarkup instanceof GramJs.ReplyKeyboardMarkup && {\n      keyboardPlaceholder: replyMarkup.placeholder,\n      isKeyboardSingleUse: replyMarkup.singleUse,\n      isKeyboardSelective: replyMarkup.selective,\n    }),\n  };\n}\n\nfunction buildNewPoll(poll: ApiNewPoll, localId: number) {\n  return {\n    poll: {\n      id: String(localId),\n      summary: pick(poll.summary, ['question', 'answers']),\n      results: {},\n    },\n  };\n}\n\nexport function buildLocalMessage(\n  chat: ApiChat,\n  lastMessageId?: number,\n  text?: string,\n  entities?: ApiMessageEntity[],\n  replyInfo?: ApiInputReplyInfo,\n  attachment?: ApiAttachment,\n  sticker?: ApiSticker,\n  gif?: ApiVideo,\n  poll?: ApiNewPoll,\n  contact?: ApiContact,\n  groupedId?: string,\n  scheduledAt?: number,\n  sendAs?: ApiPeer,\n  story?: ApiStory | ApiStorySkipped,\n): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const media = attachment && buildUploadingMedia(attachment);\n  const isChannel = chat.type === 'chatTypeChannel';\n\n  const resultReplyInfo = replyInfo && buildReplyInfo(replyInfo, chat.isForum);\n\n  const message = {\n    id: localId,\n    chatId: chat.id,\n    content: {\n      ...(text && {\n        text: {\n          text,\n          entities,\n        },\n      }),\n      ...media,\n      ...(sticker && { sticker }),\n      ...(gif && { video: gif }),\n      ...(poll && buildNewPoll(poll, localId)),\n      ...(contact && { contact }),\n      ...(story && { storyData: story }),\n    },\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !isChannel,\n    senderId: sendAs?.id || currentUserId,\n    replyInfo: resultReplyInfo,\n    ...(groupedId && {\n      groupedId,\n      ...(media && (media.photo || media.video) && { isInAlbum: true }),\n    }),\n    ...(scheduledAt && { isScheduled: true }),\n    isForwardingAllowed: true,\n  } satisfies ApiMessage;\n\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(message.content, message.groupedId);\n\n  return {\n    ...message,\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n  };\n}\n\nexport function buildLocalForwardedMessage({\n  toChat,\n  toThreadId,\n  message,\n  scheduledAt,\n  noAuthors,\n  noCaptions,\n  isCurrentUserPremium,\n  lastMessageId,\n}: {\n  toChat: ApiChat;\n  toThreadId?: number;\n  message: ApiMessage;\n  scheduledAt?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n  lastMessageId?: number;\n}): ApiMessage {\n  const localId = getNextLocalMessageId(lastMessageId);\n  const {\n    content,\n    chatId: fromChatId,\n    id: fromMessageId,\n    senderId,\n    groupedId,\n    isInAlbum,\n  } = message;\n\n  const isAudio = content.audio;\n  const asIncomingInChatWithSelf = (\n    toChat.id === currentUserId && (fromChatId !== toChat.id || message.forwardInfo) && !isAudio\n  );\n  const shouldHideText = Object.keys(content).length > 1 && content.text && noCaptions;\n  const shouldDropCustomEmoji = !isCurrentUserPremium;\n  const strippedText = content.text?.entities && shouldDropCustomEmoji ? {\n    text: content.text.text,\n    entities: content.text.entities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji),\n  } : content.text;\n  const emojiOnlyCount = getEmojiOnlyCountForMessage(content, groupedId);\n\n  const updatedContent = {\n    ...content,\n    text: !shouldHideText ? strippedText : undefined,\n  };\n\n  // TODO Prepare reply info between forwarded messages locally, to prevent height jumps\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n  const replyInfo: ApiReplyInfo | undefined = toThreadId && !isToMainThread ? {\n    type: 'message',\n    replyToMsgId: toThreadId,\n    replyToTopId: toThreadId,\n    isForumTopic: toChat.isForum || undefined,\n  } : undefined;\n\n  return {\n    id: localId,\n    chatId: toChat.id,\n    content: updatedContent,\n    date: scheduledAt || Math.round(Date.now() / 1000) + getServerTimeOffset(),\n    isOutgoing: !asIncomingInChatWithSelf && toChat.type !== 'chatTypeChannel',\n    senderId: currentUserId,\n    sendingState: 'messageSendingStatePending',\n    groupedId,\n    isInAlbum,\n    isForwardingAllowed: true,\n    replyInfo,\n    ...(toThreadId && toChat?.isForum && { isTopicReply: true }),\n\n    ...(emojiOnlyCount && { emojiOnlyCount }),\n    // Forward info doesn't get added when users forwards his own messages, also when forwarding audio\n    ...(message.chatId !== currentUserId && !isAudio && !noAuthors && {\n      forwardInfo: {\n        date: message.forwardInfo?.date || message.date,\n        savedDate: message.date,\n        isChannelPost: false,\n        fromChatId,\n        fromMessageId,\n        fromId: senderId,\n        savedFromPeerId: message.chatId,\n      },\n    }),\n    ...(message.chatId === currentUserId && !noAuthors && { forwardInfo: message.forwardInfo }),\n    ...(scheduledAt && { isScheduled: true }),\n  };\n}\n\nfunction buildReplyInfo(inputInfo: ApiInputReplyInfo, isForum?: boolean): ApiReplyInfo {\n  if (inputInfo.type === 'story') {\n    return {\n      type: 'story',\n      userId: inputInfo.userId,\n      storyId: inputInfo.storyId,\n    };\n  }\n\n  return {\n    type: 'message',\n    replyToMsgId: inputInfo.replyToMsgId,\n    replyToTopId: inputInfo.replyToTopId,\n    replyToPeerId: inputInfo.replyToPeerId,\n    quoteText: inputInfo.quoteText,\n    isForumTopic: isForum && inputInfo.replyToTopId ? true : undefined,\n    ...(Boolean(inputInfo.quoteText) && { isQuote: true }),\n  };\n}\n\nfunction buildUploadingMedia(\n  attachment: ApiAttachment,\n): MediaContent {\n  const {\n    filename: fileName,\n    blobUrl,\n    previewBlobUrl,\n    mimeType,\n    size,\n    audio,\n    shouldSendAsFile,\n    shouldSendAsSpoiler,\n  } = attachment;\n\n  if (!shouldSendAsFile) {\n    if (attachment.quick) {\n      // TODO Handle GIF as video, but support playback in <video>\n      if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n        const { width, height } = attachment.quick;\n        return {\n          photo: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            sizes: [],\n            thumbnail: { width, height, dataUri: previewBlobUrl || blobUrl },\n            blobUrl,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n      if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n        const { width, height, duration } = attachment.quick;\n        return {\n          video: {\n            id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n            mimeType,\n            duration: duration || 0,\n            fileName,\n            width,\n            height,\n            blobUrl,\n            ...(previewBlobUrl && { thumbnail: { width, height, dataUri: previewBlobUrl } }),\n            size,\n            isSpoiler: shouldSendAsSpoiler,\n          },\n        };\n      }\n    }\n    if (attachment.voice) {\n      const { duration, waveform } = attachment.voice;\n      const { data: inputWaveform } = interpolateArray(waveform, INPUT_WAVEFORM_LENGTH);\n      return {\n        voice: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          duration,\n          waveform: inputWaveform,\n        },\n      };\n    }\n    if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n      const { duration, performer, title } = audio || {};\n      return {\n        audio: {\n          id: LOCAL_MEDIA_UPLOADING_TEMP_ID,\n          mimeType,\n          fileName,\n          size,\n          duration: duration || 0,\n          title,\n          performer,\n        },\n      };\n    }\n  }\n  return {\n    document: {\n      mimeType,\n      fileName,\n      size,\n      ...(previewBlobUrl && { previewBlobUrl }),\n    },\n  };\n}\n\nexport function buildApiThreadInfoFromMessage(\n  mtpMessage: GramJs.TypeMessage,\n): ApiThreadInfo | undefined {\n  const chatId = resolveMessageApiChatId(mtpMessage);\n  if (\n    !chatId\n    || !(mtpMessage instanceof GramJs.Message)\n    || !mtpMessage.replies) {\n    return undefined;\n  }\n\n  return buildApiThreadInfo(mtpMessage.replies, mtpMessage.id, chatId);\n}\n\nexport function buildApiThreadInfo(\n  messageReplies: GramJs.TypeMessageReplies, messageId: number, chatId: string,\n): ApiThreadInfo | undefined {\n  const {\n    channelId, replies, maxId, readMaxId, recentRepliers, comments,\n  } = messageReplies;\n\n  const apiChannelId = channelId ? buildApiPeerId(channelId, 'channel') : undefined;\n  if (apiChannelId === DELETED_COMMENTS_CHANNEL_ID) {\n    return undefined;\n  }\n\n  const baseThreadInfo = {\n    messagesCount: replies,\n    ...(maxId && { lastMessageId: maxId }),\n    ...(readMaxId && { lastReadMessageId: readMaxId }),\n    ...(recentRepliers && { recentReplierIds: recentRepliers.map(getApiChatIdFromMtpPeer) }),\n  };\n\n  if (comments) {\n    return {\n      ...baseThreadInfo,\n      isCommentsInfo: true,\n      chatId: apiChannelId!,\n      originChannelId: chatId,\n      originMessageId: messageId,\n    };\n  }\n\n  return {\n    ...baseThreadInfo,\n    isCommentsInfo: false,\n    chatId,\n    threadId: messageId,\n  };\n}\n\nfunction buildSponsoredWebPage(webPage: GramJs.TypeSponsoredWebPage): ApiSponsoredWebPage {\n  let photo: ApiPhoto | undefined;\n  if (webPage.photo instanceof GramJs.Photo) {\n    addPhotoToLocalDb(webPage.photo);\n    photo = buildApiPhoto(webPage.photo);\n  }\n\n  return {\n    ...pick(webPage, [\n      'url',\n      'siteName',\n    ]),\n    photo,\n  };\n}\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { buildLocalMessage } from '../../../api/gramjs/apiBuilders/messages';\nimport { isChatChannel, isLocalMessageId } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  deleteChatMessages,\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        actions.fetchChannelRecommendations({ chatId: chat.id });\n        const lastMessageId = selectChatLastMessageId(global, chat.id);\n        const localMessage = buildLocalMessage(chat, lastMessageId);\n        localMessage.content.action = {\n          text: 'you joined this channel',\n          translationValues: ['ChannelJoined'],\n          type: 'joinedChannel',\n          targetChatId: chat.id,\n        };\n\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: localMessage.id,\n          chatId: chat.id,\n          message: localMessage,\n        });\n      }\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n        global = deleteChatMessages(global, chat.id, localMessageIds);\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments || (message.content.text && !currentAlbum.mainMessage.hasComments)) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getPeerIdDividend } from '../../global/helpers';\nimport { selectChat, selectChatLastMessage, selectCurrentMessageList } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getPeerIdDividend(userId) + getPeerIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      sticker,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\",\"image\":\"ZAL3vluMFRM8wd30wuzL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useDevicePixelRatio from '../../hooks/window/useDevicePixelRatio';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n  const dpr = useDevicePixelRatio();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / dpr,\n    height: botInfoDimensions.height / dpr,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.image}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SP9ygrz63JLi4xNqwoVE\",\"title\":\"Sw5A_K0ZxEX96Ui9lFCb\",\"sticker\":\"pukATZ25wuRwIprQiql9\",\"resultSticker\":\"H2SUn_dQhJ_DlaoIRrLs\",\"count\":\"SgtGraFRcPrLtRnxw3gt\",\"section\":\"phMVInVgl42PoTFQfGqI\",\"description\":\"Vb0eOjCRZWXBFSaUyvx2\",\"peers\":\"amBRnJ97D6pMr6DVxU_m\",\"peer\":\"uJ9T4Pwgeb_rBIAXBpse\",\"button\":\"NFt5nDqi5BykWcvrsjtU\",\"result\":\"N2jtQkeZxTtGOaLu2wBy\",\"separator\":\"_fU0EBXwmoeXiyoCMPCg\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isApiPeerChat, isOwnMessage,\n} from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <div className={styles.separator}>{lang('BoostingGiveawayMsgWithDivider')}</div>\n            </>\n          )}\n          <p className={styles.description}>\n            {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n            <br />\n            {renderText(lang(\n              'ActionGiftPremiumSubtitle',\n              lang('Chat.Giveaway.Info.Months', months),\n            ), ['simple_markdown'])}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIcon\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiReactionCount,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageKey, isReactionChosen, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../ui/Button';\n\nimport './Reactions.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  withRecentReactors?: boolean;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  withRecentReactors,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as ApiPeer[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen', 'message-reaction')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className=\"reaction-animated-emoji\"\n        containerId={getMessageKey(message)}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport safePlay from '../../../util/safePlay';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\n\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useSignal from '../../../hooks/useSignal';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageKey,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/Icon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n  const hasText = hasMessageText(message);\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasText ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { userId: storyReplyUserId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location?.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyUserId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded, Boolean(focusedQuote),\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf || (isOwn && !hasTtl)) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            backgroundEmojiId={sender?.color?.backgroundEmojiId}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { userId: storyReplyUserId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage)\n      : forwardHeader && !isRepliesChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && !isAnonymousForwards && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyUserId\n      ? selectPeerStory(global, storyReplyUserId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyUserId ? selectUser(global, storyReplyUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer, quote: focusedQuote,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.mainMessage.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: ThreadId,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId,\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { MouseEvent as ReactMouseEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiSponsoredMessage, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  peer?: ApiChat;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  peer,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    requestAppWebView,\n    startBot,\n    focusMessage,\n    openUrl,\n    openPremiumModal,\n    clickSponsoredMessage,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n  const withAvatar = Boolean(message?.isAvatarShown && peer);\n  const isBotApp = Boolean(message?.botApp);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!peer) {\n      return;\n    }\n\n    openChat({ id: peer.id });\n  });\n\n  const handleLinkClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.webPage!.url, shouldSkipModal: true });\n\n    return false;\n  });\n\n  const handleCloseSponsoredMessage = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n\n    if (isBotApp) {\n      const { shortName } = message.botApp!;\n      const theme = extractCurrentThemeParams();\n\n      requestAppWebView({\n        botId: message.chatId!,\n        appName: shortName,\n        startApp: message.startParam,\n        theme,\n      });\n    } else if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderAvatar() {\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={peer}\n        onClick={peer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderPhoto() {\n    if (message?.botApp) {\n      if (!message.botApp.photo) return undefined;\n\n      return (\n        <Avatar\n          size=\"large\"\n          peer={bot}\n          photo={message.botApp.photo}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    if (channel) {\n      return (\n        <Avatar\n          size=\"large\"\n          peer={channel}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderContent() {\n    if (message?.webPage) {\n      return (\n        <>\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <div className=\"message-title message-peer\" dir=\"ltr\">\n              {renderText(message.webPage.siteName)}\n            </div>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message!.text.text,\n                entities: message!.text.entities,\n              })}\n            </span>\n          </div>\n\n          <Button\n            className=\"SponsoredMessage__button\"\n            size=\"tiny\"\n            color=\"translucent\"\n            isRectangular\n            onClick={handleLinkClick}\n          >\n            <i className=\"icon icon-arrow-right\" aria-hidden />\n            {lang('OpenLink')}\n          </Button>\n        </>\n      );\n    }\n\n    const buttonText = message?.buttonText ?? (\n      isBotApp\n        ? lang('BotWebAppInstantViewOpen')\n        : (message!.isBot\n          ? lang('Conversation.ViewBot')\n          : lang(message!.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel')\n        ));\n    const title = isBotApp\n      ? message!.botApp!.title\n      : (bot\n        ? renderText(getUserFullName(bot) || '')\n        : (channel ? renderText(message!.chatInviteTitle || getChatTitle(lang, channel) || '') : '')\n      );\n\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  const contentClassName = buildClassName(\n    'message-content has-shadow has-solid-background has-appendix',\n    getPeerColorClass(bot || peer || channel),\n  );\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className={buildClassName('SponsoredMessage Message open', withAvatar && 'with-avatar')}\n    >\n      {withAvatar && renderAvatar()}\n      <div\n        className={contentClassName}\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <div className=\"content-inner\" dir=\"auto\">\n          {renderPhoto()}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n          </span>\n          {renderContent()}\n        </div>\n        <MessageAppendix />\n        <Button\n          className=\"message-action-button\"\n          color=\"translucent-white\"\n          round\n          size=\"tiny\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseSponsoredMessage}\n        >\n          <i className=\"icon icon-close\" aria-hidden />\n        </Button>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const peer = message?.chatId ? selectChat(global, message?.chatId) : undefined;\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      peer,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isLocalMessageId,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  getForceNextPinnedInHeader,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isSynced, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions?.results.length);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat || isAnonymousForwards);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getMessageKey,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActions(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isMessageThread);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n    const topMessageId = isCommentThread ? Number(threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"draggable\":\"kIdhoMn_mbGnJc1YZpIK\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n  similarChannels?: string[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ox1yTGx4NBVANs7q4Ste\",\"wrapper\":\"g34egFNlUSZiOR5Y9K9A\",\"media\":\"gyVqf8gGVz_cu2HCjifT\",\"expiredIcon\":\"eg5740UDe7iAc7dGlyex\",\"contextMenu\":\"rhvyma7da0HVZh3rYFnr\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, getIsSavedDialog, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerPinnedStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    fetchChannelRecommendations,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : (resolvedUserId || chatId);\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasStoriesTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels) {\n      fetchChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerPinnedStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    archiveStoryIds,\n    similarChannels,\n  );\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, threadId]);\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog;\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZtWHQyTLrCmeNE53Hvd9\",\"noResults\":\"cuYFx3gorhlWaUcBJ0Aj\",\"section-header\":\"IPPwOeRGhyQDYbJsBsdb\",\"sectionHeader\":\"IPPwOeRGhyQDYbJsBsdb\",\"section\":\"HMySq6RoeqoKdRuUAW7z\",\"user\":\"hben8jCvRhcyebFweulH\",\"stats\":\"dBHHnaU4CZ9TELAykZyA\",\"down\":\"nlFBjRF9YGIjCHGrt2cp\",\"loadMoreSpinner\":\"QBMARpR7dewZog5QmOkh\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoostStatistics } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dateFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n}: StateProps) => {\n  const { openChat, loadMoreBoosters, closeBoostStatistics } = getActions();\n  const lang = useLang();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics?.count) return undefined;\n    const loadedCount = boostStatistics.boosterIds?.length || 0;\n    const totalCount = boostStatistics.count;\n    return totalCount - loadedCount;\n  }, [boostStatistics]);\n\n  const handleBoosterClick = useLastCallback((userId: string) => {\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreBoosters();\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={boosts.toString()}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          <div className={styles.section}>\n            <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('Boosters')}\n            </h4>\n            {!boostStatistics.boosterIds?.length && (\n              <div className={styles.noResults}>{lang('NoBoostersHint')}</div>\n            )}\n            {boostStatistics.boosterIds?.map((userId) => (\n              <ListItem\n                key={userId}\n                className=\"chat-item-clickable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleBoosterClick(userId)}\n              >\n                <PrivateChatInfo\n                  className={styles.user}\n                  forceShowSelf\n                  userId={userId}\n                  status={lang('BoostExpireOn', formatDateAtTime(lang, boostStatistics.boosters![userId] * 1000))}\n                />\n              </ListItem>\n            ))}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount)}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n\n    return {\n      boostStatistics,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat } from '../../global/selectors';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { userIds, chatId } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !(userIds && chatId));\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useTimeout from '../../hooks/useTimeout';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from '../modals/boost/BoostModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport GiftCodeModal from '../modals/giftcode/GiftCodeModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport OneTimeMediaModal from '../modals/oneTimeMedia/OneTimeMediaModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport InviteViaLinkModal from './InviteViaLinkModal.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  boostModal?: TabState['boostModal'];\n  giftCodeModal?: TabState['giftCodeModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  inviteViaLinkModal?: TabState['inviteViaLinkModal'];\n  oneTimeMediaModal?: TabState['oneTimeMediaModal'];\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  giftCodeModal,\n  boostModal,\n  noRightColumnAnimation,\n  isSynced,\n  inviteViaLinkModal,\n  oneTimeMediaModal,\n  currentUserId,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadPremiumSetStickers,\n    loadAuthorizations,\n    loadPeerColors,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <BoostModal info={boostModal} />\n      <GiftCodeModal modal={giftCodeModal} />\n      <OneTimeMediaModal info={oneTimeMediaModal} />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <InviteViaLinkModal userIds={inviteViaLinkModal?.restrictedUserIds} chatId={inviteViaLinkModal?.chatId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      inviteViaLinkModal,\n      oneTimeMediaModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      inviteViaLinkModal,\n      oneTimeMediaModal,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","const { constructors } = require('./tl');\n\n// eslint-disable-next-line max-len\nconst JPEG_HEADER = Buffer.from('ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00', 'hex');\nconst JPEG_FOOTER = Buffer.from('ffd9', 'hex');\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _raiseCastFail(entity, target) {\n    throw new Error(`Cannot cast ${entity.className} to any kind of ${target}`);\n}\n\n/**\n Gets the input peer for the given \"entity\" (user, chat or channel).\n\n A ``TypeError`` is raised if the given entity isn't a supported type\n or if ``check_hash is True`` but the entity's ``accessHash is None``\n *or* the entity contains ``min`` information. In this case, the hash\n cannot be used for general purposes, and thus is not returned to avoid\n any issues which can derive from invalid access hashes.\n\n Note that ``check_hash`` **is ignored** if an input peer is already\n passed since in that case we assume the user knows what they're doing.\n This is key to getting entities by explicitly passing ``hash = 0``.\n\n * @param entity\n * @param allowSelf\n * @param checkHash\n */\nfunction getInputPeer(entity, allowSelf = true, checkHash = true) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        // e.g. custom.Dialog (can't cyclic import).\n\n        if (allowSelf && 'inputEntity' in entity) {\n            return entity.inputEntity;\n        } else if ('entity' in entity) {\n            return getInputPeer(entity.entity);\n        } else {\n            _raiseCastFail(entity, 'InputPeer');\n        }\n    }\n    if (entity.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n        return entity;\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf && allowSelf) {\n            return new constructors.InputPeerSelf();\n        } else if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerUser({\n                userId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new Error('User without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.Chat || entity instanceof constructors.ChatEmpty\n        || entity instanceof constructors.ChatForbidden) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n    if (entity instanceof constructors.Channel) {\n        if (entity.accessHash !== undefined || !checkHash) {\n            return new constructors.InputPeerChannel({\n                channelId: entity.id,\n                accessHash: entity.accessHash,\n            });\n        } else {\n            throw new TypeError('Channel without accessHash or min info cannot be input');\n        }\n    }\n    if (entity instanceof constructors.ChannelForbidden) {\n        // \"channelForbidden are never min\", and since their hash is\n        // also not optional, we assume that this truly is the case.\n        return new constructors.InputPeerChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash,\n        });\n    }\n\n    if (entity instanceof constructors.InputUser) {\n        return new constructors.InputPeerUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.InputChannel) {\n        return new constructors.InputPeerChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash,\n        });\n    }\n    if (entity instanceof constructors.UserEmpty) {\n        return new constructors.InputPeerEmpty();\n    }\n    if (entity instanceof constructors.UserFull) {\n        return getInputPeer(entity.user);\n    }\n\n    if (entity instanceof constructors.ChatFull) {\n        return new constructors.InputPeerChat({ chatId: entity.id });\n    }\n\n    if (entity instanceof constructors.PeerChat) {\n        return new constructors.InputPeerChat(entity.chatId);\n    }\n\n    _raiseCastFail(entity, 'InputPeer');\n    return undefined;\n}\n\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputChannel`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n * @returns {InputChannel|*}\n */\n/* CONTEST\nfunction getInputChannel(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputChannel')\n    }\n\n    if (entity.SUBCLASS_OF_ID === 0x40f202fd) { // crc32(b'InputChannel')\n        return entity\n    }\n    if (entity instanceof constructors.Channel || entity instanceof constructors.ChannelForbidden) {\n        return new constructors.InputChannel({\n            channelId: entity.id,\n            accessHash: entity.accessHash || 0\n        })\n    }\n\n    if (entity instanceof constructors.InputPeerChannel) {\n        return new constructors.InputChannel({\n            channelId: entity.channelId,\n            accessHash: entity.accessHash\n        })\n    }\n    _raiseCastFail(entity, 'InputChannel')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for :tl:`InputUser`'s alone.\n\n .. important::\n\n This method does not validate for invalid general-purpose access\n hashes, unlike `get_input_peer`. Consider using instead:\n ``get_input_channel(get_input_peer(channel))``.\n\n * @param entity\n */\n/* CONTEST\nfunction getInputUser(entity) {\n    if (entity.SUBCLASS_OF_ID === undefined) {\n        _raiseCastFail(entity, 'InputUser')\n    }\n    if (entity.SUBCLASS_OF_ID === 0xe669bf46) { // crc32(b'InputUser')\n        return entity\n    }\n\n    if (entity instanceof constructors.User) {\n        if (entity.isSelf) {\n            return new constructors.InputPeerSelf()\n        } else {\n            return new constructors.InputUser({\n                userId: entity.id,\n                accessHash: entity.accessHash || 0,\n            })\n        }\n    }\n    if (entity instanceof constructors.InputPeerSelf) {\n        return new constructors.InputPeerSelf()\n    }\n    if (entity instanceof constructors.UserEmpty || entity instanceof constructors.InputPeerEmpty) {\n        return new constructors.InputUserEmpty()\n    }\n\n    if (entity instanceof constructors.UserFull) {\n        return getInputUser(entity.user)\n    }\n\n    if (entity instanceof constructors.InputPeerUser) {\n        return new constructors.InputUser({\n            userId: entity.userId,\n            accessHash: entity.accessHash\n        })\n    }\n\n    _raiseCastFail(entity, 'InputUser')\n}\n*/\n/**\n Similar to :meth:`get_input_peer`, but for dialogs\n * @param dialog\n */\n/* CONTEST\nfunction getInputDialog(dialog) {\n    try {\n        if (dialog.SUBCLASS_OF_ID === 0xa21c9795) { // crc32(b'InputDialogPeer')\n            return dialog\n        }\n        if (dialog.SUBCLASS_OF_ID === 0xc91c90b6) { // crc32(b'InputPeer')\n            return new constructors.InputDialogPeer({ peer: dialog })\n        }\n    } catch (e) {\n        _raiseCastFail(dialog, 'InputDialogPeer')\n    }\n\n    try {\n        return new constructors.InputDialogPeer(getInputPeer(dialog))\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n\n    }\n    _raiseCastFail(dialog, 'InputDialogPeer')\n}\n*/\n\n/* CONTEST\n\nfunction getInputMessage(message) {\n    try {\n        if (typeof message == 'number') { // This case is really common too\n            return new constructors.InputMessageID({\n                id: message,\n            })\n        } else if (message.SUBCLASS_OF_ID === 0x54b6bcc5) { // crc32(b'InputMessage')\n            return message\n        } else if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n            return new constructors.InputMessageID(message.id)\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n    }\n\n    _raiseCastFail(message, 'InputMessage')\n}\n*/\n\n/**\n * Adds the JPG header and footer to a stripped image.\n * Ported from https://github.com/telegramdesktop/\n * tdesktop/blob/bec39d89e19670eb436dc794a8f20b657cb87c71/Telegram/SourceFiles/ui/image/image.cpp#L225\n\n * @param stripped{Buffer}\n * @returns {Buffer}\n */\nfunction strippedPhotoToJpg(stripped) {\n    // Note: Changes here should update _stripped_real_length\n    if (stripped.length < 3 || stripped[0] !== 1) {\n        return stripped;\n    }\n    const header = Buffer.from(JPEG_HEADER);\n    // eslint-disable-next-line prefer-destructuring\n    header[164] = stripped[1];\n    // eslint-disable-next-line prefer-destructuring\n    header[166] = stripped[2];\n    return Buffer.concat([header, stripped.slice(3), JPEG_FOOTER]);\n}\n\n/* CONTEST\nfunction getInputLocation(location) {\n    try {\n        if (!location.SUBCLASS_OF_ID) {\n            throw new Error()\n        }\n        if (location.SUBCLASS_OF_ID === 0x1523d462) {\n            return {\n                dcId: null,\n                inputLocation: location\n            }\n        }\n    } catch (e) {\n        _raiseCastFail(location, 'InputFileLocation')\n    }\n    if (location instanceof constructors.Message) {\n        location = location.media\n    }\n\n    if (location instanceof constructors.MessageMediaDocument) {\n        location = location.document\n    } else if (location instanceof constructors.MessageMediaPhoto) {\n        location = location.photo\n    }\n\n    if (location instanceof constructors.Document) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputDocumentFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: '', // Presumably to download one of its thumbnails\n            }),\n        }\n    } else if (location instanceof constructors.Photo) {\n        return {\n            dcId: location.dcId,\n            inputLocation: new constructors.InputPhotoFileLocation({\n                id: location.id,\n                accessHash: location.accessHash,\n                fileReference: location.fileReference,\n                thumbSize: location.sizes[location.sizes.length - 1].type,\n            }),\n        }\n    }\n\n    if (location instanceof constructors.FileLocationToBeDeprecated) {\n        throw new Error('Unavailable location cannot be used as input')\n    }\n    _raiseCastFail(location, 'InputFileLocation')\n}\n*/\n\n/**\n * Gets the appropriated part size when downloading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getDownloadPartSize(fileSize) {\n    if (fileSize <= 65536) { // 64KB\n        return 64;\n    }\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 1024;\n    }\n\n    throw new Error('File size too large');\n}\n\n/**\n * Gets the appropriated part size when uploading files,\n * given an initial file size.\n * @param fileSize\n * @returns {Number}\n */\nfunction getUploadPartSize(fileSize) {\n    if (fileSize <= 104857600) { // 100MB\n        return 128;\n    }\n    if (fileSize <= 786432000) { // 750MB\n        return 256;\n    }\n    if (fileSize <= 2097152000) { // 2000MB\n        return 512;\n    }\n    if (fileSize <= 4194304000) { // 4000MB\n        return 512;\n    }\n\n    throw new Error('File size too large');\n}\n\n/* CONTEST\nfunction getPeer(peer) {\n    try {\n        if (typeof peer === 'number') {\n            const res = resolveId(peer)\n\n            if (res[1] === constructors.PeerChannel) {\n                return new res[1]({ channelId: res[0] })\n            } else if (res[1] === constructors.PeerChat) {\n                return new res[1]({ chatId: res[0] })\n            } else {\n                return new res[1]({ userId: res[0] })\n            }\n        }\n        if (peer.SUBCLASS_OF_ID === undefined) {\n            throw new Error()\n        }\n        if (peer.SUBCLASS_OF_ID === 0x2d45687) {\n            return peer\n        } else if (peer instanceof constructors.contacts.ResolvedPeer ||\n            peer instanceof constructors.InputNotifyPeer || peer instanceof constructors.TopPeer ||\n            peer instanceof constructors.Dialog || peer instanceof constructors.DialogPeer) {\n            return peer.peer\n        } else if (peer instanceof constructors.ChannelFull) {\n            return new constructors.PeerChannel({ channelId: peer.id })\n        }\n        if (peer.SUBCLASS_OF_ID === 0x7d7c6f86 || peer.SUBCLASS_OF_ID === 0xd9c7fc18) {\n            // ChatParticipant, ChannelParticipant\n            return new constructors.PeerUser({ userId: peer.userId })\n        }\n        peer = getInputPeer(peer, false, false)\n\n        if (peer instanceof constructors.InputPeerUser) {\n            return new constructors.PeerUser({ userId: peer.userId })\n        } else if (peer instanceof constructors.InputPeerChat) {\n            return new constructors.PeerChat({ chatId: peer.chatId })\n        } else if (peer instanceof constructors.InputPeerChannel) {\n            return new constructors.PeerChannel({ channelId: peer.channelId })\n        }\n        // eslint-disable-next-line no-empty\n    } catch (e) {\n        console.log(e)\n    }\n    _raiseCastFail(peer, 'peer')\n}\n*/\n\n/**\n Convert the given peer into its marked ID by default.\n\n This \"mark\" comes from the \"bot api\" format, and with it the peer type\n can be identified back. User ID is left unmodified, chat ID is negated,\n and channel ID is prefixed with -100:\n\n * ``userId``\n * ``-chatId``\n * ``-100channel_id``\n\n The original ID and the peer type class can be returned with\n a call to :meth:`resolve_id(marked_id)`.\n * @param peer\n * @param addMark\n */\n/* CONTEST\nfunction getPeerId(peer, addMark = true) {\n    // First we assert it's a Peer TLObject, or early return for integers\n    if (typeof peer == 'number') {\n        return addMark ? peer : resolveId(peer)[0]\n    }\n\n    // Tell the user to use their client to resolve InputPeerSelf if we got one\n    if (peer instanceof constructors.InputPeerSelf) {\n        _raiseCastFail(peer, 'int (you might want to use client.get_peer_id)')\n    }\n\n    try {\n        peer = getPeer(peer)\n    } catch (e) {\n        _raiseCastFail(peer, 'int')\n    }\n    if (peer instanceof constructors.PeerUser) {\n        return peer.userId\n    } else if (peer instanceof constructors.PeerChat) {\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.chatId <= 0x7fffffff)) {\n            peer.chatId = resolveId(peer.chatId)[0]\n        }\n\n        return addMark ? -(peer.chatId) : peer.chatId\n    } else { // if (peer instanceof constructors.PeerChannel)\n        // Check in case the user mixed things up to avoid blowing up\n        if (!(0 < peer.channelId <= 0x7fffffff)) {\n            peer.channelId = resolveId(peer.channelId)[0]\n        }\n        if (!addMark) {\n            return peer.channelId\n        }\n        // Concat -100 through math tricks, .to_supergroup() on\n        // Madeline IDs will be strictly positive -> log works.\n        try {\n            return -(peer.channelId + Math.pow(10, Math.floor(Math.log10(peer.channelId) + 3)))\n        } catch (e) {\n            throw new Error('Cannot get marked ID of a channel unless its ID is strictly positive')\n        }\n    }\n}\n*/\n/**\n * Given a marked ID, returns the original ID and its :tl:`Peer` type.\n * @param markedId\n */\n/* CONTEST\nfunction resolveId(markedId) {\n    if (markedId >= 0) {\n        return [markedId, constructors.PeerUser]\n    }\n\n    // There have been report of chat IDs being 10000xyz, which means their\n    // marked version is -10000xyz, which in turn looks like a channel but\n    // it becomes 00xyz (= xyz). Hence, we must assert that there are only\n    // two zeroes.\n    const m = markedId.toString()\n        .match(/-100([^0]\\d*)/)\n    if (m) {\n        return [parseInt(m[1]), constructors.PeerChannel]\n    }\n    return [-markedId, constructors.PeerChat]\n}\n*/\n\n/**\n * returns an entity pair\n * @param entityId\n * @param entities\n * @param cache\n * @param getInputPeer\n * @returns {{inputEntity: *, entity: *}}\n * @private\n */\n\n/* CONTEST\n\nfunction _getEntityPair(entityId, entities, cache, getInputPeer = getInputPeer) {\n    const entity = entities.get(entityId)\n    let inputEntity = cache[entityId]\n    if (inputEntity === undefined) {\n        try {\n            inputEntity = getInputPeer(inputEntity)\n        } catch (e) {\n            inputEntity = null\n        }\n    }\n    return {\n        entity,\n        inputEntity\n    }\n}\n*/\n\nfunction getMessageId(message) {\n    if (message === undefined) {\n        return undefined;\n    }\n    if (typeof message === 'number') {\n        return message;\n    }\n    if (message.SUBCLASS_OF_ID === 0x790009e3) { // crc32(b'Message')\n        return message.id;\n    }\n    throw new Error(`Invalid message type: ${message.constructor.name}`);\n}\n\n/**\n Parses the given username or channel access hash, given\n a string, username or URL. Returns a tuple consisting of\n both the stripped, lowercase username and whether it is\n a joinchat/ hash (in which case is not lowercase'd).\n\n Returns ``(None, False)`` if the ``username`` or link is not valid.\n\n * @param username {string}\n */\n\n/* CONTEST\n\nfunction parseUsername(username) {\n    username = username.trim()\n    const m = username.match(USERNAME_RE) || username.match(TG_JOIN_RE)\n    if (m) {\n        username = username.replace(m[0], '')\n        if (m[1]) {\n            return {\n                username: username,\n                isInvite: true\n            }\n        } else {\n            username = rtrim(username, '/')\n        }\n    }\n    if (username.match(VALID_USERNAME_RE)) {\n        return {\n            username: username.toLowerCase(),\n            isInvite: false\n        }\n    } else {\n        return {\n            username: null,\n            isInvite: false\n        }\n    }\n}\n\nfunction rtrim(s, mask) {\n    while (~mask.indexOf(s[s.length - 1])) {\n        s = s.slice(0, -1)\n    }\n    return s\n}\n\n */\n\n/**\n * Gets the display name for the given :tl:`User`,\n :tl:`Chat` or :tl:`Channel`. Returns an empty string otherwise\n * @param entity\n */\nfunction getDisplayName(entity) {\n    if (entity instanceof constructors.User) {\n        if (entity.lastName && entity.firstName) {\n            return `${entity.firstName} ${entity.lastName}`;\n        } else if (entity.firstName) {\n            return entity.firstName;\n        } else if (entity.lastName) {\n            return entity.lastName;\n        } else {\n            return '';\n        }\n    } else if (entity instanceof constructors.Chat || entity instanceof constructors.Channel) {\n        return entity.title;\n    }\n    return '';\n}\n\n/**\n * check if a given item is an array like or not\n * @param item\n * @returns {boolean}\n */\n\n/* CONTEST\nDuplicate ?\nfunction isListLike(item) {\n    return (\n        Array.isArray(item) ||\n        (Boolean(item) &&\n            typeof item === 'object' &&\n            typeof (item.length) === 'number' &&\n            (item.length === 0 ||\n                (item.length > 0 &&\n                    (item.length - 1) in item)\n            )\n        )\n    )\n}\n*/\n/**\n * Returns the appropriate DC based on the id\n * @param dcId the id of the DC.\n * @param downloadDC whether to use -1 DCs or not\n * (These only support downloading/uploading and not creating a new AUTH key)\n * @return {{port: number, ipAddress: string, id: number}}\n */\nfunction getDC(dcId, downloadDC = false) {\n    // TODO Move to external config\n    switch (dcId) {\n        case 1:\n            return {\n                id: 1,\n                ipAddress: `zws1${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 2:\n            return {\n                id: 2,\n                ipAddress: `zws2${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 3:\n            return {\n                id: 3,\n                ipAddress: `zws3${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 4:\n            return {\n                id: 4,\n                ipAddress: `zws4${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        case 5:\n            return {\n                id: 5,\n                ipAddress: `zws5${downloadDC ? '-1' : ''}.web.telegram.org`,\n                port: 443,\n            };\n        default:\n            throw new Error(`Cannot find the DC with the ID of ${dcId}`);\n    }\n    // TODO chose based on current connection method\n    /*\n    if (!this._config) {\n        this._config = await this.invoke(new requests.help.GetConfig())\n    }\n    if (cdn && !this._cdnConfig) {\n        this._cdnConfig = await this.invoke(new requests.help.GetCdnConfig())\n        for (const pk of this._cdnConfig.publicKeys) {\n            addKey(pk.publicKey)\n        }\n    }\n    for (const DC of this._config.dcOptions) {\n        if (DC.id === dcId && Boolean(DC.ipv6) === this._useIPV6 && Boolean(DC.cdn) === cdn) {\n            return DC\n        }\n    } */\n}\n\nmodule.exports = {\n    getMessageId,\n    // _getEntityPair,\n    // getInputMessage,\n    // getInputDialog,\n    // getInputUser,\n    // getInputChannel,\n    getInputPeer,\n    // parsePhone,\n    // parseUsername,\n    // getPeer,\n    // getPeerId,\n    getDisplayName,\n    // resolveId,\n    // isListLike,\n    getDownloadPartSize,\n    getUploadPartSize,\n    // getInputLocation,\n    strippedPhotoToJpg,\n    getDC,\n};\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","tabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","topics","deleteTopic","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","selectIsChatWithSelf","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","users","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","set","IS_IOS","rafPromise","delete","payload","shouldForceRender","onError","isRestricted","viewportIds","isLocalMessageId","Boolean","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","draftReplyInfo","userId","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userFullName","getUserFullName","showNotification","translate","join","messageListType","selectEditingMessage","setEditingId","getMessageOriginalId","cancelApiProgress","apiUpdate","currentDraft","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","isUnread","minId","readCount","count","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","isDeepLink","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","selectForwardsCanBeSentToChat","isModalShown","openThread","closeMediaViewer","exitMessageSelectMode","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","Array","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","messageLink","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","link","tryParseDeepLink","localChat","selectChatByUsername","getChatGroupOrChannelMessage","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","isChatGroup","localMessage","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","accountChats","accountUsers","globalChats","globalUsers","localResults","chatIds","globalResults","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","currentChat","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","botFatherId","gameePopups","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","Checkout","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","isFromConfirm","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","closeReactionPicker","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostsListResult","boostStatusResult","boosters","boosterIds","isLoadingBoosters","slots","newStatusResult","giftCodeModal","info","requestConfetti","closeGiftCodeModal","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","messageKey","getMessageKey","selectPerformanceSettingsValue","stopActiveReaction","containerId","startActiveReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","dcId","statisticsDcId","stats","updateStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerPinnedStory","lastReadStoryId","storyIds","isPreload","areReactionsFirst","areJustContacts","PREVIEW_AVATAR_COUNT","updateStoryViewsLoading","updateStoryViews","recentViewerIds","view","updatePeerStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentMessageId","currentStoryId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","storyList","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","IS_MULTITAB_SUPPORTED","self","channel","BroadcastChannel","DATA_BROADCAST_CHANNEL_NAME","batchedUpdates","throttledLocalDbUpdate","postMessage","convertToVirtualClass","Uint8Array","Buffer","BigInt","isArray","VirtualClass","constructors","valueOmited","instance","flags","CONSTRUCTOR_ID","SUBCLASS_OF_ID","classType","getBytes","omitVirtualClassFields","key","initial","convertedValue","key2","typedValue","Proxy","target","prop","Reflect","LOCAL_MESSAGES_LIMIT","LOCAL_MEDIA_UPLOADING_TEMP_ID","localMessageCounter","buildNewPoll","summary","buildLocalMessage","getNextLocalMessageId","filename","fileName","size","audio","shouldSendAsSpoiler","quick","height","sizes","dataUri","isSpoiler","duration","waveform","inputWaveform","interpolateArray","performer","buildUploadingMedia","isChannel","resultReplyInfo","inputInfo","replyToTopId","replyToPeerId","quoteText","isQuote","getServerTimeOffset","isForwardingAllowed","emojiOnlyCount","getEmojiOnlyCountForMessage","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","areStoriesHidden","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","fetchChannelRecommendations","translationValues","targetChatId","updateChatListIds","isNotJoined","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","animationLevel","attachBots","selectTheme","canInstall","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","artist","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","FloatingActionButtons","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","mainMessage","albumId","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","inlineButtons","fromId","dividend","getPeerIdDividend","selectChatLastMessage","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","containerRef","handleStickerSelect","StickerView","chatBot","isLoadingBotInfo","chatBotFullInfo","MessageListBotInfo","isInMessageList","dpr","useDevicePixelRatio","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","EmbeddedStory","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","Album","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","AnimatedCustomEmoji","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","AnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","CommentButton","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","Game","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","canPlayAnimatedEmojis","Giveaway","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","untilDate","prizeDescription","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","DisplayNames","countries","countryCode","isoToEmoji","of","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIcon","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","InlineButtons","RE_TME_LINK","renderIcon","Invoice","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","InvoiceMediaPreview","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","cx","cy","d","Location","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","MessageMeta","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","Poll","onSendVote","openPollResults","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","isText","REACTION_SIZE","ReactionButton","withRecentReactors","recentReactors","recentReaction","isReactionChosen","ReactionAnimatedEmoji","AvatarList","Reactions","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","RoundVideo","playerRef","circleRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","downloadProgress","isPlayerReady","markPlayerReady","noThumb","getMessageMediaThumbDataUri","thumbRef","thumbClassNames","useMediaTransition","isTransferring","wasLoadDisabled","shouldSpinnerRender","spinnerClassNames","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","currentTime","shouldPlay","stopPlaying","capturePlaying","isAllowed","paused","stopCurrentAudio","handleTimeUpdate","onEnded","onTimeUpdate","onReady","ProgressSpinner","Sticker","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","isLowPriority","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","isRepliesChat","isChatWithRepliesBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyUserId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","hasMessageReply","isReplyToMessage","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasText","hasMessageText","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasActionButton","isGeoLiveActive","peerColorClass","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","renderSenderName","senderEmojiStatus","senderIsPremium","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","EmbeddedMessage","senderChat","forwardSender","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","DotAnimation","WebPage","backgroundEmojiId","onCancelMediaTransfer","MessageAppendix","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","SponsoredMessage","viewSponsoredMessage","openChatByInvite","requestAppWebView","clickSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","isAvatarShown","isBotApp","handleLinkClick","handleCloseSponsoredMessage","chatInviteHash","renderPhoto","isRecommended","siteName","isRectangular","chatInviteTitle","onAboutAds","MessageListContent","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","MessageList","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","backgroundColor","MessageSelectToolbar","ChatReportPanel","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","HeaderPinnedMessage","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","MiddleHeader","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderActions","canExpandActions","MobileSearch","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","onUnpin","teactOrderKey","AttachBotInstallModal","BoostModal","ChatlistModal","modal","GiftCodeModal","MapModal","OneTimeMediaModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadPeerSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","isOut","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","storyByIds","archiveStoryIds","archiveIds","similarChannels","limitSimilarChannels","commonChatIds","Profile","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadPeerPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","isSavedMessages","initialTab","setActiveTab","renderingActiveTab","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","RightSearch","loadMoreBoosters","closeBoostStatistics","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","statsOverview","level","premiumSubscribers","boostersToLoadCount","loadedCount","handleBoosterClick","section","PremiumProgress","leftText","rightText","floatingBadgeText","floatingBadgeIcon","StatisticsOverview","sectionHeader","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","prevConfettiTime","hideTimeout","DeleteFolderDialog","DialogsAsync","Dialogs","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","InviteViaLinkModal","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPremiumSetStickers","loadPeerColors","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","stickerSetShortName","UnreadCount","restrictedUserIds","passcodeSettings","LockScreen","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","require","JPEG_HEADER","JPEG_FOOTER","_raiseCastFail","entity","module","exports","getMessageId","getInputPeer","allowSelf","checkHash","inputEntity","User","InputPeerSelf","InputPeerUser","Chat","ChatEmpty","ChatForbidden","InputPeerChat","Channel","TypeError","InputPeerChannel","ChannelForbidden","InputUser","InputChannel","UserEmpty","InputPeerEmpty","UserFull","ChatFull","PeerChat","getDisplayName","getDownloadPartSize","fileSize","getUploadPartSize","strippedPhotoToJpg","stripped","header","getDC","downloadDC","ipAddress","port"],"sourceRoot":""}